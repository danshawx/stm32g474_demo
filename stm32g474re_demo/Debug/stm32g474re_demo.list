
stm32g474re_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005620  08005620  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08005620  08005620  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005620  08005620  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08005628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000414  200001ec  08005814  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  08005814  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013da4  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003343  00000000  00000000  00033fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  00037308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  000383a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029430  00000000  00000000  00039270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000105b2  00000000  00000000  000626a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3c3d  00000000  00000000  00072c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016688f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  0016690c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001ec 	.word	0x200001ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080055b0 	.word	0x080055b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001f0 	.word	0x200001f0
 8000214:	080055b0 	.word	0x080055b0

08000218 <Comm_Unpack_Fun>:
#include "main.h"


uint32_t Comm_Unpack_Fun(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	//uint16_t unpack_cnt = 0;
	uint8_t u8_rxdata = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
	//static uint8_t unpack_phase = 0;

	while (!is_DeCirqueempty(p_usartrxque)) // || (unpack_cnt ++ < CONFIG_USART_RXQUE_MAXLEN))
 8000222:	e006      	b.n	8000232 <Comm_Unpack_Fun+0x1a>
	{
		if (1 == DeCirque_pop(p_usartrxque,&u8_rxdata, 1))
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <Comm_Unpack_Fun+0x34>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	1df9      	adds	r1, r7, #7
 800022a:	2201      	movs	r2, #1
 800022c:	4618      	mov	r0, r3
 800022e:	f000 ffa0 	bl	8001172 <DeCirque_pop>
	while (!is_DeCirqueempty(p_usartrxque)) // || (unpack_cnt ++ < CONFIG_USART_RXQUE_MAXLEN))
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <Comm_Unpack_Fun+0x34>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4618      	mov	r0, r3
 8000238:	f000 ff85 	bl	8001146 <is_DeCirqueempty>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f0      	beq.n	8000224 <Comm_Unpack_Fun+0xc>

			}*/

		}
	}
	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000024c 	.word	0x2000024c

08000250 <Comm_Recv_Process>:
#include "main.h"

T_Comm_Test_Send g_tComm_Test_Send = {0};

static void Comm_Recv_Process(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	if (SUCCESS == Comm_Unpack_Fun())
 8000254:	f7ff ffe0 	bl	8000218 <Comm_Unpack_Fun>
	{

	}
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}

0800025c <Comm_Tra_Procecss>:

static void Comm_Tra_Procecss(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	//uint8_t i = 0;
	//uint16_t tx_crc16 = 0;
	T_Comm_Test_Send *p_tComm_Test_Send = (T_Comm_Test_Send *)g_aUsartTxBuf;
 8000262:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <Comm_Tra_Procecss+0x7c>)
 8000264:	607b      	str	r3, [r7, #4]

	p_tComm_Test_Send->g_tHeadTestSend.head_start = 0xFF;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	701a      	strb	r2, [r3, #0]
	p_tComm_Test_Send->g_tHeadTestSend.head_traid = 0x01;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2201      	movs	r2, #1
 8000270:	705a      	strb	r2, [r3, #1]
	p_tComm_Test_Send->g_tHeadTestSend.head_recid = 0x02;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2202      	movs	r2, #2
 8000276:	709a      	strb	r2, [r3, #2]
	p_tComm_Test_Send->g_tHeadTestSend.head_protoltype = 0xE1;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	22e1      	movs	r2, #225	; 0xe1
 800027c:	70da      	strb	r2, [r3, #3]
	p_tComm_Test_Send->g_tHeadTestSend.frame_cnt = 0x01;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2201      	movs	r2, #1
 8000282:	711a      	strb	r2, [r3, #4]
	p_tComm_Test_Send->g_tHeadTestSend.head_crc = crc_8(p_tComm_Test_Send, CONFIG_COMMUSART_HEAD_LEN-1);
 8000284:	2105      	movs	r1, #5
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f005 f86c 	bl	8005364 <crc_8>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	715a      	strb	r2, [r3, #5]

	p_tComm_Test_Send->g_tFrameTestSend.frame_start = 0xFE;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	22fe      	movs	r2, #254	; 0xfe
 8000298:	719a      	strb	r2, [r3, #6]
	p_tComm_Test_Send->g_tFrameTestSend.frame_len   = 6;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2206      	movs	r2, #6
 800029e:	71da      	strb	r2, [r3, #7]
	p_tComm_Test_Send->g_tFrameTestSend.frame_func  = 0xd9;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	22d9      	movs	r2, #217	; 0xd9
 80002a4:	721a      	strb	r2, [r3, #8]
	p_tComm_Test_Send->g_tFrameTestSend.frame_dates[0] = 10;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	220a      	movs	r2, #10
 80002aa:	725a      	strb	r2, [r3, #9]
	p_tComm_Test_Send->g_tFrameTestSend.frame_dates[1] = 11;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	220b      	movs	r2, #11
 80002b0:	729a      	strb	r2, [r3, #10]

	//crc to do
	p_tComm_Test_Send->g_tFrameTestSend.fram_crc = crc_16(&p_tComm_Test_Send->g_tFrameTestSend, CONFIG_COMMUSART_DATA_LEN-1);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3306      	adds	r3, #6
 80002b6:	2106      	movs	r1, #6
 80002b8:	4618      	mov	r0, r3
 80002ba:	f004 ffd9 	bl	8005270 <crc_16>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f8a3 200b 	strh.w	r2, [r3, #11]

	Comm_Tx_Hal((uint8_t *)p_tComm_Test_Send, sizeof(g_tComm_Test_Send));
 80002c8:	210d      	movs	r1, #13
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 fd98 	bl	8000e00 <Comm_Tx_Hal>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000228 	.word	0x20000228

080002dc <Comm_Task>:

void Comm_Task(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	Comm_Recv_Process();
 80002e0:	f7ff ffb6 	bl	8000250 <Comm_Recv_Process>
	Comm_Tra_Procecss();
 80002e4:	f7ff ffba 	bl	800025c <Comm_Tra_Procecss>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <__NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	2b00      	cmp	r3, #0
 8000318:	db0b      	blt.n	8000332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	f003 021f 	and.w	r2, r3, #31
 8000320:	4907      	ldr	r1, [pc, #28]	; (8000340 <__NVIC_EnableIRQ+0x38>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	095b      	lsrs	r3, r3, #5
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f202 	lsl.w	r2, r0, r2
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100

08000344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	db0a      	blt.n	800036e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	490c      	ldr	r1, [pc, #48]	; (8000390 <__NVIC_SetPriority+0x4c>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036c:	e00a      	b.n	8000384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4908      	ldr	r1, [pc, #32]	; (8000394 <__NVIC_SetPriority+0x50>)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 030f 	and.w	r3, r3, #15
 800037a:	3b04      	subs	r3, #4
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	440b      	add	r3, r1
 8000382:	761a      	strb	r2, [r3, #24]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000e100 	.word	0xe000e100
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	; 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	f1c3 0307 	rsb	r3, r3, #7
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	bf28      	it	cs
 80003b6:	2304      	movcs	r3, #4
 80003b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3304      	adds	r3, #4
 80003be:	2b06      	cmp	r3, #6
 80003c0:	d902      	bls.n	80003c8 <NVIC_EncodePriority+0x30>
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3b03      	subs	r3, #3
 80003c6:	e000      	b.n	80003ca <NVIC_EncodePriority+0x32>
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43da      	mvns	r2, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	401a      	ands	r2, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43d9      	mvns	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f0:	4313      	orrs	r3, r2
         );
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800040c:	4907      	ldr	r1, [pc, #28]	; (800042c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4313      	orrs	r3, r2
 8000412:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4013      	ands	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000

08000430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8000434:	2004      	movs	r0, #4
 8000436:	f7ff ffe3 	bl	8000400 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800043a:	2001      	movs	r0, #1
 800043c:	f7ff ffe0 	bl	8000400 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000440:	f7ff ff54 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000444:	4603      	mov	r3, r0
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ffa4 	bl	8000398 <NVIC_EncodePriority>
 8000450:	4603      	mov	r3, r0
 8000452:	4619      	mov	r1, r3
 8000454:	200c      	movs	r0, #12
 8000456:	f7ff ff75 	bl	8000344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff54 	bl	8000308 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000460:	f7ff ff44 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000464:	4603      	mov	r3, r0
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff94 	bl	8000398 <NVIC_EncodePriority>
 8000470:	4603      	mov	r3, r0
 8000472:	4619      	mov	r1, r3
 8000474:	200d      	movs	r0, #13
 8000476:	f7ff ff65 	bl	8000344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800047a:	200d      	movs	r0, #13
 800047c:	f7ff ff44 	bl	8000308 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000480:	2200      	movs	r2, #0
 8000482:	2100      	movs	r1, #0
 8000484:	200e      	movs	r0, #14
 8000486:	f001 fe5a 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800048a:	200e      	movs	r0, #14
 800048c:	f001 fe71 	bl	8002172 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	2100      	movs	r1, #0
 8000494:	200f      	movs	r0, #15
 8000496:	f001 fe52 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800049a:	200f      	movs	r0, #15
 800049c:	f001 fe69 	bl	8002172 <HAL_NVIC_EnableIRQ>

}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <__NVIC_GetPriorityGrouping>:
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <__NVIC_GetPriorityGrouping+0x18>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	0a1b      	lsrs	r3, r3, #8
 80004ae:	f003 0307 	and.w	r3, r3, #7
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	e000ed00 	.word	0xe000ed00

080004c0 <__NVIC_EnableIRQ>:
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	db0b      	blt.n	80004ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f003 021f 	and.w	r2, r3, #31
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <__NVIC_EnableIRQ+0x38>)
 80004da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004de:	095b      	lsrs	r3, r3, #5
 80004e0:	2001      	movs	r0, #1
 80004e2:	fa00 f202 	lsl.w	r2, r0, r2
 80004e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000e100 	.word	0xe000e100

080004fc <__NVIC_SetPriority>:
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800050c:	2b00      	cmp	r3, #0
 800050e:	db0a      	blt.n	8000526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	b2da      	uxtb	r2, r3
 8000514:	490c      	ldr	r1, [pc, #48]	; (8000548 <__NVIC_SetPriority+0x4c>)
 8000516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800051a:	0112      	lsls	r2, r2, #4
 800051c:	b2d2      	uxtb	r2, r2
 800051e:	440b      	add	r3, r1
 8000520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000524:	e00a      	b.n	800053c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	b2da      	uxtb	r2, r3
 800052a:	4908      	ldr	r1, [pc, #32]	; (800054c <__NVIC_SetPriority+0x50>)
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	f003 030f 	and.w	r3, r3, #15
 8000532:	3b04      	subs	r3, #4
 8000534:	0112      	lsls	r2, r2, #4
 8000536:	b2d2      	uxtb	r2, r2
 8000538:	440b      	add	r3, r1
 800053a:	761a      	strb	r2, [r3, #24]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	e000e100 	.word	0xe000e100
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <NVIC_EncodePriority>:
{
 8000550:	b480      	push	{r7}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f003 0307 	and.w	r3, r3, #7
 8000562:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	f1c3 0307 	rsb	r3, r3, #7
 800056a:	2b04      	cmp	r3, #4
 800056c:	bf28      	it	cs
 800056e:	2304      	movcs	r3, #4
 8000570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3304      	adds	r3, #4
 8000576:	2b06      	cmp	r3, #6
 8000578:	d902      	bls.n	8000580 <NVIC_EncodePriority+0x30>
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	3b03      	subs	r3, #3
 800057e:	e000      	b.n	8000582 <NVIC_EncodePriority+0x32>
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000588:	69bb      	ldr	r3, [r7, #24]
 800058a:	fa02 f303 	lsl.w	r3, r2, r3
 800058e:	43da      	mvns	r2, r3
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	401a      	ands	r2, r3
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000598:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	fa01 f303 	lsl.w	r3, r1, r3
 80005a2:	43d9      	mvns	r1, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a8:	4313      	orrs	r3, r2
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	3724      	adds	r7, #36	; 0x24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
	...

080005b8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b087      	sub	sp, #28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80005c2:	4a18      	ldr	r2, [pc, #96]	; (8000624 <LL_SYSCFG_SetEXTISource+0x6c>)
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	f003 0303 	and.w	r3, r3, #3
 80005ca:	3302      	adds	r3, #2
 80005cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	43db      	mvns	r3, r3
 80005d6:	ea02 0103 	and.w	r1, r2, r3
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	0c1b      	lsrs	r3, r3, #16
 80005de:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	fa93 f3a3 	rbit	r3, r3
 80005e6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80005f2:	2320      	movs	r3, #32
 80005f4:	e003      	b.n	80005fe <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	fab3 f383 	clz	r3, r3
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 031f 	and.w	r3, r3, #31
 8000602:	687a      	ldr	r2, [r7, #4]
 8000604:	409a      	lsls	r2, r3
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	430a      	orrs	r2, r1
 8000610:	3302      	adds	r3, #2
 8000612:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000616:	bf00      	nop
 8000618:	371c      	adds	r7, #28
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40010000 	.word	0x40010000

08000628 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000628:	b480      	push	{r7}
 800062a:	b08b      	sub	sp, #44	; 0x2c
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	fa93 f3a3 	rbit	r3, r3
 8000642:	613b      	str	r3, [r7, #16]
  return result;
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800064e:	2320      	movs	r3, #32
 8000650:	e003      	b.n	800065a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	fab3 f383 	clz	r3, r3
 8000658:	b2db      	uxtb	r3, r3
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	2103      	movs	r1, #3
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	401a      	ands	r2, r3
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800066a:	6a3b      	ldr	r3, [r7, #32]
 800066c:	fa93 f3a3 	rbit	r3, r3
 8000670:	61fb      	str	r3, [r7, #28]
  return result;
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000678:	2b00      	cmp	r3, #0
 800067a:	d101      	bne.n	8000680 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800067c:	2320      	movs	r3, #32
 800067e:	e003      	b.n	8000688 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000682:	fab3 f383 	clz	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	431a      	orrs	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	372c      	adds	r7, #44	; 0x2c
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80006a2:	b480      	push	{r7}
 80006a4:	b08b      	sub	sp, #44	; 0x2c
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	fa93 f3a3 	rbit	r3, r3
 80006bc:	613b      	str	r3, [r7, #16]
  return result;
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80006c2:	69bb      	ldr	r3, [r7, #24]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d101      	bne.n	80006cc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80006c8:	2320      	movs	r3, #32
 80006ca:	e003      	b.n	80006d4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	fab3 f383 	clz	r3, r3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	2103      	movs	r1, #3
 80006d8:	fa01 f303 	lsl.w	r3, r1, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	401a      	ands	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	fa93 f3a3 	rbit	r3, r3
 80006ea:	61fb      	str	r3, [r7, #28]
  return result;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80006f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80006f6:	2320      	movs	r3, #32
 80006f8:	e003      	b.n	8000702 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80006fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	6879      	ldr	r1, [r7, #4]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	431a      	orrs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	60da      	str	r2, [r3, #12]
}
 8000710:	bf00      	nop
 8000712:	372c      	adds	r7, #44	; 0x2c
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	683a      	ldr	r2, [r7, #0]
 800072a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000744:	4907      	ldr	r1, [pc, #28]	; (8000764 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4313      	orrs	r3, r2
 800074a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800074e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	4013      	ands	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000756:	68fb      	ldr	r3, [r7, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000

08000768 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800078a:	2004      	movs	r0, #4
 800078c:	f7ff ffd4 	bl	8000738 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ffd1 	bl	8000738 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff ffce 	bl	8000738 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CE_GPIO_Port, CE_Pin);
 800079c:	2140      	movs	r1, #64	; 0x40
 800079e:	482a      	ldr	r0, [pc, #168]	; (8000848 <MX_GPIO_Init+0xe0>)
 80007a0:	f7ff ffbc 	bl	800071c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CE_Pin;
 80007a4:	2340      	movs	r3, #64	; 0x40
 80007a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007a8:	2301      	movs	r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0xe0>)
 80007be:	f004 f92e 	bl	8004a1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DWM_IRQ_Pin;
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80007ca:	2302      	movs	r3, #2
 80007cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DWM_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	481d      	ldr	r0, [pc, #116]	; (8000848 <MX_GPIO_Init+0xe0>)
 80007d4:	f004 f923 	bl	8004a1e <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE12);
 80007d8:	491c      	ldr	r1, [pc, #112]	; (800084c <MX_GPIO_Init+0xe4>)
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff feec 	bl	80005b8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80007f2:	2301      	movs	r3, #1
 80007f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fed5 	bl	80045ac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(DWM_IRQA12_GPIO_Port, DWM_IRQA12_Pin, LL_GPIO_PULL_DOWN);
 8000802:	2202      	movs	r2, #2
 8000804:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080c:	f7ff ff49 	bl	80006a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(DWM_IRQA12_GPIO_Port, DWM_IRQA12_Pin, LL_GPIO_MODE_INPUT);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f7ff ff05 	bl	8000628 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800081e:	f7ff fe41 	bl	80004a4 <__NVIC_GetPriorityGrouping>
 8000822:	4603      	mov	r3, r0
 8000824:	2200      	movs	r2, #0
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fe91 	bl	8000550 <NVIC_EncodePriority>
 800082e:	4603      	mov	r3, r0
 8000830:	4619      	mov	r1, r3
 8000832:	2028      	movs	r0, #40	; 0x28
 8000834:	f7ff fe62 	bl	80004fc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000838:	2028      	movs	r0, #40	; 0x28
 800083a:	f7ff fe41 	bl	80004c0 <__NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3728      	adds	r7, #40	; 0x28
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	48000800 	.word	0x48000800
 800084c:	000f0003 	.word	0x000f0003

08000850 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800085e:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <LL_DMA_EnableChannel+0x40>)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	4413      	add	r3, r2
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4908      	ldr	r1, [pc, #32]	; (8000890 <LL_DMA_EnableChannel+0x40>)
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	440a      	add	r2, r1
 8000874:	7812      	ldrb	r2, [r2, #0]
 8000876:	4611      	mov	r1, r2
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	440a      	add	r2, r1
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6013      	str	r3, [r2, #0]
}
 8000882:	bf00      	nop
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	080055c8 	.word	0x080055c8

08000894 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80008a2:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <LL_DMA_DisableChannel+0x40>)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	461a      	mov	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4413      	add	r3, r2
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4908      	ldr	r1, [pc, #32]	; (80008d4 <LL_DMA_DisableChannel+0x40>)
 80008b4:	683a      	ldr	r2, [r7, #0]
 80008b6:	440a      	add	r2, r1
 80008b8:	7812      	ldrb	r2, [r2, #0]
 80008ba:	4611      	mov	r1, r2
 80008bc:	68fa      	ldr	r2, [r7, #12]
 80008be:	440a      	add	r2, r1
 80008c0:	f023 0301 	bic.w	r3, r3, #1
 80008c4:	6013      	str	r3, [r2, #0]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	080055c8 	.word	0x080055c8

080008d8 <LL_DMA_IsEnabledChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LL_DMA_IsEnabledChannel+0x38>)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4413      	add	r3, r2
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d101      	bne.n	8000902 <LL_DMA_IsEnabledChannel+0x2a>
 80008fe:	2301      	movs	r3, #1
 8000900:	e000      	b.n	8000904 <LL_DMA_IsEnabledChannel+0x2c>
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	080055c8 	.word	0x080055c8

08000914 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <LL_DMA_GetDataTransferDirection+0x30>)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	4413      	add	r3, r2
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	f244 0310 	movw	r3, #16400	; 0x4010
 8000936:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8000938:	4618      	mov	r0, r3
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	080055c8 	.word	0x080055c8

08000948 <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LL_DMA_SetDataLength+0x48>)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	4413      	add	r3, r2
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	0c1b      	lsrs	r3, r3, #16
 800096a:	041b      	lsls	r3, r3, #16
 800096c:	4908      	ldr	r1, [pc, #32]	; (8000990 <LL_DMA_SetDataLength+0x48>)
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	440a      	add	r2, r1
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	4611      	mov	r1, r2
 8000976:	697a      	ldr	r2, [r7, #20]
 8000978:	440a      	add	r2, r1
 800097a:	4611      	mov	r1, r2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4313      	orrs	r3, r2
 8000980:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000982:	bf00      	nop
 8000984:	371c      	adds	r7, #28
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	080055c8 	.word	0x080055c8

08000994 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <LL_DMA_GetDataLength+0x2c>)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	461a      	mov	r2, r3
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	080055c8 	.word	0x080055c8

080009c4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	2b10      	cmp	r3, #16
 80009da:	d114      	bne.n	8000a06 <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80009dc:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <LL_DMA_ConfigAddresses+0x78>)
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	4413      	add	r3, r2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	4413      	add	r3, r2
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <LL_DMA_ConfigAddresses+0x78>)
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	4413      	add	r3, r2
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	4413      	add	r3, r2
 80009fe:	461a      	mov	r2, r3
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 8000a04:	e013      	b.n	8000a2e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LL_DMA_ConfigAddresses+0x78>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	461a      	mov	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	4413      	add	r3, r2
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <LL_DMA_ConfigAddresses+0x78>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4413      	add	r3, r2
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	4413      	add	r3, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	60d3      	str	r3, [r2, #12]
}
 8000a2e:	bf00      	nop
 8000a30:	371c      	adds	r7, #28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	080055c8 	.word	0x080055c8

08000a40 <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0320 	and.w	r3, r3, #32
 8000a50:	2b20      	cmp	r3, #32
 8000a52:	d101      	bne.n	8000a58 <LL_DMA_IsActiveFlag_TC2+0x18>
 8000a54:	2301      	movs	r3, #1
 8000a56:	e000      	b.n	8000a5a <LL_DMA_IsActiveFlag_TC2+0x1a>
 8000a58:	2300      	movs	r3, #0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 8000a66:	b480      	push	{r7}
 8000a68:	b083      	sub	sp, #12
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a7a:	d101      	bne.n	8000a80 <LL_DMA_IsActiveFlag_TC3+0x1a>
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e000      	b.n	8000a82 <LL_DMA_IsActiveFlag_TC3+0x1c>
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	2b80      	cmp	r3, #128	; 0x80
 8000aa0:	d101      	bne.n	8000aa6 <LL_DMA_IsActiveFlag_TE2+0x18>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <LL_DMA_IsActiveFlag_TE2+0x1a>
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_DMA_IsActiveFlag_TE3>:
  * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ac8:	d101      	bne.n	8000ace <LL_DMA_IsActiveFlag_TE3+0x1a>
 8000aca:	2301      	movs	r3, #1
 8000acc:	e000      	b.n	8000ad0 <LL_DMA_IsActiveFlag_TE3+0x1c>
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <LL_DMA_ClearFlag_GI2>:
  * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	605a      	str	r2, [r3, #4]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b04:	605a      	str	r2, [r3, #4]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2280      	movs	r2, #128	; 0x80
 8000b1e:	605a      	str	r2, [r3, #4]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_DMA_ClearFlag_TE3>:
  * @rmtoll IFCR         CTEIF3        LL_DMA_ClearFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b3a:	605a      	str	r2, [r3, #4]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8000b56:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <LL_DMA_EnableIT_TC+0x40>)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4908      	ldr	r1, [pc, #32]	; (8000b88 <LL_DMA_EnableIT_TC+0x40>)
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	440a      	add	r2, r1
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	440a      	add	r2, r1
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	080055c8 	.word	0x080055c8

08000b8c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 8000b9a:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <LL_DMA_EnableIT_TE+0x40>)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4908      	ldr	r1, [pc, #32]	; (8000bcc <LL_DMA_EnableIT_TE+0x40>)
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	440a      	add	r2, r1
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	440a      	add	r2, r1
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6013      	str	r3, [r2, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	080055c8 	.word	0x080055c8

08000bd0 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69db      	ldr	r3, [r3, #28]
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	2b10      	cmp	r3, #16
 8000be2:	d101      	bne.n	8000be8 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000be4:	2301      	movs	r3, #1
 8000be6:	e000      	b.n	8000bea <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c06:	2b40      	cmp	r3, #64	; 0x40
 8000c08:	d101      	bne.n	8000c0e <LL_USART_IsActiveFlag_TC+0x18>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <LL_USART_IsActiveFlag_TC+0x1a>
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2210      	movs	r2, #16
 8000c28:	621a      	str	r2, [r3, #32]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2240      	movs	r2, #64	; 0x40
 8000c42:	621a      	str	r2, [r3, #32]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f043 0210 	orr.w	r2, r3, #16
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	601a      	str	r2, [r3, #0]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f023 0210 	bic.w	r2, r3, #16
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	609a      	str	r2, [r3, #8]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3328      	adds	r3, #40	; 0x28
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e002      	b.n	8000d2e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3324      	adds	r3, #36	; 0x24
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <Comm_BufInit_Hal>:

T_DeCirqueDate *p_usarttxque = NULL;
T_DeCirqueDate *p_usartrxque = NULL;

void Comm_BufInit_Hal(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
    p_usarttxque = DeCirque_init(CONFIG_USART_TXQUE_MAXLEN);
 8000d40:	205a      	movs	r0, #90	; 0x5a
 8000d42:	f000 faaf 	bl	80012a4 <DeCirque_init>
 8000d46:	4602      	mov	r2, r0
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <Comm_BufInit_Hal+0x20>)
 8000d4a:	601a      	str	r2, [r3, #0]
    p_usartrxque = DeCirque_init(CONFIG_USART_RXQUE_MAXLEN);
 8000d4c:	203c      	movs	r0, #60	; 0x3c
 8000d4e:	f000 faa9 	bl	80012a4 <DeCirque_init>
 8000d52:	4602      	mov	r2, r0
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <Comm_BufInit_Hal+0x24>)
 8000d56:	601a      	str	r2, [r3, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000248 	.word	0x20000248
 8000d60:	2000024c 	.word	0x2000024c

08000d64 <Comm_DMAUconf_Hal>:

void Comm_DMAUconf_Hal(void)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af02      	add	r7, sp, #8
    /* (3) Configure the DMA functional parameters for transmission */
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 8000d6a:	4c21      	ldr	r4, [pc, #132]	; (8000df0 <Comm_DMAUconf_Hal+0x8c>)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4821      	ldr	r0, [pc, #132]	; (8000df4 <Comm_DMAUconf_Hal+0x90>)
 8000d70:	f7ff ffce 	bl	8000d10 <LL_USART_DMA_GetRegAddr>
 8000d74:	4605      	mov	r5, r0
 8000d76:	2101      	movs	r1, #1
 8000d78:	481f      	ldr	r0, [pc, #124]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000d7a:	f7ff fdcb 	bl	8000914 <LL_DMA_GetDataTransferDirection>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	462b      	mov	r3, r5
 8000d84:	4622      	mov	r2, r4
 8000d86:	2101      	movs	r1, #1
 8000d88:	481b      	ldr	r0, [pc, #108]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000d8a:	f7ff fe1b 	bl	80009c4 <LL_DMA_ConfigAddresses>
                           (uint32_t)g_aTXDMABuf,
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT),
                           LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, CONFIG_USARTDMA_TX_MAXLEN);
 8000d8e:	220a      	movs	r2, #10
 8000d90:	2101      	movs	r1, #1
 8000d92:	4819      	ldr	r0, [pc, #100]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000d94:	f7ff fdd8 	bl	8000948 <LL_DMA_SetDataLength>

    /* (4) Configure the DMA functional parameters for reception */

    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3,
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4816      	ldr	r0, [pc, #88]	; (8000df4 <Comm_DMAUconf_Hal+0x90>)
 8000d9c:	f7ff ffb8 	bl	8000d10 <LL_USART_DMA_GetRegAddr>
 8000da0:	4605      	mov	r5, r0
 8000da2:	4c16      	ldr	r4, [pc, #88]	; (8000dfc <Comm_DMAUconf_Hal+0x98>)
 8000da4:	2102      	movs	r1, #2
 8000da6:	4814      	ldr	r0, [pc, #80]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000da8:	f7ff fdb4 	bl	8000914 <LL_DMA_GetDataTransferDirection>
 8000dac:	4603      	mov	r3, r0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	4623      	mov	r3, r4
 8000db2:	462a      	mov	r2, r5
 8000db4:	2102      	movs	r1, #2
 8000db6:	4810      	ldr	r0, [pc, #64]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000db8:	f7ff fe04 	bl	80009c4 <LL_DMA_ConfigAddresses>
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
                           (uint32_t)g_aRXDMABuf,
                           LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3));
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, CONFIG_USARTDMA_RX_MAXLEN);
 8000dbc:	2214      	movs	r2, #20
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000dc2:	f7ff fdc1 	bl	8000948 <LL_DMA_SetDataLength>

    /* (5) Enable DMA transfer complete/error interrupts  */
    //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000dca:	f7ff fedf 	bl	8000b8c <LL_DMA_EnableIT_TE>
    //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_3);
 8000dce:	2102      	movs	r1, #2
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000dd2:	f7ff fedb 	bl	8000b8c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART1);
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <Comm_DMAUconf_Hal+0x90>)
 8000dd8:	f7ff ff7a 	bl	8000cd0 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000ddc:	2102      	movs	r1, #2
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <Comm_DMAUconf_Hal+0x94>)
 8000de0:	f7ff fd36 	bl	8000850 <LL_DMA_EnableChannel>

    LL_USART_EnableIT_IDLE(USART1);
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <Comm_DMAUconf_Hal+0x90>)
 8000de6:	f7ff ff33 	bl	8000c50 <LL_USART_EnableIT_IDLE>

}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bdb0      	pop	{r4, r5, r7, pc}
 8000df0:	20000208 	.word	0x20000208
 8000df4:	40013800 	.word	0x40013800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	20000214 	.word	0x20000214

08000e00 <Comm_Tx_Hal>:

void Comm_Tx_Hal(uint8_t *p_txbuf, uint8_t tx_len)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_dmalen = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	73fb      	strb	r3, [r7, #15]

    DeCirque_push(p_usarttxque, p_txbuf, tx_len);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <Comm_Tx_Hal+0x78>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	78fa      	ldrb	r2, [r7, #3]
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f9f0 	bl	80011fe <DeCirque_push>
    if (!LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_2))
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <Comm_Tx_Hal+0x7c>)
 8000e22:	f7ff fd59 	bl	80008d8 <LL_DMA_IsEnabledChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d121      	bne.n	8000e70 <Comm_Tx_Hal+0x70>
    {
        tx_dmalen = (p_usarttxque->size < CONFIG_USARTDMA_TX_MAXLEN) ? p_usarttxque->size : CONFIG_USARTDMA_TX_MAXLEN;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <Comm_Tx_Hal+0x78>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b0a      	cmp	r3, #10
 8000e34:	bfa8      	it	ge
 8000e36:	230a      	movge	r3, #10
 8000e38:	73fb      	strb	r3, [r7, #15]
        if (1 == DeCirque_pop(p_usarttxque, g_aTXDMABuf, tx_dmalen))
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <Comm_Tx_Hal+0x78>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	7bfa      	ldrb	r2, [r7, #15]
 8000e40:	490f      	ldr	r1, [pc, #60]	; (8000e80 <Comm_Tx_Hal+0x80>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f995 	bl	8001172 <DeCirque_pop>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d110      	bne.n	8000e70 <Comm_Tx_Hal+0x70>
        {
        	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	461a      	mov	r2, r3
 8000e52:	2101      	movs	r1, #1
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <Comm_Tx_Hal+0x7c>)
 8000e56:	f7ff fd77 	bl	8000948 <LL_DMA_SetDataLength>
        	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <Comm_Tx_Hal+0x7c>)
 8000e5e:	f7ff fe73 	bl	8000b48 <LL_DMA_EnableIT_TC>
            LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000e62:	2101      	movs	r1, #1
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <Comm_Tx_Hal+0x7c>)
 8000e66:	f7ff fcf3 	bl	8000850 <LL_DMA_EnableChannel>
            LL_USART_EnableDMAReq_TX(USART1);
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <Comm_Tx_Hal+0x84>)
 8000e6c:	f7ff ff40 	bl	8000cf0 <LL_USART_EnableDMAReq_TX>
        }
    }
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000248 	.word	0x20000248
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	20000208 	.word	0x20000208
 8000e84:	40013800 	.word	0x40013800

08000e88 <DMA1_ReceiveComplete_Callback>:


//******************** handler ***********************
static void DMA1_ReceiveComplete_Callback(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	uint8_t rx_dmalen = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]

	//LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_3);
	//LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000e92:	2102      	movs	r1, #2
 8000e94:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000e96:	f7ff fcfd 	bl	8000894 <LL_DMA_DisableChannel>

	rx_dmalen = CONFIG_USARTDMA_RX_MAXLEN - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000e9e:	f7ff fd79 	bl	8000994 <LL_DMA_GetDataLength>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	f1c3 0314 	rsb	r3, r3, #20
 8000eaa:	71fb      	strb	r3, [r7, #7]
	DeCirque_push(p_usartrxque, g_aRXDMABuf, rx_dmalen);
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <DMA1_ReceiveComplete_Callback+0x50>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	79fa      	ldrb	r2, [r7, #7]
 8000eb2:	490a      	ldr	r1, [pc, #40]	; (8000edc <DMA1_ReceiveComplete_Callback+0x54>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f000 f9a2 	bl	80011fe <DeCirque_push>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, CONFIG_USARTDMA_RX_MAXLEN);
 8000eba:	2214      	movs	r2, #20
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000ec0:	f7ff fd42 	bl	8000948 <LL_DMA_SetDataLength>

	//LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000ec8:	f7ff fcc2 	bl	8000850 <LL_DMA_EnableChannel>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	2000024c 	.word	0x2000024c
 8000edc:	20000214 	.word	0x20000214

08000ee0 <Comm_DMA_CHAN2_Handler>:

void Comm_DMA_CHAN2_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
    if(LL_DMA_IsActiveFlag_TC2(DMA1))
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <Comm_DMA_CHAN2_Handler+0x34>)
 8000ee6:	f7ff fdab 	bl	8000a40 <LL_DMA_IsActiveFlag_TC2>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <Comm_DMA_CHAN2_Handler+0x1e>
    {
        LL_DMA_ClearFlag_GI2(DMA1);
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <Comm_DMA_CHAN2_Handler+0x34>)
 8000ef2:	f7ff fdf3 	bl	8000adc <LL_DMA_ClearFlag_GI2>
        /* Call function Transmission complete Callback */
        //DMA1_TransmitComplete_Callback();
        LL_USART_EnableIT_TC(USART1);
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <Comm_DMA_CHAN2_Handler+0x38>)
 8000ef8:	f7ff feba 	bl	8000c70 <LL_USART_EnableIT_TC>
//    {
//    	LL_DMA_ClearFlag_TE3(DMA1);
//        /* Call Error function */
//        //USART_TransferError_Callback();
//    }
}
 8000efc:	e008      	b.n	8000f10 <Comm_DMA_CHAN2_Handler+0x30>
    else if(LL_DMA_IsActiveFlag_TE2(DMA1))
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <Comm_DMA_CHAN2_Handler+0x34>)
 8000f00:	f7ff fdc5 	bl	8000a8e <LL_DMA_IsActiveFlag_TE2>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <Comm_DMA_CHAN2_Handler+0x30>
    	LL_DMA_ClearFlag_TE2(DMA1);
 8000f0a:	4802      	ldr	r0, [pc, #8]	; (8000f14 <Comm_DMA_CHAN2_Handler+0x34>)
 8000f0c:	f7ff fe01 	bl	8000b12 <LL_DMA_ClearFlag_TE2>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40013800 	.word	0x40013800

08000f1c <Comm_DMA_CHAN3_Handler>:

void Comm_DMA_CHAN3_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
//    {
//        /* Call Error function */
//        //USART_TransferError_Callback();
//    	LL_DMA_ClearFlag_TE2(DMA1);
//    }
    if(LL_DMA_IsActiveFlag_TC3(DMA1))
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <Comm_DMA_CHAN3_Handler+0x30>)
 8000f22:	f7ff fda0 	bl	8000a66 <LL_DMA_IsActiveFlag_TC3>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <Comm_DMA_CHAN3_Handler+0x18>
    {
        LL_DMA_ClearFlag_GI3(DMA1);
 8000f2c:	4807      	ldr	r0, [pc, #28]	; (8000f4c <Comm_DMA_CHAN3_Handler+0x30>)
 8000f2e:	f7ff fde2 	bl	8000af6 <LL_DMA_ClearFlag_GI3>
    {
    	LL_DMA_ClearFlag_TE3(DMA1);
        /* Call Error function */
        //USART_TransferError_Callback();
    }
}
 8000f32:	e008      	b.n	8000f46 <Comm_DMA_CHAN3_Handler+0x2a>
    else if(LL_DMA_IsActiveFlag_TE3(DMA1))
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <Comm_DMA_CHAN3_Handler+0x30>)
 8000f36:	f7ff fdbd 	bl	8000ab4 <LL_DMA_IsActiveFlag_TE3>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <Comm_DMA_CHAN3_Handler+0x2a>
    	LL_DMA_ClearFlag_TE3(DMA1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <Comm_DMA_CHAN3_Handler+0x30>)
 8000f42:	f7ff fdf3 	bl	8000b2c <LL_DMA_ClearFlag_TE3>
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020000 	.word	0x40020000

08000f50 <Comm_USART1_TX_Handler>:

void Comm_USART1_TX_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	 uint8_t tx_dmalen = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]

	if (is_DeCirqueempty(p_usarttxque))
 8000f5a:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <Comm_USART1_TX_Handler+0x6c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f8f1 	bl	8001146 <is_DeCirqueempty>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <Comm_USART1_TX_Handler+0x24>
	{
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <Comm_USART1_TX_Handler+0x70>)
 8000f6e:	f7ff fc91 	bl	8000894 <LL_DMA_DisableChannel>
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
			//LL_USART_EnableDMAReq_TX(USART1);
		}
	}
}
 8000f72:	e01e      	b.n	8000fb2 <Comm_USART1_TX_Handler+0x62>
		tx_dmalen = (p_usarttxque->size < CONFIG_USARTDMA_TX_MAXLEN) ? p_usarttxque->size : CONFIG_USARTDMA_TX_MAXLEN;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <Comm_USART1_TX_Handler+0x6c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	2b0a      	cmp	r3, #10
 8000f7c:	bfa8      	it	ge
 8000f7e:	230a      	movge	r3, #10
 8000f80:	71fb      	strb	r3, [r7, #7]
		if (1 == DeCirque_pop(p_usarttxque, g_aTXDMABuf, tx_dmalen))
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <Comm_USART1_TX_Handler+0x6c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	79fa      	ldrb	r2, [r7, #7]
 8000f88:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <Comm_USART1_TX_Handler+0x74>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f8f1 	bl	8001172 <DeCirque_pop>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d10d      	bne.n	8000fb2 <Comm_USART1_TX_Handler+0x62>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000f96:	2101      	movs	r1, #1
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <Comm_USART1_TX_Handler+0x70>)
 8000f9a:	f7ff fc7b 	bl	8000894 <LL_DMA_DisableChannel>
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <Comm_USART1_TX_Handler+0x70>)
 8000fa6:	f7ff fccf 	bl	8000948 <LL_DMA_SetDataLength>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000faa:	2101      	movs	r1, #1
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <Comm_USART1_TX_Handler+0x70>)
 8000fae:	f7ff fc4f 	bl	8000850 <LL_DMA_EnableChannel>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000248 	.word	0x20000248
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	20000208 	.word	0x20000208

08000fc8 <Comm_USART1_Handler>:

void Comm_USART1_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	if (LL_USART_IsActiveFlag_TC(USART1))
 8000fcc:	4810      	ldr	r0, [pc, #64]	; (8001010 <Comm_USART1_Handler+0x48>)
 8000fce:	f7ff fe12 	bl	8000bf6 <LL_USART_IsActiveFlag_TC>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d007      	beq.n	8000fe8 <Comm_USART1_Handler+0x20>
	{
		LL_USART_ClearFlag_TC(USART1);
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <Comm_USART1_Handler+0x48>)
 8000fda:	f7ff fe2c 	bl	8000c36 <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(USART1);
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <Comm_USART1_Handler+0x48>)
 8000fe0:	f7ff fe66 	bl	8000cb0 <LL_USART_DisableIT_TC>
		Comm_USART1_TX_Handler();
 8000fe4:	f7ff ffb4 	bl	8000f50 <Comm_USART1_TX_Handler>
	}
	if (LL_USART_IsActiveFlag_IDLE(USART1))
 8000fe8:	4809      	ldr	r0, [pc, #36]	; (8001010 <Comm_USART1_Handler+0x48>)
 8000fea:	f7ff fdf1 	bl	8000bd0 <LL_USART_IsActiveFlag_IDLE>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <Comm_USART1_Handler+0x42>
	{
		LL_USART_ClearFlag_IDLE(USART1);
 8000ff4:	4806      	ldr	r0, [pc, #24]	; (8001010 <Comm_USART1_Handler+0x48>)
 8000ff6:	f7ff fe11 	bl	8000c1c <LL_USART_ClearFlag_IDLE>
		LL_USART_DisableIT_IDLE(USART1);
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <Comm_USART1_Handler+0x48>)
 8000ffc:	f7ff fe48 	bl	8000c90 <LL_USART_DisableIT_IDLE>
		DMA1_ReceiveComplete_Callback();
 8001000:	f7ff ff42 	bl	8000e88 <DMA1_ReceiveComplete_Callback>
		LL_USART_EnableIT_IDLE(USART1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <Comm_USART1_Handler+0x48>)
 8001006:	f7ff fe23 	bl	8000c50 <LL_USART_EnableIT_IDLE>
	}
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40013800 	.word	0x40013800

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 ff45 	bl	8001ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f828 	bl	8001070 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Comm_BufInit_Hal();
 8001020:	f7ff fe8c 	bl	8000d3c <Comm_BufInit_Hal>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f7ff fba0 	bl	8000768 <MX_GPIO_Init>
  MX_DMA_Init();
 8001028:	f7ff fa02 	bl	8000430 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800102c:	f000 fe36 	bl	8001c9c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001030:	f000 f9ac 	bl	800138c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Comm_DMAUconf_Hal();
 8001034:	f7ff fe96 	bl	8000d64 <Comm_DMAUconf_Hal>

  //====================================
    if (HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 8001038:	236f      	movs	r3, #111	; 0x6f
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <main+0x4c>)
 800103c:	4909      	ldr	r1, [pc, #36]	; (8001064 <main+0x50>)
 800103e:	480a      	ldr	r0, [pc, #40]	; (8001068 <main+0x54>)
 8001040:	f002 fd4e 	bl	8003ae0 <HAL_SPI_TransmitReceive_DMA>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <main+0x3a>
    {
      /* Transfer error in transmission process */
      Error_Handler();
 800104a:	f000 f878 	bl	800113e <Error_Handler>
    /*  Before starting a new communication transfer, you must wait the callback call
        to get the transfer complete confirmation or an error detection.
        For simplicity reasons, this example is just waiting till the end of the
        transfer, but application may perform other tasks while transfer operation
        is ongoing. */
    while (wTransferState == TRANSFER_WAIT)
 800104e:	bf00      	nop
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <main+0x58>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0fb      	beq.n	8001050 <main+0x3c>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  My_Sched_Loop();
 8001058:	f000 f95a 	bl	8001310 <My_Sched_Loop>
 800105c:	e7fc      	b.n	8001058 <main+0x44>
 800105e:	bf00      	nop
 8001060:	20000464 	.word	0x20000464
 8001064:	20000000 	.word	0x20000000
 8001068:	200004d4 	.word	0x200004d4
 800106c:	20000250 	.word	0x20000250

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0a8      	sub	sp, #160	; 0xa0
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800107a:	2238      	movs	r2, #56	; 0x38
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 f9d4 	bl	800542c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	463b      	mov	r3, r7
 8001096:	2254      	movs	r2, #84	; 0x54
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 f9c6 	bl	800542c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f001 fc75 	bl	8002990 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a6:	2302      	movs	r3, #2
 80010a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b0:	2340      	movs	r3, #64	; 0x40
 80010b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010c6:	2355      	movs	r3, #85	; 0x55
 80010c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fd08 	bl	8002af8 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ee:	f000 f826 	bl	800113e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001106:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800110a:	2104      	movs	r1, #4
 800110c:	4618      	mov	r0, r3
 800110e:	f002 f80b 	bl	8003128 <HAL_RCC_ClockConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001118:	f000 f811 	bl	800113e <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800111c:	2301      	movs	r3, #1
 800111e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	4618      	mov	r0, r3
 8001128:	f002 f9e2 	bl	80034f0 <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001132:	f000 f804 	bl	800113e <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	37a0      	adds	r7, #160	; 0xa0
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001142:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x6>

08001146 <is_DeCirqueempty>:
#include "stdio.h"
#include "my_lib.h"

//*********************** circular queue ****************//
int32_t is_DeCirqueempty(T_DeCirqueDate *p_quehead)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
    if (NULL == p_quehead)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <is_DeCirqueempty+0x12>
        return 0;
 8001154:	2300      	movs	r3, #0
 8001156:	e006      	b.n	8001166 <is_DeCirqueempty+0x20>
    
    if (p_quehead->size <= 0)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dc01      	bgt.n	8001164 <is_DeCirqueempty+0x1e>
    {
        return 1;
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <is_DeCirqueempty+0x20>
    }

    return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <DeCirque_pop>:

int32_t DeCirque_pop(T_DeCirqueDate *p_quehead, uint8_t *p_buf, uint8_t buf_len)
{
 8001172:	b480      	push	{r7}
 8001174:	b087      	sub	sp, #28
 8001176:	af00      	add	r7, sp, #0
 8001178:	60f8      	str	r0, [r7, #12]
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	4613      	mov	r3, r2
 800117e:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]

    if (NULL == p_quehead)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <DeCirque_pop+0x1e>
        return -1;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800118e:	e030      	b.n	80011f2 <DeCirque_pop+0x80>
    if ((buf_len > p_quehead->size) || (buf_len <= 0))
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	429a      	cmp	r2, r3
 8001198:	dc02      	bgt.n	80011a0 <DeCirque_pop+0x2e>
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d102      	bne.n	80011a6 <DeCirque_pop+0x34>
    	return -1;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011a4:	e025      	b.n	80011f2 <DeCirque_pop+0x80>

    for (i = 0; i < buf_len; i ++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	75fb      	strb	r3, [r7, #23]
 80011aa:	e01d      	b.n	80011e8 <DeCirque_pop+0x76>
    {
    	p_buf[i] = p_quehead->p_queuebuf[p_quehead->front];
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	6892      	ldr	r2, [r2, #8]
 80011b4:	441a      	add	r2, r3
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	440b      	add	r3, r1
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	701a      	strb	r2, [r3, #0]
		p_quehead->front = (p_quehead->front + 1) % (p_quehead->cap);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	3301      	adds	r3, #1
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	6812      	ldr	r2, [r2, #0]
 80011ca:	fb93 f1f2 	sdiv	r1, r3, r2
 80011ce:	fb02 f201 	mul.w	r2, r2, r1
 80011d2:	1a9a      	subs	r2, r3, r2
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	609a      	str	r2, [r3, #8]
		p_quehead->size -= 1;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	60da      	str	r2, [r3, #12]
    for (i = 0; i < buf_len; i ++)
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	3301      	adds	r3, #1
 80011e6:	75fb      	strb	r3, [r7, #23]
 80011e8:	7dfa      	ldrb	r2, [r7, #23]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d3dd      	bcc.n	80011ac <DeCirque_pop+0x3a>
    }
    return 1;
 80011f0:	2301      	movs	r3, #1
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	371c      	adds	r7, #28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <DeCirque_push>:

int32_t DeCirque_push(T_DeCirqueDate *p_quehead, uint8_t *p_buf, uint8_t buf_len)
{
 80011fe:	b480      	push	{r7}
 8001200:	b087      	sub	sp, #28
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	4613      	mov	r3, r2
 800120a:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	75fb      	strb	r3, [r7, #23]

    if (NULL == p_quehead)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d102      	bne.n	800121c <DeCirque_push+0x1e>
        return -1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121a:	e03d      	b.n	8001298 <DeCirque_push+0x9a>
    if (NULL == p_quehead->p_queuebuf)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <DeCirque_push+0x2c>
        return -1;
 8001224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001228:	e036      	b.n	8001298 <DeCirque_push+0x9a>
    if (buf_len <= 0)
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <DeCirque_push+0x38>
    	return -1;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001234:	e030      	b.n	8001298 <DeCirque_push+0x9a>

    for (i = 0; i < buf_len; i ++)
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]
 800123a:	e028      	b.n	800128e <DeCirque_push+0x90>
    {
    	p_quehead->p_queuebuf[p_quehead->rear] = p_buf[i];
 800123c:	7dfb      	ldrb	r3, [r7, #23]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	441a      	add	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	691b      	ldr	r3, [r3, #16]
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	6849      	ldr	r1, [r1, #4]
 800124a:	440b      	add	r3, r1
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	701a      	strb	r2, [r3, #0]
		p_quehead->rear = (p_quehead->rear + 1) % (p_quehead->cap);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	3301      	adds	r3, #1
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	fb93 f1f2 	sdiv	r1, r3, r2
 800125e:	fb02 f201 	mul.w	r2, r2, r1
 8001262:	1a9a      	subs	r2, r3, r2
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	605a      	str	r2, [r3, #4]
		if (p_quehead->size < p_quehead->cap)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	da05      	bge.n	8001280 <DeCirque_push+0x82>
			p_quehead->size += 1;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	1c5a      	adds	r2, r3, #1
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	e003      	b.n	8001288 <DeCirque_push+0x8a>
		else
		{
			p_quehead->front = p_quehead->rear;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	609a      	str	r2, [r3, #8]
    for (i = 0; i < buf_len; i ++)
 8001288:	7dfb      	ldrb	r3, [r7, #23]
 800128a:	3301      	adds	r3, #1
 800128c:	75fb      	strb	r3, [r7, #23]
 800128e:	7dfa      	ldrb	r2, [r7, #23]
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	429a      	cmp	r2, r3
 8001294:	d3d2      	bcc.n	800123c <DeCirque_push+0x3e>
		}
    }
    
    return 1;
 8001296:	2301      	movs	r3, #1
};
 8001298:	4618      	mov	r0, r3
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <DeCirque_init>:

T_DeCirqueDate *DeCirque_init(int32_t buf_len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    if (buf_len > 0)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd29      	ble.n	8001306 <DeCirque_init+0x62>
    {
        T_DeCirqueDate *p_queue = (T_DeCirqueDate *)malloc(sizeof(T_DeCirqueDate));
 80012b2:	2014      	movs	r0, #20
 80012b4:	f004 f8aa 	bl	800540c <malloc>
 80012b8:	4603      	mov	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]
        uint8_t *p_buf = (uint8_t *)malloc(buf_len * sizeof(uint8_t));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 f8a4 	bl	800540c <malloc>
 80012c4:	4603      	mov	r3, r0
 80012c6:	60bb      	str	r3, [r7, #8]

        if ((NULL == p_queue) || (NULL == p_buf))
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <DeCirque_init+0x30>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d107      	bne.n	80012e4 <DeCirque_init+0x40>
        {
            free(p_queue);
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f004 f8a1 	bl	800541c <free>
            free(p_buf);
 80012da:	68b8      	ldr	r0, [r7, #8]
 80012dc:	f004 f89e 	bl	800541c <free>
            return NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e011      	b.n	8001308 <DeCirque_init+0x64>
        }
        p_queue->cap = buf_len;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
        p_queue->rear = 0;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]
        p_queue->front = 0;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
        p_queue->size = 0;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
        p_queue->p_queuebuf = p_buf;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	611a      	str	r2, [r3, #16]

        return p_queue;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	e000      	b.n	8001308 <DeCirque_init+0x64>
    }
    return NULL;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <My_Sched_Loop>:
    {Comm_Task, 100, 100},
};


void My_Sched_Loop(void)
{
 8001310:	b590      	push	{r4, r7, lr}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < SCHED_MAX_TASKS; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	71fb      	strb	r3, [r7, #7]
 800131a:	e02e      	b.n	800137a <My_Sched_Loop+0x6a>
    {
        if(HAL_GetTick() >= g_uMy_Task[i].remainToExec)
 800131c:	f000 fe28 	bl	8001f70 <HAL_GetTick>
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	4919      	ldr	r1, [pc, #100]	; (8001388 <My_Sched_Loop+0x78>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	3308      	adds	r3, #8
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4298      	cmp	r0, r3
 8001334:	d31e      	bcc.n	8001374 <My_Sched_Loop+0x64>
        {
            g_uMy_Task[i].runnable();
 8001336:	79fa      	ldrb	r2, [r7, #7]
 8001338:	4913      	ldr	r1, [pc, #76]	; (8001388 <My_Sched_Loop+0x78>)
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	440b      	add	r3, r1
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4798      	blx	r3
            g_uMy_Task[i].remainToExec = g_uMy_Task[i].periodicTimeMs + HAL_GetTick();
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	490f      	ldr	r1, [pc, #60]	; (8001388 <My_Sched_Loop+0x78>)
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	3304      	adds	r3, #4
 8001358:	681c      	ldr	r4, [r3, #0]
 800135a:	f000 fe09 	bl	8001f70 <HAL_GetTick>
 800135e:	4603      	mov	r3, r0
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	18e1      	adds	r1, r4, r3
 8001364:	4808      	ldr	r0, [pc, #32]	; (8001388 <My_Sched_Loop+0x78>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4403      	add	r3, r0
 8001370:	3308      	adds	r3, #8
 8001372:	6019      	str	r1, [r3, #0]
    for (i = 0; i < SCHED_MAX_TASKS; i++)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	3301      	adds	r3, #1
 8001378:	71fb      	strb	r3, [r7, #7]
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0cd      	beq.n	800131c <My_Sched_Loop+0xc>

            //Iwdg_Clear();
        }
    }
    //exp deal
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}
 8001388:	20000070 	.word	0x20000070

0800138c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_SPI1_Init+0x74>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <MX_SPI1_Init+0x78>)
 8001394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_SPI1_Init+0x74>)
 8001398:	f44f 7282 	mov.w	r2, #260	; 0x104
 800139c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_SPI1_Init+0x74>)
 80013a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_SPI1_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_SPI1_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_SPI1_Init+0x74>)
 80013ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_SPI1_Init+0x74>)
 80013c2:	2220      	movs	r2, #32
 80013c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_SPI1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_SPI1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_SPI1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_SPI1_Init+0x74>)
 80013da:	2207      	movs	r2, #7
 80013dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_SPI1_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_SPI1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_SPI1_Init+0x74>)
 80013ec:	f002 facc 	bl	8003988 <HAL_SPI_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013f6:	f7ff fea2 	bl	800113e <Error_Handler>
  }

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200004d4 	.word	0x200004d4
 8001404:	40013000 	.word	0x40013000

08001408 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a50      	ldr	r2, [pc, #320]	; (8001568 <HAL_SPI_MspInit+0x160>)
 8001426:	4293      	cmp	r3, r2
 8001428:	f040 809a 	bne.w	8001560 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_SPI_MspInit+0x164>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001430:	4a4e      	ldr	r2, [pc, #312]	; (800156c <HAL_SPI_MspInit+0x164>)
 8001432:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001436:	6613      	str	r3, [r2, #96]	; 0x60
 8001438:	4b4c      	ldr	r3, [pc, #304]	; (800156c <HAL_SPI_MspInit+0x164>)
 800143a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_SPI_MspInit+0x164>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a48      	ldr	r2, [pc, #288]	; (800156c <HAL_SPI_MspInit+0x164>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <HAL_SPI_MspInit+0x164>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b43      	ldr	r3, [pc, #268]	; (800156c <HAL_SPI_MspInit+0x164>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <HAL_SPI_MspInit+0x164>)
 8001462:	f043 0302 	orr.w	r3, r3, #2
 8001466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001468:	4b40      	ldr	r3, [pc, #256]	; (800156c <HAL_SPI_MspInit+0x164>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001486:	2305      	movs	r3, #5
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001494:	f001 f8fa 	bl	800268c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001498:	2338      	movs	r3, #56	; 0x38
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a8:	2305      	movs	r3, #5
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	482f      	ldr	r0, [pc, #188]	; (8001570 <HAL_SPI_MspInit+0x168>)
 80014b4:	f001 f8ea 	bl	800268c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80014b8:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014ba:	4a2f      	ldr	r2, [pc, #188]	; (8001578 <HAL_SPI_MspInit+0x170>)
 80014bc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014c0:	220b      	movs	r2, #11
 80014c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014c6:	2210      	movs	r2, #16
 80014c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014e2:	4b24      	ldr	r3, [pc, #144]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014f0:	4820      	ldr	r0, [pc, #128]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 80014f2:	f000 fe59 	bl	80021a8 <HAL_DMA_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 80014fc:	f7ff fe1f 	bl	800113e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 8001504:	655a      	str	r2, [r3, #84]	; 0x54
 8001506:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <HAL_SPI_MspInit+0x16c>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel5;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_SPI_MspInit+0x174>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <HAL_SPI_MspInit+0x178>)
 8001510:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_SPI_MspInit+0x174>)
 8001514:	220a      	movs	r2, #10
 8001516:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <HAL_SPI_MspInit+0x174>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <HAL_SPI_MspInit+0x174>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_SPI_MspInit+0x174>)
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_SPI_MspInit+0x174>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_SPI_MspInit+0x174>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <HAL_SPI_MspInit+0x174>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_SPI_MspInit+0x174>)
 800153e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001542:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <HAL_SPI_MspInit+0x174>)
 8001546:	f000 fe2f 	bl	80021a8 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8001550:	f7ff fdf5 	bl	800113e <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_SPI_MspInit+0x174>)
 8001558:	659a      	str	r2, [r3, #88]	; 0x58
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_SPI_MspInit+0x174>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013000 	.word	0x40013000
 800156c:	40021000 	.word	0x40021000
 8001570:	48000400 	.word	0x48000400
 8001574:	20000598 	.word	0x20000598
 8001578:	40020044 	.word	0x40020044
 800157c:	20000538 	.word	0x20000538
 8001580:	40020058 	.word	0x40020058

08001584 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Turn LED2 on: Transfer in transmission/reception process is complete */
  //BSP_LED_On(LED2);
  wTransferState = TRANSFER_COMPLETE;
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000250 	.word	0x20000250

080015a4 <HAL_SPI_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  wTransferState = TRANSFER_ERROR;
 80015ac:	4b04      	ldr	r3, [pc, #16]	; (80015c0 <HAL_SPI_ErrorCallback+0x1c>)
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000250 	.word	0x20000250

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_MspInit+0x44>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_MspInit+0x44>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015fa:	f001 fa6d 	bl	8002ad8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4013      	ands	r3, r2
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	d101      	bne.n	8001626 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40010400 	.word	0x40010400

08001638 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6153      	str	r3, [r2, #20]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40010400 	.word	0x40010400

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 fc52 	bl	8001f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	Comm_DMA_CHAN2_Handler();
 80016b0:	f7ff fc16 	bl	8000ee0 <Comm_DMA_CHAN2_Handler>
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	Comm_DMA_CHAN3_Handler();
 80016bc:	f7ff fc2e 	bl	8000f1c <Comm_DMA_CHAN3_Handler>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA1_Channel4_IRQHandler+0x10>)
 80016ca:	f000 fe90 	bl	80023ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000598 	.word	0x20000598

080016d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <DMA1_Channel5_IRQHandler+0x10>)
 80016de:	f000 fe86 	bl	80023ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000538 	.word	0x20000538

080016ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Comm_USART1_Handler();
 80016f0:	f7ff fc6a 	bl	8000fc8 <Comm_USART1_Handler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 80016fc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001700:	f7ff ff84 	bl	800160c <LL_EXTI_IsActiveFlag_0_31>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 800170a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800170e:	f7ff ff93 	bl	8001638 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f003 fe36 	bl	80053b8 <__errno>
 800174c:	4602      	mov	r2, r0
 800174e:	230c      	movs	r3, #12
 8001750:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20020000 	.word	0x20020000
 8001778:	00000400 	.word	0x00000400
 800177c:	20000254 	.word	0x20000254
 8001780:	20000600 	.word	0x20000600

08001784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <SystemInit+0x28>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <SystemInit+0x28>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <SystemInit+0x28>)
 800179a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179e:	609a      	str	r2, [r3, #8]
#endif
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	; (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <LL_DMA_SetDataTransferDirection>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <LL_DMA_SetDataTransferDirection+0x4c>)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	4413      	add	r3, r2
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	4413      	add	r3, r2
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018e8:	f023 0310 	bic.w	r3, r3, #16
 80018ec:	4908      	ldr	r1, [pc, #32]	; (8001910 <LL_DMA_SetDataTransferDirection+0x4c>)
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	440a      	add	r2, r1
 80018f2:	7812      	ldrb	r2, [r2, #0]
 80018f4:	4611      	mov	r1, r2
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	440a      	add	r2, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
}
 8001902:	bf00      	nop
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	080055e8 	.word	0x080055e8

08001914 <LL_DMA_SetMode>:
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <LL_DMA_SetMode+0x48>)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	4413      	add	r3, r2
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f023 0220 	bic.w	r2, r3, #32
 8001938:	4908      	ldr	r1, [pc, #32]	; (800195c <LL_DMA_SetMode+0x48>)
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	440b      	add	r3, r1
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	440b      	add	r3, r1
 8001946:	4619      	mov	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
}
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	080055e8 	.word	0x080055e8

08001960 <LL_DMA_SetPeriphIncMode>:
{
 8001960:	b480      	push	{r7}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <LL_DMA_SetPeriphIncMode+0x48>)
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4413      	add	r3, r2
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001984:	4908      	ldr	r1, [pc, #32]	; (80019a8 <LL_DMA_SetPeriphIncMode+0x48>)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	440b      	add	r3, r1
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	4619      	mov	r1, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	440b      	add	r3, r1
 8001992:	4619      	mov	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	080055e8 	.word	0x080055e8

080019ac <LL_DMA_SetMemoryIncMode>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <LL_DMA_SetMemoryIncMode+0x48>)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	4413      	add	r3, r2
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	4413      	add	r3, r2
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019d0:	4908      	ldr	r1, [pc, #32]	; (80019f4 <LL_DMA_SetMemoryIncMode+0x48>)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	440b      	add	r3, r1
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	440b      	add	r3, r1
 80019de:	4619      	mov	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	080055e8 	.word	0x080055e8

080019f8 <LL_DMA_SetPeriphSize>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <LL_DMA_SetPeriphSize+0x48>)
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4413      	add	r3, r2
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a1c:	4908      	ldr	r1, [pc, #32]	; (8001a40 <LL_DMA_SetPeriphSize+0x48>)
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	440b      	add	r3, r1
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	440b      	add	r3, r1
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	080055e8 	.word	0x080055e8

08001a44 <LL_DMA_SetMemorySize>:
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8001a54:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <LL_DMA_SetMemorySize+0x48>)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4413      	add	r3, r2
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001a68:	4908      	ldr	r1, [pc, #32]	; (8001a8c <LL_DMA_SetMemorySize+0x48>)
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	440b      	add	r3, r1
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	440b      	add	r3, r1
 8001a76:	4619      	mov	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	080055e8 	.word	0x080055e8

08001a90 <LL_DMA_SetChannelPriorityLevel>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	4413      	add	r3, r2
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ab4:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	440b      	add	r3, r1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	440b      	add	r3, r1
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	080055e8 	.word	0x080055e8

08001adc <LL_DMA_SetPeriphRequest>:
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	0a9b      	lsrs	r3, r3, #10
 8001aec:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8001af0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b04:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b1a:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
}
 8001b24:	bf00      	nop
 8001b26:	371c      	adds	r7, #28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_USART_Enable>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	601a      	str	r2, [r3, #0]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_USART_DisableFIFO>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_USART_SetTXFIFOThreshold>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	075b      	lsls	r3, r3, #29
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_USART_SetRXFIFOThreshold>:
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	065b      	lsls	r3, r3, #25
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_USART_ConfigAsyncMode>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <LL_USART_IsActiveFlag_TEACK>:
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c00:	d101      	bne.n	8001c06 <LL_USART_IsActiveFlag_TEACK+0x1a>
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_USART_IsActiveFlag_REACK>:
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c28:	d101      	bne.n	8001c2e <LL_USART_IsActiveFlag_REACK+0x1a>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_USART_IsActiveFlag_REACK+0x1c>
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <LL_AHB2_GRP1_EnableClock>:
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c48:	4907      	ldr	r1, [pc, #28]	; (8001c68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000

08001c6c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c78:	4907      	ldr	r1, [pc, #28]	; (8001c98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4013      	ands	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000

08001c9c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08e      	sub	sp, #56	; 0x38
 8001ca0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001ca2:	f107 0318 	add.w	r3, r7, #24
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f003 fbbe 	bl	800542c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
 8001cbe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001cc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001cc4:	f7ff ffd2 	bl	8001c6c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001cc8:	2004      	movs	r0, #4
 8001cca:	f7ff ffb7 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PC4   ------> USART1_TX
  PC5   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001cce:	2310      	movs	r3, #16
 8001cd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4857      	ldr	r0, [pc, #348]	; (8001e48 <MX_USART1_UART_Init+0x1ac>)
 8001cec:	f002 fe97 	bl	8004a1e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001d04:	2307      	movs	r3, #7
 8001d06:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	484e      	ldr	r0, [pc, #312]	; (8001e48 <MX_USART1_UART_Init+0x1ac>)
 8001d0e:	f002 fe86 	bl	8004a1e <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART1_TX);
 8001d12:	2219      	movs	r2, #25
 8001d14:	2101      	movs	r1, #1
 8001d16:	484d      	ldr	r0, [pc, #308]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d18:	f7ff fee0 	bl	8001adc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	2101      	movs	r1, #1
 8001d20:	484a      	ldr	r0, [pc, #296]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d22:	f7ff fdcf 	bl	80018c4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 8001d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	4847      	ldr	r0, [pc, #284]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d2e:	f7ff feaf 	bl	8001a90 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2101      	movs	r1, #1
 8001d36:	4845      	ldr	r0, [pc, #276]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d38:	f7ff fdec 	bl	8001914 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4842      	ldr	r0, [pc, #264]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d42:	f7ff fe0d 	bl	8001960 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4840      	ldr	r0, [pc, #256]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d4c:	f7ff fe2e 	bl	80019ac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2101      	movs	r1, #1
 8001d54:	483d      	ldr	r0, [pc, #244]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d56:	f7ff fe4f 	bl	80019f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	483b      	ldr	r0, [pc, #236]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d60:	f7ff fe70 	bl	8001a44 <LL_DMA_SetMemorySize>

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_USART1_RX);
 8001d64:	2218      	movs	r2, #24
 8001d66:	2102      	movs	r1, #2
 8001d68:	4838      	ldr	r0, [pc, #224]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d6a:	f7ff feb7 	bl	8001adc <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2102      	movs	r1, #2
 8001d72:	4836      	ldr	r0, [pc, #216]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d74:	f7ff fda6 	bl	80018c4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_HIGH);
 8001d78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	4833      	ldr	r0, [pc, #204]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d80:	f7ff fe86 	bl	8001a90 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2102      	movs	r1, #2
 8001d88:	4830      	ldr	r0, [pc, #192]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d8a:	f7ff fdc3 	bl	8001914 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2102      	movs	r1, #2
 8001d92:	482e      	ldr	r0, [pc, #184]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d94:	f7ff fde4 	bl	8001960 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8001d98:	2280      	movs	r2, #128	; 0x80
 8001d9a:	2102      	movs	r1, #2
 8001d9c:	482b      	ldr	r0, [pc, #172]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001d9e:	f7ff fe05 	bl	80019ac <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2102      	movs	r1, #2
 8001da6:	4829      	ldr	r0, [pc, #164]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001da8:	f7ff fe26 	bl	80019f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2102      	movs	r1, #2
 8001db0:	4826      	ldr	r0, [pc, #152]	; (8001e4c <MX_USART1_UART_Init+0x1b0>)
 8001db2:	f7ff fe47 	bl	8001a44 <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001db6:	f7ff fcfb 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fd4b 	bl	800185c <NVIC_EncodePriority>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4619      	mov	r1, r3
 8001dca:	2025      	movs	r0, #37	; 0x25
 8001dcc:	f7ff fd1c 	bl	8001808 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001dd0:	2025      	movs	r0, #37	; 0x25
 8001dd2:	f7ff fcfb 	bl	80017cc <__NVIC_EnableIRQ>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 8001dda:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001dde:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001dec:	230c      	movs	r3, #12
 8001dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001df4:	2300      	movs	r3, #0
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001df8:	f107 0318 	add.w	r3, r7, #24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4814      	ldr	r0, [pc, #80]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e00:	f003 f9b0 	bl	8005164 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001e04:	2100      	movs	r1, #0
 8001e06:	4812      	ldr	r0, [pc, #72]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e08:	f7ff feb2 	bl	8001b70 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4810      	ldr	r0, [pc, #64]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e10:	f7ff fec2 	bl	8001b98 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8001e14:	480e      	ldr	r0, [pc, #56]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e16:	f7ff fe9b 	bl	8001b50 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 8001e1a:	480d      	ldr	r0, [pc, #52]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e1c:	f7ff fed0 	bl	8001bc0 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e22:	f7ff fe85 	bl	8001b30 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8001e26:	bf00      	nop
 8001e28:	4809      	ldr	r0, [pc, #36]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e2a:	f7ff fedf 	bl	8001bec <LL_USART_IsActiveFlag_TEACK>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f9      	beq.n	8001e28 <MX_USART1_UART_Init+0x18c>
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <MX_USART1_UART_Init+0x1b4>)
 8001e36:	f7ff feed 	bl	8001c14 <LL_USART_IsActiveFlag_REACK>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f3      	beq.n	8001e28 <MX_USART1_UART_Init+0x18c>
  {
  }

}
 8001e40:	bf00      	nop
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	48000800 	.word	0x48000800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40013800 	.word	0x40013800

08001e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e58:	480d      	ldr	r0, [pc, #52]	; (8001e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e5a:	490e      	ldr	r1, [pc, #56]	; (8001e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e5c:	4a0e      	ldr	r2, [pc, #56]	; (8001e98 <LoopForever+0xe>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e60:	e002      	b.n	8001e68 <LoopCopyDataInit>

08001e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e66:	3304      	adds	r3, #4

08001e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e6c:	d3f9      	bcc.n	8001e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e70:	4c0b      	ldr	r4, [pc, #44]	; (8001ea0 <LoopForever+0x16>)
  movs r3, #0
 8001e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e74:	e001      	b.n	8001e7a <LoopFillZerobss>

08001e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e78:	3204      	adds	r2, #4

08001e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e7c:	d3fb      	bcc.n	8001e76 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e7e:	f7ff fc81 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e82:	f003 fa9f 	bl	80053c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e86:	f7ff f8c5 	bl	8001014 <main>

08001e8a <LoopForever>:

LoopForever:
    b LoopForever
 8001e8a:	e7fe      	b.n	8001e8a <LoopForever>
  ldr   r0, =_estack
 8001e8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e94:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001e98:	08005628 	.word	0x08005628
  ldr r2, =_sbss
 8001e9c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001ea0:	20000600 	.word	0x20000600

08001ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ea4:	e7fe      	b.n	8001ea4 <ADC1_2_IRQHandler>

08001ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb0:	2003      	movs	r0, #3
 8001eb2:	f000 f939 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 f80e 	bl	8001ed8 <HAL_InitTick>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	71fb      	strb	r3, [r7, #7]
 8001ec6:	e001      	b.n	8001ecc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ec8:	f7ff fb7c 	bl	80015c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ecc:	79fb      	ldrb	r3, [r7, #7]

}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <HAL_InitTick+0x68>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d022      	beq.n	8001f32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_InitTick+0x6c>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_InitTick+0x68>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ef8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f944 	bl	800218e <HAL_SYSTICK_Config>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10f      	bne.n	8001f2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b0f      	cmp	r3, #15
 8001f10:	d809      	bhi.n	8001f26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f12:	2200      	movs	r2, #0
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f1a:	f000 f910 	bl	800213e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f1e:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_InitTick+0x70>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e007      	b.n	8001f36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e004      	b.n	8001f36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000084 	.word	0x20000084
 8001f44:	2000007c 	.word	0x2000007c
 8001f48:	20000080 	.word	0x20000080

08001f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_IncTick+0x1c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_IncTick+0x20>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_IncTick+0x1c>)
 8001f5c:	6013      	str	r3, [r2, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	200005f8 	.word	0x200005f8
 8001f6c:	20000084 	.word	0x20000084

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200005f8 	.word	0x200005f8

08001f88 <__NVIC_SetPriorityGrouping>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff40 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff90 	bl	800207c <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5f 	bl	8002028 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff33 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7ff ffa4 	bl	80020e4 <SysTick_Config>
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e08d      	b.n	80022d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	4b47      	ldr	r3, [pc, #284]	; (80022e0 <HAL_DMA_Init+0x138>)
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d80f      	bhi.n	80021e6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <HAL_DMA_Init+0x13c>)
 80021ce:	4413      	add	r3, r2
 80021d0:	4a45      	ldr	r2, [pc, #276]	; (80022e8 <HAL_DMA_Init+0x140>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	091b      	lsrs	r3, r3, #4
 80021d8:	009a      	lsls	r2, r3, #2
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a42      	ldr	r2, [pc, #264]	; (80022ec <HAL_DMA_Init+0x144>)
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
 80021e4:	e00e      	b.n	8002204 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_DMA_Init+0x148>)
 80021ee:	4413      	add	r3, r2
 80021f0:	4a3d      	ldr	r2, [pc, #244]	; (80022e8 <HAL_DMA_Init+0x140>)
 80021f2:	fba2 2303 	umull	r2, r3, r2, r3
 80021f6:	091b      	lsrs	r3, r3, #4
 80021f8:	009a      	lsls	r2, r3, #2
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a3c      	ldr	r2, [pc, #240]	; (80022f4 <HAL_DMA_Init+0x14c>)
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800221a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800221e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f9b6 	bl	80025c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002264:	d102      	bne.n	800226c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002280:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_DMA_Init+0x104>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b04      	cmp	r3, #4
 8002290:	d80c      	bhi.n	80022ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f9d6 	bl	8002644 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	e008      	b.n	80022be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40020407 	.word	0x40020407
 80022e4:	bffdfff8 	.word	0xbffdfff8
 80022e8:	cccccccd 	.word	0xcccccccd
 80022ec:	40020000 	.word	0x40020000
 80022f0:	bffdfbf8 	.word	0xbffdfbf8
 80022f4:	40020400 	.word	0x40020400

080022f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002310:	2b01      	cmp	r3, #1
 8002312:	d101      	bne.n	8002318 <HAL_DMA_Start_IT+0x20>
 8002314:	2302      	movs	r3, #2
 8002316:	e066      	b.n	80023e6 <HAL_DMA_Start_IT+0xee>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d155      	bne.n	80023d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2202      	movs	r2, #2
 8002330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0201 	bic.w	r2, r2, #1
 8002348:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f8fb 	bl	800254c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 020e 	orr.w	r2, r2, #14
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	e00f      	b.n	8002390 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0204 	bic.w	r2, r2, #4
 800237e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 020a 	orr.w	r2, r2, #10
 800238e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	e005      	b.n	80023e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80023e0:	2302      	movs	r3, #2
 80023e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2204      	movs	r2, #4
 8002410:	409a      	lsls	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4013      	ands	r3, r2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d026      	beq.n	8002468 <HAL_DMA_IRQHandler+0x7a>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d021      	beq.n	8002468 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d107      	bne.n	8002442 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0204 	bic.w	r2, r2, #4
 8002440:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f003 021f 	and.w	r2, r3, #31
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	2104      	movs	r1, #4
 8002450:	fa01 f202 	lsl.w	r2, r1, r2
 8002454:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	2b00      	cmp	r3, #0
 800245c:	d071      	beq.n	8002542 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002466:	e06c      	b.n	8002542 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	2202      	movs	r2, #2
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02e      	beq.n	80024da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d029      	beq.n	80024da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 020a 	bic.w	r2, r2, #10
 80024a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	2102      	movs	r1, #2
 80024ba:	fa01 f202 	lsl.w	r2, r1, r2
 80024be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d038      	beq.n	8002542 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80024d8:	e033      	b.n	8002542 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2208      	movs	r2, #8
 80024e4:	409a      	lsls	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d02a      	beq.n	8002544 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d025      	beq.n	8002544 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 020e 	bic.w	r2, r2, #14
 8002506:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002542:	bf00      	nop
 8002544:	bf00      	nop
}
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002562:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002574:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f003 021f 	and.w	r2, r3, #31
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b10      	cmp	r3, #16
 8002598:	d108      	bne.n	80025ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025aa:	e007      	b.n	80025bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	60da      	str	r2, [r3, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b16      	ldr	r3, [pc, #88]	; (8002630 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d802      	bhi.n	80025e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80025dc:	4b15      	ldr	r3, [pc, #84]	; (8002634 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e001      	b.n	80025e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80025e2:	4b15      	ldr	r3, [pc, #84]	; (8002638 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80025e4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3b08      	subs	r3, #8
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	009a      	lsls	r2, r3, #2
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4413      	add	r3, r2
 8002608:	461a      	mov	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002612:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2201      	movs	r2, #1
 800261c:	409a      	lsls	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40020407 	.word	0x40020407
 8002634:	40020800 	.word	0x40020800
 8002638:	40020820 	.word	0x40020820
 800263c:	cccccccd 	.word	0xcccccccd
 8002640:	40020880 	.word	0x40020880

08002644 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a08      	ldr	r2, [pc, #32]	; (8002688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002666:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	3b01      	subs	r3, #1
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2201      	movs	r2, #1
 8002672:	409a      	lsls	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	1000823f 	.word	0x1000823f
 8002688:	40020940 	.word	0x40020940

0800268c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800268c:	b480      	push	{r7}
 800268e:	b087      	sub	sp, #28
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800269a:	e15a      	b.n	8002952 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 814c 	beq.w	800294c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d00b      	beq.n	80026d4 <HAL_GPIO_Init+0x48>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d007      	beq.n	80026d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c8:	2b11      	cmp	r3, #17
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b12      	cmp	r3, #18
 80026d2:	d130      	bne.n	8002736 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	2203      	movs	r2, #3
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800270a:	2201      	movs	r2, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0201 	and.w	r2, r3, #1
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa02 f303 	lsl.w	r3, r2, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689a      	ldr	r2, [r3, #8]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0xea>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b12      	cmp	r3, #18
 8002774:	d123      	bne.n	80027be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	08da      	lsrs	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3208      	adds	r2, #8
 800277e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	220f      	movs	r2, #15
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	691a      	ldr	r2, [r3, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	08da      	lsrs	r2, r3, #3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3208      	adds	r2, #8
 80027b8:	6939      	ldr	r1, [r7, #16]
 80027ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4013      	ands	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0203 	and.w	r2, r3, #3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 80a6 	beq.w	800294c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002800:	4b5b      	ldr	r3, [pc, #364]	; (8002970 <HAL_GPIO_Init+0x2e4>)
 8002802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002804:	4a5a      	ldr	r2, [pc, #360]	; (8002970 <HAL_GPIO_Init+0x2e4>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6613      	str	r3, [r2, #96]	; 0x60
 800280c:	4b58      	ldr	r3, [pc, #352]	; (8002970 <HAL_GPIO_Init+0x2e4>)
 800280e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002818:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x2e8>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	3302      	adds	r3, #2
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	220f      	movs	r2, #15
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002842:	d01f      	beq.n	8002884 <HAL_GPIO_Init+0x1f8>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a4c      	ldr	r2, [pc, #304]	; (8002978 <HAL_GPIO_Init+0x2ec>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d019      	beq.n	8002880 <HAL_GPIO_Init+0x1f4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a4b      	ldr	r2, [pc, #300]	; (800297c <HAL_GPIO_Init+0x2f0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_GPIO_Init+0x1f0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a4a      	ldr	r2, [pc, #296]	; (8002980 <HAL_GPIO_Init+0x2f4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00d      	beq.n	8002878 <HAL_GPIO_Init+0x1ec>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a49      	ldr	r2, [pc, #292]	; (8002984 <HAL_GPIO_Init+0x2f8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <HAL_GPIO_Init+0x1e8>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a48      	ldr	r2, [pc, #288]	; (8002988 <HAL_GPIO_Init+0x2fc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_GPIO_Init+0x1e4>
 800286c:	2305      	movs	r3, #5
 800286e:	e00a      	b.n	8002886 <HAL_GPIO_Init+0x1fa>
 8002870:	2306      	movs	r3, #6
 8002872:	e008      	b.n	8002886 <HAL_GPIO_Init+0x1fa>
 8002874:	2304      	movs	r3, #4
 8002876:	e006      	b.n	8002886 <HAL_GPIO_Init+0x1fa>
 8002878:	2303      	movs	r3, #3
 800287a:	e004      	b.n	8002886 <HAL_GPIO_Init+0x1fa>
 800287c:	2302      	movs	r3, #2
 800287e:	e002      	b.n	8002886 <HAL_GPIO_Init+0x1fa>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_GPIO_Init+0x1fa>
 8002884:	2300      	movs	r3, #0
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	f002 0203 	and.w	r2, r2, #3
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	4093      	lsls	r3, r2
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002896:	4937      	ldr	r1, [pc, #220]	; (8002974 <HAL_GPIO_Init+0x2e8>)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_GPIO_Init+0x300>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028c8:	4a30      	ldr	r2, [pc, #192]	; (800298c <HAL_GPIO_Init+0x300>)
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80028ce:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_GPIO_Init+0x300>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028f2:	4a26      	ldr	r2, [pc, #152]	; (800298c <HAL_GPIO_Init+0x300>)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f8:	4b24      	ldr	r3, [pc, #144]	; (800298c <HAL_GPIO_Init+0x300>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	43db      	mvns	r3, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4013      	ands	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_GPIO_Init+0x300>)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_GPIO_Init+0x300>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002946:	4a11      	ldr	r2, [pc, #68]	; (800298c <HAL_GPIO_Init+0x300>)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	3301      	adds	r3, #1
 8002950:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f ae9d 	bne.w	800269c <HAL_GPIO_Init+0x10>
  }
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	40010000 	.word	0x40010000
 8002978:	48000400 	.word	0x48000400
 800297c:	48000800 	.word	0x48000800
 8002980:	48000c00 	.word	0x48000c00
 8002984:	48001000 	.word	0x48001000
 8002988:	48001400 	.word	0x48001400
 800298c:	40010400 	.word	0x40010400

08002990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d141      	bne.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800299e:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029aa:	d131      	bne.n	8002a10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029ac:	4b47      	ldr	r3, [pc, #284]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029b2:	4a46      	ldr	r2, [pc, #280]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029bc:	4b43      	ldr	r3, [pc, #268]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029c4:	4a41      	ldr	r2, [pc, #260]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029cc:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2232      	movs	r2, #50	; 0x32
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	4a3f      	ldr	r2, [pc, #252]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	3301      	adds	r3, #1
 80029e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029e2:	e002      	b.n	80029ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029f6:	d102      	bne.n	80029fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f2      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029fe:	4b33      	ldr	r3, [pc, #204]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0a:	d158      	bne.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e057      	b.n	8002ac0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a10:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a20:	e04d      	b.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a28:	d141      	bne.n	8002aae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a2a:	4b28      	ldr	r3, [pc, #160]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d131      	bne.n	8002a9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a38:	4b24      	ldr	r3, [pc, #144]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a3e:	4a23      	ldr	r2, [pc, #140]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a50:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2232      	movs	r2, #50	; 0x32
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	4a1c      	ldr	r2, [pc, #112]	; (8002ad4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	0c9b      	lsrs	r3, r3, #18
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a6e:	e002      	b.n	8002a76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a76:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a82:	d102      	bne.n	8002a8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f2      	bne.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a8a:	4b10      	ldr	r3, [pc, #64]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a96:	d112      	bne.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e011      	b.n	8002ac0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002aac:	e007      	b.n	8002abe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002aae:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ab6:	4a05      	ldr	r2, [pc, #20]	; (8002acc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ab8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002abc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	2000007c 	.word	0x2000007c
 8002ad4:	431bde83 	.word	0x431bde83

08002ad8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae6:	6093      	str	r3, [r2, #8]
}
 8002ae8:	bf00      	nop
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40007000 	.word	0x40007000

08002af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e308      	b.n	800311c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d075      	beq.n	8002c02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	4ba3      	ldr	r3, [pc, #652]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
 8002b1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b20:	4ba0      	ldr	r3, [pc, #640]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d102      	bne.n	8002b36 <HAL_RCC_OscConfig+0x3e>
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_OscConfig+0x44>
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d10b      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	4b99      	ldr	r3, [pc, #612]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d05b      	beq.n	8002c00 <HAL_RCC_OscConfig+0x108>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d157      	bne.n	8002c00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e2e3      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d106      	bne.n	8002b6c <HAL_RCC_OscConfig+0x74>
 8002b5e:	4b91      	ldr	r3, [pc, #580]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a90      	ldr	r2, [pc, #576]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x98>
 8002b76:	4b8b      	ldr	r3, [pc, #556]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a8a      	ldr	r2, [pc, #552]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b88      	ldr	r3, [pc, #544]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a87      	ldr	r2, [pc, #540]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xb0>
 8002b90:	4b84      	ldr	r3, [pc, #528]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a83      	ldr	r2, [pc, #524]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b81      	ldr	r3, [pc, #516]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a80      	ldr	r2, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7ff f9de 	bl	8001f70 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7ff f9da 	bl	8001f70 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e2a8      	b.n	800311c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bca:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xc0>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f9ca 	bl	8001f70 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be0:	f7ff f9c6 	bl	8001f70 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e294      	b.n	800311c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bf2:	4b6c      	ldr	r3, [pc, #432]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0xe8>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d075      	beq.n	8002cfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0e:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c18:	4b62      	ldr	r3, [pc, #392]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_OscConfig+0x136>
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCC_OscConfig+0x13c>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d11f      	bne.n	8002c74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c34:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_OscConfig+0x154>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e267      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b55      	ldr	r3, [pc, #340]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	4952      	ldr	r1, [pc, #328]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c60:	4b51      	ldr	r3, [pc, #324]	; (8002da8 <HAL_RCC_OscConfig+0x2b0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff f937 	bl	8001ed8 <HAL_InitTick>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d043      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e253      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d023      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a48      	ldr	r2, [pc, #288]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff f972 	bl	8001f70 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7ff f96e 	bl	8001f70 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e23c      	b.n	800311c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca2:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	061b      	lsls	r3, r3, #24
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
 8002cc2:	e01a      	b.n	8002cfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc4:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a36      	ldr	r2, [pc, #216]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002cca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7ff f94e 	bl	8001f70 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7ff f94a 	bl	8001f70 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e218      	b.n	800311c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cea:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1e0>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0e:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	4a23      	ldr	r2, [pc, #140]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7ff f927 	bl	8001f70 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d26:	f7ff f923 	bl	8001f70 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1f1      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ef      	beq.n	8002d26 <HAL_RCC_OscConfig+0x22e>
 8002d46:	e01b      	b.n	8002d80 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d48:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d4e:	4a15      	ldr	r2, [pc, #84]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7ff f90a 	bl	8001f70 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d60:	f7ff f906 	bl	8001f70 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1d4      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ef      	bne.n	8002d60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 80ab 	beq.w	8002ee4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_RCC_OscConfig+0x2b4>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e005      	b.n	8002dae <HAL_RCC_OscConfig+0x2b6>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	20000080 	.word	0x20000080
 8002dac:	2300      	movs	r3, #0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db2:	4baf      	ldr	r3, [pc, #700]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	4aae      	ldr	r2, [pc, #696]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dbe:	4bac      	ldr	r3, [pc, #688]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dce:	4ba9      	ldr	r3, [pc, #676]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d118      	bne.n	8002e0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dda:	4ba6      	ldr	r3, [pc, #664]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4aa5      	ldr	r2, [pc, #660]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de6:	f7ff f8c3 	bl	8001f70 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dee:	f7ff f8bf 	bl	8001f70 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e18d      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e00:	4b9c      	ldr	r3, [pc, #624]	; (8003074 <HAL_RCC_OscConfig+0x57c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d108      	bne.n	8002e26 <HAL_RCC_OscConfig+0x32e>
 8002e14:	4b96      	ldr	r3, [pc, #600]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1a:	4a95      	ldr	r2, [pc, #596]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e24:	e024      	b.n	8002e70 <HAL_RCC_OscConfig+0x378>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d110      	bne.n	8002e50 <HAL_RCC_OscConfig+0x358>
 8002e2e:	4b90      	ldr	r3, [pc, #576]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e34:	4a8e      	ldr	r2, [pc, #568]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e36:	f043 0304 	orr.w	r3, r3, #4
 8002e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e3e:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	4a8a      	ldr	r2, [pc, #552]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e4e:	e00f      	b.n	8002e70 <HAL_RCC_OscConfig+0x378>
 8002e50:	4b87      	ldr	r3, [pc, #540]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	4a86      	ldr	r2, [pc, #536]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e60:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	4a82      	ldr	r2, [pc, #520]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d016      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e78:	f7ff f87a 	bl	8001f70 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7ff f876 	bl	8001f70 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e142      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e96:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ed      	beq.n	8002e80 <HAL_RCC_OscConfig+0x388>
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea6:	f7ff f863 	bl	8001f70 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eae:	f7ff f85f 	bl	8001f70 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e12b      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ec4:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1ed      	bne.n	8002eae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d105      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed8:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	4a64      	ldr	r2, [pc, #400]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d03c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ef8:	4b5d      	ldr	r3, [pc, #372]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002efe:	4a5c      	ldr	r2, [pc, #368]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f08:	f7ff f832 	bl	8001f70 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f10:	f7ff f82e 	bl	8001f70 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e0fc      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f22:	4b53      	ldr	r3, [pc, #332]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <HAL_RCC_OscConfig+0x418>
 8002f30:	e01b      	b.n	8002f6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f32:	4b4f      	ldr	r3, [pc, #316]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f38:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f3a:	f023 0301 	bic.w	r3, r3, #1
 8002f3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7ff f815 	bl	8001f70 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f4a:	f7ff f811 	bl	8001f70 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0df      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f5c:	4b44      	ldr	r3, [pc, #272]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ef      	bne.n	8002f4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80d3 	beq.w	800311a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f74:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b0c      	cmp	r3, #12
 8002f7e:	f000 808d 	beq.w	800309c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d15a      	bne.n	8003040 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8a:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002f90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7fe ffeb 	bl	8001f70 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f9e:	f7fe ffe7 	bl	8001f70 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e0b5      	b.n	800311c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb0:	4b2f      	ldr	r3, [pc, #188]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f0      	bne.n	8002f9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fbc:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002fbe:	68da      	ldr	r2, [r3, #12]
 8002fc0:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x580>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6a11      	ldr	r1, [r2, #32]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fcc:	3a01      	subs	r2, #1
 8002fce:	0112      	lsls	r2, r2, #4
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002fd6:	0212      	lsls	r2, r2, #8
 8002fd8:	4311      	orrs	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002fde:	0852      	lsrs	r2, r2, #1
 8002fe0:	3a01      	subs	r2, #1
 8002fe2:	0552      	lsls	r2, r2, #21
 8002fe4:	4311      	orrs	r1, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0652      	lsls	r2, r2, #25
 8002ff0:	4311      	orrs	r1, r2
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ff6:	06d2      	lsls	r2, r2, #27
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	491d      	ldr	r1, [pc, #116]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003000:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1a      	ldr	r2, [pc, #104]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800300c:	4b18      	ldr	r3, [pc, #96]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003016:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003018:	f7fe ffaa 	bl	8001f70 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003020:	f7fe ffa6 	bl	8001f70 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e074      	b.n	800311c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003032:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x528>
 800303e:	e06c      	b.n	800311a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0a      	ldr	r2, [pc, #40]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800304a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800304c:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	4a07      	ldr	r2, [pc, #28]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 8003052:	f023 0303 	bic.w	r3, r3, #3
 8003056:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <HAL_RCC_OscConfig+0x578>)
 800305e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003066:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe ff82 	bl	8001f70 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306e:	e00e      	b.n	800308e <HAL_RCC_OscConfig+0x596>
 8003070:	40021000 	.word	0x40021000
 8003074:	40007000 	.word	0x40007000
 8003078:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307c:	f7fe ff78 	bl	8001f70 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e046      	b.n	800311c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800308e:	4b25      	ldr	r3, [pc, #148]	; (8003124 <HAL_RCC_OscConfig+0x62c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <HAL_RCC_OscConfig+0x584>
 800309a:	e03e      	b.n	800311a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e039      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030a8:	4b1e      	ldr	r3, [pc, #120]	; (8003124 <HAL_RCC_OscConfig+0x62c>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d12c      	bne.n	8003116 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	3b01      	subs	r3, #1
 80030c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d123      	bne.n	8003116 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030da:	429a      	cmp	r2, r3
 80030dc:	d11b      	bne.n	8003116 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d113      	bne.n	8003116 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d109      	bne.n	8003116 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	085b      	lsrs	r3, r3, #1
 800310e:	3b01      	subs	r3, #1
 8003110:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d001      	beq.n	800311a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e11e      	b.n	800337e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b91      	ldr	r3, [pc, #580]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d910      	bls.n	8003170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b8e      	ldr	r3, [pc, #568]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	498c      	ldr	r1, [pc, #560]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b8a      	ldr	r3, [pc, #552]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e106      	b.n	800337e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d073      	beq.n	8003264 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d129      	bne.n	80031d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	4b81      	ldr	r3, [pc, #516]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e0f4      	b.n	800337e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003194:	f000 f966 	bl	8003464 <RCC_GetSysClockFreqFromPLLSource>
 8003198:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4a7c      	ldr	r2, [pc, #496]	; (8003390 <HAL_RCC_ClockConfig+0x268>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d93f      	bls.n	8003222 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031a2:	4b7a      	ldr	r3, [pc, #488]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d033      	beq.n	8003222 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12f      	bne.n	8003222 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80031c2:	4b72      	ldr	r3, [pc, #456]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ca:	4a70      	ldr	r2, [pc, #448]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80031cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	e024      	b.n	8003222 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0c6      	b.n	800337e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b66      	ldr	r3, [pc, #408]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0be      	b.n	800337e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003200:	f000 f8ce 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 8003204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4a61      	ldr	r2, [pc, #388]	; (8003390 <HAL_RCC_ClockConfig+0x268>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d909      	bls.n	8003222 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800320e:	4b5f      	ldr	r3, [pc, #380]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003216:	4a5d      	ldr	r2, [pc, #372]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b5a      	ldr	r3, [pc, #360]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4957      	ldr	r1, [pc, #348]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003234:	f7fe fe9c 	bl	8001f70 <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fe fe98 	bl	8001f70 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e095      	b.n	800337e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b4e      	ldr	r3, [pc, #312]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d023      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800327c:	4b43      	ldr	r3, [pc, #268]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4a42      	ldr	r2, [pc, #264]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003286:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003294:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800329c:	4a3b      	ldr	r2, [pc, #236]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 800329e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4936      	ldr	r1, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
 80032b6:	e008      	b.n	80032ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d105      	bne.n	80032ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80032be:	4b33      	ldr	r3, [pc, #204]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	4a32      	ldr	r2, [pc, #200]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 80032c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032ca:	4b2f      	ldr	r3, [pc, #188]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d21d      	bcs.n	8003314 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 020f 	bic.w	r2, r3, #15
 80032e0:	4929      	ldr	r1, [pc, #164]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032e8:	f7fe fe42 	bl	8001f70 <HAL_GetTick>
 80032ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ee:	e00a      	b.n	8003306 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f0:	f7fe fe3e 	bl	8001f70 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fe:	4293      	cmp	r3, r2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e03b      	b.n	800337e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x260>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d1ed      	bne.n	80032f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d008      	beq.n	8003332 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003320:	4b1a      	ldr	r3, [pc, #104]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333e:	4b13      	ldr	r3, [pc, #76]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	490f      	ldr	r1, [pc, #60]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 800334e:	4313      	orrs	r3, r2
 8003350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003352:	f000 f825 	bl	80033a0 <HAL_RCC_GetSysClockFreq>
 8003356:	4601      	mov	r1, r0
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <HAL_RCC_ClockConfig+0x264>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4a0c      	ldr	r2, [pc, #48]	; (8003394 <HAL_RCC_ClockConfig+0x26c>)
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	fa21 f303 	lsr.w	r3, r1, r3
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <HAL_RCC_ClockConfig+0x270>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <HAL_RCC_ClockConfig+0x274>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fdae 	bl	8001ed8 <HAL_InitTick>
 800337c:	4603      	mov	r3, r0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40022000 	.word	0x40022000
 800338c:	40021000 	.word	0x40021000
 8003390:	04c4b400 	.word	0x04c4b400
 8003394:	080055d0 	.word	0x080055d0
 8003398:	2000007c 	.word	0x2000007c
 800339c:	20000080 	.word	0x20000080

080033a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <HAL_RCC_GetSysClockFreq+0xbc>)
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e047      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033c4:	4b26      	ldr	r3, [pc, #152]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	e03e      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80033ca:	4b23      	ldr	r3, [pc, #140]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b0c      	cmp	r3, #12
 80033d4:	d136      	bne.n	8003444 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033e0:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3301      	adds	r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d10c      	bne.n	800340e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80033f4:	4a1a      	ldr	r2, [pc, #104]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	4a16      	ldr	r2, [pc, #88]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033fe:	68d2      	ldr	r2, [r2, #12]
 8003400:	0a12      	lsrs	r2, r2, #8
 8003402:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	617b      	str	r3, [r7, #20]
      break;
 800340c:	e00c      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800340e:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	fbb2 f3f3 	udiv	r3, r2, r3
 8003416:	4a10      	ldr	r2, [pc, #64]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003418:	68d2      	ldr	r2, [r2, #12]
 800341a:	0a12      	lsrs	r2, r2, #8
 800341c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003420:	fb02 f303 	mul.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
      break;
 8003426:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0e5b      	lsrs	r3, r3, #25
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	3301      	adds	r3, #1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	e001      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003448:	693b      	ldr	r3, [r7, #16]
}
 800344a:	4618      	mov	r0, r3
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	00f42400 	.word	0x00f42400
 8003460:	016e3600 	.word	0x016e3600

08003464 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800346a:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003474:	4b1b      	ldr	r3, [pc, #108]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d10c      	bne.n	80034a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003488:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003492:	68d2      	ldr	r2, [r2, #12]
 8003494:	0a12      	lsrs	r2, r2, #8
 8003496:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	617b      	str	r3, [r7, #20]
    break;
 80034a0:	e00c      	b.n	80034bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034ac:	68d2      	ldr	r2, [r2, #12]
 80034ae:	0a12      	lsrs	r2, r2, #8
 80034b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034b4:	fb02 f303 	mul.w	r3, r2, r3
 80034b8:	617b      	str	r3, [r7, #20]
    break;
 80034ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	0e5b      	lsrs	r3, r3, #25
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	3301      	adds	r3, #1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80034d6:	687b      	ldr	r3, [r7, #4]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	371c      	adds	r7, #28
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40021000 	.word	0x40021000
 80034e8:	016e3600 	.word	0x016e3600
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f8:	2300      	movs	r3, #0
 80034fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034fc:	2300      	movs	r3, #0
 80034fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8098 	beq.w	800363e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b40      	ldr	r3, [pc, #256]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	4a3f      	ldr	r2, [pc, #252]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
 800352a:	4b3d      	ldr	r3, [pc, #244]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800353a:	4b3a      	ldr	r3, [pc, #232]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a39      	ldr	r2, [pc, #228]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003546:	f7fe fd13 	bl	8001f70 <HAL_GetTick>
 800354a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800354c:	e009      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800354e:	f7fe fd0f 	bl	8001f70 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d902      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	74fb      	strb	r3, [r7, #19]
        break;
 8003560:	e005      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003562:	4b30      	ldr	r3, [pc, #192]	; (8003624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ef      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d159      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003574:	4b2a      	ldr	r3, [pc, #168]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01e      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	429a      	cmp	r2, r3
 800358e:	d019      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003590:	4b23      	ldr	r3, [pc, #140]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800359c:	4b20      	ldr	r3, [pc, #128]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	4a1f      	ldr	r2, [pc, #124]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035ac:	4b1c      	ldr	r3, [pc, #112]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	4a1b      	ldr	r2, [pc, #108]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ce:	f7fe fccf 	bl	8001f70 <HAL_GetTick>
 80035d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035d4:	e00b      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fe fccb 	bl	8001f70 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d902      	bls.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	74fb      	strb	r3, [r7, #19]
            break;
 80035ec:	e006      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0ec      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003610:	4903      	ldr	r1, [pc, #12]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003612:	4313      	orrs	r3, r2
 8003614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003618:	e008      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	74bb      	strb	r3, [r7, #18]
 800361e:	e005      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003620:	40021000 	.word	0x40021000
 8003624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	7cfb      	ldrb	r3, [r7, #19]
 800362a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800362c:	7c7b      	ldrb	r3, [r7, #17]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d105      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003632:	4baf      	ldr	r3, [pc, #700]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003636:	4aae      	ldr	r2, [pc, #696]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800363c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800364a:	4ba9      	ldr	r3, [pc, #676]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	f023 0203 	bic.w	r2, r3, #3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	49a5      	ldr	r1, [pc, #660]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00a      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800366c:	4ba0      	ldr	r3, [pc, #640]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	f023 020c 	bic.w	r2, r3, #12
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	499d      	ldr	r1, [pc, #628]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800368e:	4b98      	ldr	r3, [pc, #608]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003694:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4994      	ldr	r1, [pc, #592]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036b0:	4b8f      	ldr	r3, [pc, #572]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	498c      	ldr	r1, [pc, #560]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00a      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036d2:	4b87      	ldr	r3, [pc, #540]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4983      	ldr	r1, [pc, #524]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0320 	and.w	r3, r3, #32
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036f4:	4b7e      	ldr	r3, [pc, #504]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	497b      	ldr	r1, [pc, #492]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00a      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003716:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4972      	ldr	r1, [pc, #456]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003726:	4313      	orrs	r3, r2
 8003728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003738:	4b6d      	ldr	r3, [pc, #436]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	496a      	ldr	r1, [pc, #424]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800375a:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800375c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	4961      	ldr	r1, [pc, #388]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800377c:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800377e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	4959      	ldr	r1, [pc, #356]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800379e:	4b54      	ldr	r3, [pc, #336]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4950      	ldr	r1, [pc, #320]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d015      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037c0:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4948      	ldr	r1, [pc, #288]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037de:	d105      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e0:	4b43      	ldr	r3, [pc, #268]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4a42      	ldr	r2, [pc, #264]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80037f8:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	493a      	ldr	r1, [pc, #232]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003808:	4313      	orrs	r3, r2
 800380a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003816:	d105      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003818:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800381e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003822:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d015      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003830:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	492c      	ldr	r1, [pc, #176]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003840:	4313      	orrs	r3, r2
 8003842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384e:	d105      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800385a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d015      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003868:	4b21      	ldr	r3, [pc, #132]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003876:	491e      	ldr	r1, [pc, #120]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003878:	4313      	orrs	r3, r2
 800387a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003886:	d105      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a18      	ldr	r2, [pc, #96]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800388e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003892:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d015      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4910      	ldr	r1, [pc, #64]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038be:	d105      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	4902      	ldr	r1, [pc, #8]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038ee:	e001      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80038f0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038fc:	d105      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	4a20      	ldr	r2, [pc, #128]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003908:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d015      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003916:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003924:	4917      	ldr	r1, [pc, #92]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003934:	d105      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4a12      	ldr	r2, [pc, #72]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d015      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800394e:	4b0d      	ldr	r3, [pc, #52]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395c:	4909      	ldr	r1, [pc, #36]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800396c:	d105      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	4a04      	ldr	r2, [pc, #16]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003978:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800397a:	7cbb      	ldrb	r3, [r7, #18]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40021000 	.word	0x40021000

08003988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e09d      	b.n	8003ad6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039aa:	d009      	beq.n	80039c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
 80039b2:	e005      	b.n	80039c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fd14 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a00:	d902      	bls.n	8003a08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e002      	b.n	8003a0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a16:	d007      	beq.n	8003a28 <HAL_SPI_Init+0xa0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6a:	ea42 0103 	orr.w	r1, r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	f003 0204 	and.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003aa4:	ea42 0103 	orr.w	r1, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e16c      	b.n	8003dda <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b0e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003b16:	7dbb      	ldrb	r3, [r7, #22]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d00d      	beq.n	8003b38 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d106      	bne.n	8003b32 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d102      	bne.n	8003b32 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003b2c:	7dbb      	ldrb	r3, [r7, #22]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d002      	beq.n	8003b38 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003b32:	2302      	movs	r3, #2
 8003b34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b36:	e14b      	b.n	8003dd0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d102      	bne.n	8003b50 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b4e:	e13f      	b.n	8003dd0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d003      	beq.n	8003b64 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2205      	movs	r2, #5
 8003b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	887a      	ldrh	r2, [r7, #2]
 8003b74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	887a      	ldrh	r2, [r7, #2]
 8003b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	887a      	ldrh	r2, [r7, #2]
 8003b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	887a      	ldrh	r2, [r7, #2]
 8003b8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8003bac:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb6:	d908      	bls.n	8003bca <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bc6:	605a      	str	r2, [r3, #4]
 8003bc8:	e06f      	b.n	8003caa <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bd8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be4:	d126      	bne.n	8003c34 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c00:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c10:	e010      	b.n	8003c34 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c20:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3e:	d134      	bne.n	8003caa <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c4e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d111      	bne.n	8003c84 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c6e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003c82:	e012      	b.n	8003caa <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c92:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d108      	bne.n	8003cc8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cba:	4a4a      	ldr	r2, [pc, #296]	; (8003de4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc2:	4a49      	ldr	r2, [pc, #292]	; (8003de8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8003cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003cc6:	e007      	b.n	8003cd8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ccc:	4a47      	ldr	r2, [pc, #284]	; (8003dec <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	4a46      	ldr	r2, [pc, #280]	; (8003df0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cdc:	4a45      	ldr	r2, [pc, #276]	; (8003df4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8003cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d00:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003d02:	f7fe faf9 	bl	80022f8 <HAL_DMA_Start_IT>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d10:	f043 0210 	orr.w	r2, r3, #16
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003d24:	e054      	b.n	8003dd0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	2200      	movs	r2, #0
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	2200      	movs	r2, #0
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	4619      	mov	r1, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	330c      	adds	r3, #12
 8003d66:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d6e:	f7fe fac3 	bl	80022f8 <HAL_DMA_Start_IT>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00c      	beq.n	8003d92 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d7c:	f043 0210 	orr.w	r2, r3, #16
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8003d90:	e01e      	b.n	8003dd0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d007      	beq.n	8003db0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dae:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0220 	orr.w	r2, r2, #32
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0202 	orr.w	r2, r2, #2
 8003dce:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	08003f6d 	.word	0x08003f6d
 8003de8:	08003e35 	.word	0x08003e35
 8003dec:	08003f89 	.word	0x08003f89
 8003df0:	08003edd 	.word	0x08003edd
 8003df4:	08003fa5 	.word	0x08003fa5

08003df8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e42:	f7fe f895 	bl	8001f70 <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d03c      	beq.n	8003ed0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0220 	bic.w	r2, r2, #32
 8003e64:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10d      	bne.n	8003e8a <SPI_DMAReceiveCplt+0x56>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e76:	d108      	bne.n	8003e8a <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0203 	bic.w	r2, r2, #3
 8003e86:	605a      	str	r2, [r3, #4]
 8003e88:	e007      	b.n	8003e9a <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	2164      	movs	r1, #100	; 0x64
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f9b6 	bl	8004210 <SPI_EndRxTransaction>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7fd fb6b 	bl	80015a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003ece:	e002      	b.n	8003ed6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ff91 	bl	8003df8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eea:	f7fe f841 	bl	8001f70 <HAL_GetTick>
 8003eee:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d030      	beq.n	8003f60 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0220 	bic.w	r2, r2, #32
 8003f0c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	2164      	movs	r1, #100	; 0x64
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f9d4 	bl	80042c0 <SPI_EndRxTxTransaction>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f22:	f043 0220 	orr.w	r2, r3, #32
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0203 	bic.w	r2, r2, #3
 8003f38:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7fd fb23 	bl	80015a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f5e:	e002      	b.n	8003f66 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7fd fb0f 	bl	8001584 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f7ff ff46 	bl	8003e0c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f80:	bf00      	nop
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff ff42 	bl	8003e20 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0203 	bic.w	r2, r2, #3
 8003fc0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc6:	f043 0210 	orr.w	r2, r3, #16
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f7fd fae4 	bl	80015a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ff4:	f7fd ffbc 	bl	8001f70 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	4413      	add	r3, r2
 8004002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004004:	f7fd ffb4 	bl	8001f70 <HAL_GetTick>
 8004008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800400a:	4b39      	ldr	r3, [pc, #228]	; (80040f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	015b      	lsls	r3, r3, #5
 8004010:	0d1b      	lsrs	r3, r3, #20
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800401a:	e054      	b.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004022:	d050      	beq.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004024:	f7fd ffa4 	bl	8001f70 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	429a      	cmp	r2, r3
 8004032:	d902      	bls.n	800403a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d13d      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004052:	d111      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405c:	d004      	beq.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004066:	d107      	bne.n	8004078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004080:	d10f      	bne.n	80040a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e017      	b.n	80040e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4013      	ands	r3, r2
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	bf0c      	ite	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	2300      	movne	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d19b      	bne.n	800401c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	2000007c 	.word	0x2000007c

080040f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004102:	f7fd ff35 	bl	8001f70 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	4413      	add	r3, r2
 8004110:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004112:	f7fd ff2d 	bl	8001f70 <HAL_GetTick>
 8004116:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004118:	4b3c      	ldr	r3, [pc, #240]	; (800420c <SPI_WaitFifoStateUntilTimeout+0x118>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00da      	lsls	r2, r3, #3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	0d1b      	lsrs	r3, r3, #20
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8004130:	e05f      	b.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004138:	d106      	bne.n	8004148 <SPI_WaitFifoStateUntilTimeout+0x54>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d103      	bne.n	8004148 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800414e:	d050      	beq.n	80041f2 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004150:	f7fd ff0e 	bl	8001f70 <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	429a      	cmp	r2, r3
 800415e:	d902      	bls.n	8004166 <SPI_WaitFifoStateUntilTimeout+0x72>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d13d      	bne.n	80041e2 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800417e:	d111      	bne.n	80041a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004188:	d004      	beq.n	8004194 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004192:	d107      	bne.n	80041a4 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ac:	d10f      	bne.n	80041ce <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e010      	b.n	8004204 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4013      	ands	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d197      	bne.n	8004132 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	2000007c 	.word	0x2000007c

08004210 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af02      	add	r7, sp, #8
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004224:	d111      	bne.n	800424a <SPI_EndRxTransaction+0x3a>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800422e:	d004      	beq.n	800423a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004238:	d107      	bne.n	800424a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004248:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2200      	movs	r2, #0
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff fec5 	bl	8003fe4 <SPI_WaitFlagStateUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d007      	beq.n	8004270 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e023      	b.n	80042b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004278:	d11d      	bne.n	80042b6 <SPI_EndRxTransaction+0xa6>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004282:	d004      	beq.n	800428e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d113      	bne.n	80042b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2200      	movs	r2, #0
 8004296:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7ff ff2a 	bl	80040f4 <SPI_WaitFifoStateUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042aa:	f043 0220 	orr.w	r2, r3, #32
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e000      	b.n	80042b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff ff0b 	bl	80040f4 <SPI_WaitFifoStateUntilTimeout>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e8:	f043 0220 	orr.w	r2, r3, #32
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e027      	b.n	8004344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	2180      	movs	r1, #128	; 0x80
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f7ff fe70 	bl	8003fe4 <SPI_WaitFlagStateUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430e:	f043 0220 	orr.w	r2, r3, #32
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e014      	b.n	8004344 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff fee4 	bl	80040f4 <SPI_WaitFifoStateUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e000      	b.n	8004344 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <LL_EXTI_EnableIT_0_31>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004354:	4b05      	ldr	r3, [pc, #20]	; (800436c <LL_EXTI_EnableIT_0_31+0x20>)
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4904      	ldr	r1, [pc, #16]	; (800436c <LL_EXTI_EnableIT_0_31+0x20>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40010400 	.word	0x40010400

08004370 <LL_EXTI_EnableIT_32_63>:
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <LL_EXTI_EnableIT_32_63+0x20>)
 800437a:	6a1a      	ldr	r2, [r3, #32]
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <LL_EXTI_EnableIT_32_63+0x20>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4313      	orrs	r3, r2
 8004382:	620b      	str	r3, [r1, #32]
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010400 	.word	0x40010400

08004394 <LL_EXTI_DisableIT_0_31>:
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	43db      	mvns	r3, r3
 80043a4:	4904      	ldr	r1, [pc, #16]	; (80043b8 <LL_EXTI_DisableIT_0_31+0x24>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40010400 	.word	0x40010400

080043bc <LL_EXTI_DisableIT_32_63>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	4904      	ldr	r1, [pc, #16]	; (80043e0 <LL_EXTI_DisableIT_32_63+0x24>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	620b      	str	r3, [r1, #32]
}
 80043d2:	bf00      	nop
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010400 	.word	0x40010400

080043e4 <LL_EXTI_EnableEvent_0_31>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <LL_EXTI_EnableEvent_0_31+0x20>)
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4904      	ldr	r1, [pc, #16]	; (8004404 <LL_EXTI_EnableEvent_0_31+0x20>)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40010400 	.word	0x40010400

08004408 <LL_EXTI_EnableEvent_32_63>:
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004414:	4904      	ldr	r1, [pc, #16]	; (8004428 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4313      	orrs	r3, r2
 800441a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	40010400 	.word	0x40010400

0800442c <LL_EXTI_DisableEvent_0_31>:
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8004434:	4b06      	ldr	r3, [pc, #24]	; (8004450 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	43db      	mvns	r3, r3
 800443c:	4904      	ldr	r1, [pc, #16]	; (8004450 <LL_EXTI_DisableEvent_0_31+0x24>)
 800443e:	4013      	ands	r3, r2
 8004440:	604b      	str	r3, [r1, #4]
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40010400 	.word	0x40010400

08004454 <LL_EXTI_DisableEvent_32_63>:
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800445c:	4b06      	ldr	r3, [pc, #24]	; (8004478 <LL_EXTI_DisableEvent_32_63+0x24>)
 800445e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	43db      	mvns	r3, r3
 8004464:	4904      	ldr	r1, [pc, #16]	; (8004478 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004466:	4013      	ands	r3, r2
 8004468:	624b      	str	r3, [r1, #36]	; 0x24
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40010400 	.word	0x40010400

0800447c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	4904      	ldr	r1, [pc, #16]	; (800449c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4313      	orrs	r3, r2
 800448e:	608b      	str	r3, [r1, #8]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40010400 	.word	0x40010400

080044a0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80044aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ac:	4904      	ldr	r1, [pc, #16]	; (80044c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	40010400 	.word	0x40010400

080044c4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	4904      	ldr	r1, [pc, #16]	; (80044e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40010400 	.word	0x40010400

080044ec <LL_EXTI_DisableRisingTrig_32_63>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80044f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	43db      	mvns	r3, r3
 80044fc:	4904      	ldr	r1, [pc, #16]	; (8004510 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80044fe:	4013      	ands	r3, r2
 8004500:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40010400 	.word	0x40010400

08004514 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800451c:	4b05      	ldr	r3, [pc, #20]	; (8004534 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4313      	orrs	r3, r2
 8004526:	60cb      	str	r3, [r1, #12]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40010400 	.word	0x40010400

08004538 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004544:	4904      	ldr	r1, [pc, #16]	; (8004558 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4313      	orrs	r3, r2
 800454a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40010400 	.word	0x40010400

0800455c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	43db      	mvns	r3, r3
 800456c:	4904      	ldr	r1, [pc, #16]	; (8004580 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800456e:	4013      	ands	r3, r2
 8004570:	60cb      	str	r3, [r1, #12]
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010400 	.word	0x40010400

08004584 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800458c:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800458e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	43db      	mvns	r3, r3
 8004594:	4904      	ldr	r1, [pc, #16]	; (80045a8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004596:	4013      	ands	r3, r2
 8004598:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40010400 	.word	0x40010400

080045ac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	7a1b      	ldrb	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80c8 	beq.w	8004752 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d05d      	beq.n	8004686 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7a5b      	ldrb	r3, [r3, #9]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d00e      	beq.n	80045f0 <LL_EXTI_Init+0x44>
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d017      	beq.n	8004606 <LL_EXTI_Init+0x5a>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d120      	bne.n	800461c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff24 	bl	800442c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff feaf 	bl	800434c <LL_EXTI_EnableIT_0_31>
          break;
 80045ee:	e018      	b.n	8004622 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fecd 	bl	8004394 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fef0 	bl	80043e4 <LL_EXTI_EnableEvent_0_31>
          break;
 8004604:	e00d      	b.n	8004622 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fe9e 	bl	800434c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fee5 	bl	80043e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800461a:	e002      	b.n	8004622 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800461c:	2301      	movs	r3, #1
 800461e:	60fb      	str	r3, [r7, #12]
          break;
 8004620:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	7a9b      	ldrb	r3, [r3, #10]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d02d      	beq.n	8004686 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	7a9b      	ldrb	r3, [r3, #10]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d00e      	beq.n	8004650 <LL_EXTI_Init+0xa4>
 8004632:	2b03      	cmp	r3, #3
 8004634:	d017      	beq.n	8004666 <LL_EXTI_Init+0xba>
 8004636:	2b01      	cmp	r3, #1
 8004638:	d120      	bne.n	800467c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff8c 	bl	800455c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff ff17 	bl	800447c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800464e:	e01b      	b.n	8004688 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff35 	bl	80044c4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff ff58 	bl	8004514 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004664:	e010      	b.n	8004688 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff06 	bl	800447c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff4d 	bl	8004514 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800467a:	e005      	b.n	8004688 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f043 0302 	orr.w	r3, r3, #2
 8004682:	60fb      	str	r3, [r7, #12]
            break;
 8004684:	e000      	b.n	8004688 <LL_EXTI_Init+0xdc>
        }
      }
 8004686:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d075      	beq.n	800477c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7a5b      	ldrb	r3, [r3, #9]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d00e      	beq.n	80046b6 <LL_EXTI_Init+0x10a>
 8004698:	2b02      	cmp	r3, #2
 800469a:	d017      	beq.n	80046cc <LL_EXTI_Init+0x120>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d120      	bne.n	80046e2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fed5 	bl	8004454 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fe5e 	bl	8004370 <LL_EXTI_EnableIT_32_63>
          break;
 80046b4:	e01a      	b.n	80046ec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fe7e 	bl	80043bc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fe9f 	bl	8004408 <LL_EXTI_EnableEvent_32_63>
          break;
 80046ca:	e00f      	b.n	80046ec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff fe4d 	bl	8004370 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fe94 	bl	8004408 <LL_EXTI_EnableEvent_32_63>
          break;
 80046e0:	e004      	b.n	80046ec <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f043 0304 	orr.w	r3, r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
          break;
 80046ea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	7a9b      	ldrb	r3, [r3, #10]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d043      	beq.n	800477c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	7a9b      	ldrb	r3, [r3, #10]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d00e      	beq.n	800471a <LL_EXTI_Init+0x16e>
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d017      	beq.n	8004730 <LL_EXTI_Init+0x184>
 8004700:	2b01      	cmp	r3, #1
 8004702:	d120      	bne.n	8004746 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff3b 	bl	8004584 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fec4 	bl	80044a0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004718:	e031      	b.n	800477e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fee4 	bl	80044ec <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff ff05 	bl	8004538 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800472e:	e026      	b.n	800477e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff feb3 	bl	80044a0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fefa 	bl	8004538 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8004744:	e01b      	b.n	800477e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f043 0305 	orr.w	r3, r3, #5
 800474c:	60fb      	str	r3, [r7, #12]
            break;
 800474e:	bf00      	nop
 8004750:	e015      	b.n	800477e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fe1c 	bl	8004394 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fe63 	bl	800442c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fe26 	bl	80043bc <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fe6d 	bl	8004454 <LL_EXTI_DisableEvent_32_63>
 800477a:	e000      	b.n	800477e <LL_EXTI_Init+0x1d2>
      }
 800477c:	bf00      	nop
  }

  return status;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <LL_GPIO_SetPinMode>:
{
 8004788:	b480      	push	{r7}
 800478a:	b08b      	sub	sp, #44	; 0x2c
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	613b      	str	r3, [r7, #16]
  return result;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80047ae:	2320      	movs	r3, #32
 80047b0:	e003      	b.n	80047ba <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	fab3 f383 	clz	r3, r3
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	2103      	movs	r1, #3
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	43db      	mvns	r3, r3
 80047c4:	401a      	ands	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	fa93 f3a3 	rbit	r3, r3
 80047d0:	61fb      	str	r3, [r7, #28]
  return result;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80047dc:	2320      	movs	r3, #32
 80047de:	e003      	b.n	80047e8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	fab3 f383 	clz	r3, r3
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	6879      	ldr	r1, [r7, #4]
 80047ec:	fa01 f303 	lsl.w	r3, r1, r3
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	601a      	str	r2, [r3, #0]
}
 80047f6:	bf00      	nop
 80047f8:	372c      	adds	r7, #44	; 0x2c
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <LL_GPIO_SetPinOutputType>:
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	43db      	mvns	r3, r3
 8004816:	401a      	ands	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	431a      	orrs	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr

08004832 <LL_GPIO_SetPinSpeed>:
{
 8004832:	b480      	push	{r7}
 8004834:	b08b      	sub	sp, #44	; 0x2c
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689a      	ldr	r2, [r3, #8]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	fa93 f3a3 	rbit	r3, r3
 800484c:	613b      	str	r3, [r7, #16]
  return result;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8004858:	2320      	movs	r3, #32
 800485a:	e003      	b.n	8004864 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2103      	movs	r1, #3
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	401a      	ands	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	61fb      	str	r3, [r7, #28]
  return result;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8004886:	2320      	movs	r3, #32
 8004888:	e003      	b.n	8004892 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	fab3 f383 	clz	r3, r3
 8004890:	b2db      	uxtb	r3, r3
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	fa01 f303 	lsl.w	r3, r1, r3
 800489a:	431a      	orrs	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	609a      	str	r2, [r3, #8]
}
 80048a0:	bf00      	nop
 80048a2:	372c      	adds	r7, #44	; 0x2c
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_GPIO_SetPinPull>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b08b      	sub	sp, #44	; 0x2c
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa93 f3a3 	rbit	r3, r3
 80048c6:	613b      	str	r3, [r7, #16]
  return result;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80048d2:	2320      	movs	r3, #32
 80048d4:	e003      	b.n	80048de <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	fab3 f383 	clz	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2103      	movs	r1, #3
 80048e2:	fa01 f303 	lsl.w	r3, r1, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	401a      	ands	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	61fb      	str	r3, [r7, #28]
  return result;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8004900:	2320      	movs	r3, #32
 8004902:	e003      	b.n	800490c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	431a      	orrs	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	60da      	str	r2, [r3, #12]
}
 800491a:	bf00      	nop
 800491c:	372c      	adds	r7, #44	; 0x2c
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_GPIO_SetAFPin_0_7>:
{
 8004926:	b480      	push	{r7}
 8004928:	b08b      	sub	sp, #44	; 0x2c
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a1a      	ldr	r2, [r3, #32]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	613b      	str	r3, [r7, #16]
  return result;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800494c:	2320      	movs	r3, #32
 800494e:	e003      	b.n	8004958 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	fab3 f383 	clz	r3, r3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	210f      	movs	r1, #15
 800495c:	fa01 f303 	lsl.w	r3, r1, r3
 8004960:	43db      	mvns	r3, r3
 8004962:	401a      	ands	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	fa93 f3a3 	rbit	r3, r3
 800496e:	61fb      	str	r3, [r7, #28]
  return result;
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800497a:	2320      	movs	r3, #32
 800497c:	e003      	b.n	8004986 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	fab3 f383 	clz	r3, r3
 8004984:	b2db      	uxtb	r3, r3
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	fa01 f303 	lsl.w	r3, r1, r3
 800498e:	431a      	orrs	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	bf00      	nop
 8004996:	372c      	adds	r7, #44	; 0x2c
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_GPIO_SetAFPin_8_15>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b08b      	sub	sp, #44	; 0x2c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	613b      	str	r3, [r7, #16]
  return result;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80049c8:	2320      	movs	r3, #32
 80049ca:	e003      	b.n	80049d4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	fab3 f383 	clz	r3, r3
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	210f      	movs	r1, #15
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	43db      	mvns	r3, r3
 80049de:	401a      	ands	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	0a1b      	lsrs	r3, r3, #8
 80049e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	fa93 f3a3 	rbit	r3, r3
 80049ec:	61fb      	str	r3, [r7, #28]
  return result;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80049f8:	2320      	movs	r3, #32
 80049fa:	e003      	b.n	8004a04 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	fa01 f303 	lsl.w	r3, r1, r3
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004a12:	bf00      	nop
 8004a14:	372c      	adds	r7, #44	; 0x2c
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b088      	sub	sp, #32
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	60fb      	str	r3, [r7, #12]
  return result;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <LL_GPIO_Init+0x26>
    return 32U;
 8004a40:	2320      	movs	r3, #32
 8004a42:	e003      	b.n	8004a4c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	fab3 f383 	clz	r3, r3
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a4e:	e048      	b.n	8004ae2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	2101      	movs	r1, #1
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d03a      	beq.n	8004adc <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d003      	beq.n	8004a76 <LL_GPIO_Init+0x58>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d10e      	bne.n	8004a94 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	69b9      	ldr	r1, [r7, #24]
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fed7 	bl	8004832 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	6819      	ldr	r1, [r3, #0]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff feb7 	bl	8004802 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f7ff ff05 	bl	80048ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d111      	bne.n	8004ace <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2bff      	cmp	r3, #255	; 0xff
 8004aae:	d807      	bhi.n	8004ac0 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ff34 	bl	8004926 <LL_GPIO_SetAFPin_0_7>
 8004abe:	e006      	b.n	8004ace <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7ff ff69 	bl	80049a0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	69b9      	ldr	r1, [r7, #24]
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7ff fe56 	bl	8004788 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1af      	bne.n	8004a50 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <LL_RCC_HSI_IsReady+0x24>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b0c:	d101      	bne.n	8004b12 <LL_RCC_HSI_IsReady+0x16>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_RCC_HSI_IsReady+0x18>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000

08004b24 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <LL_RCC_LSE_IsReady+0x24>)
 8004b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d101      	bne.n	8004b3a <LL_RCC_LSE_IsReady+0x16>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_RCC_LSE_IsReady+0x18>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000

08004b4c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <LL_RCC_GetSysClkSource+0x18>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 030c 	and.w	r3, r3, #12
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000

08004b68 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <LL_RCC_GetAHBPrescaler+0x18>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40021000 	.word	0x40021000

08004b84 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <LL_RCC_GetAPB1Prescaler+0x18>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40021000 	.word	0x40021000

08004ba0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000

08004bbc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004bc4:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <LL_RCC_GetUSARTClockSource+0x24>)
 8004bc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	401a      	ands	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	4313      	orrs	r3, r2
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40021000 	.word	0x40021000

08004be4 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004bec:	4b06      	ldr	r3, [pc, #24]	; (8004c08 <LL_RCC_GetUARTClockSource+0x24>)
 8004bee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	4313      	orrs	r3, r2
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40021000 	.word	0x40021000

08004c0c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <LL_RCC_PLL_GetMainSource+0x18>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0303 	and.w	r3, r3, #3
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000

08004c28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <LL_RCC_PLL_GetN+0x18>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	0a1b      	lsrs	r3, r3, #8
 8004c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	40021000 	.word	0x40021000

08004c44 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <LL_RCC_PLL_GetR+0x18>)
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000

08004c60 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <LL_RCC_PLL_GetDivider+0x18>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40021000 	.word	0x40021000

08004c7c <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d12e      	bne.n	8004cec <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff ff94 	bl	8004bbc <LL_RCC_GetUSARTClockSource>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4a50      	ldr	r2, [pc, #320]	; (8004dd8 <LL_RCC_GetUSARTClockFreq+0x15c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d009      	beq.n	8004cb0 <LL_RCC_GetUSARTClockFreq+0x34>
 8004c9c:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8004ca0:	d00e      	beq.n	8004cc0 <LL_RCC_GetUSARTClockFreq+0x44>
 8004ca2:	4a4e      	ldr	r2, [pc, #312]	; (8004ddc <LL_RCC_GetUSARTClockFreq+0x160>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d114      	bne.n	8004cd2 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004ca8:	f000 f926 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004cac:	60f8      	str	r0, [r7, #12]
        break;
 8004cae:	e08d      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004cb0:	f7ff ff24 	bl	8004afc <LL_RCC_HSI_IsReady>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d07b      	beq.n	8004db2 <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 8004cba:	4b49      	ldr	r3, [pc, #292]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x164>)
 8004cbc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004cbe:	e078      	b.n	8004db2 <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004cc0:	f7ff ff30 	bl	8004b24 <LL_RCC_LSE_IsReady>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d075      	beq.n	8004db6 <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 8004cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cce:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004cd0:	e071      	b.n	8004db6 <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004cd2:	f000 f911 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f92f 	bl	8004f3c <RCC_GetHCLKClockFreq>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f959 	bl	8004f98 <RCC_GetPCLK2ClockFreq>
 8004ce6:	60f8      	str	r0, [r7, #12]
        break;
 8004ce8:	bf00      	nop
 8004cea:	e06f      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d12e      	bne.n	8004d50 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ff62 	bl	8004bbc <LL_RCC_GetUSARTClockSource>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a3a      	ldr	r2, [pc, #232]	; (8004de4 <LL_RCC_GetUSARTClockFreq+0x168>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d009      	beq.n	8004d14 <LL_RCC_GetUSARTClockFreq+0x98>
 8004d00:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8004d04:	d00e      	beq.n	8004d24 <LL_RCC_GetUSARTClockFreq+0xa8>
 8004d06:	4a38      	ldr	r2, [pc, #224]	; (8004de8 <LL_RCC_GetUSARTClockFreq+0x16c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d114      	bne.n	8004d36 <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004d0c:	f000 f8f4 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004d10:	60f8      	str	r0, [r7, #12]
        break;
 8004d12:	e05b      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004d14:	f7ff fef2 	bl	8004afc <LL_RCC_HSI_IsReady>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d04d      	beq.n	8004dba <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 8004d1e:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x164>)
 8004d20:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004d22:	e04a      	b.n	8004dba <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004d24:	f7ff fefe 	bl	8004b24 <LL_RCC_LSE_IsReady>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d047      	beq.n	8004dbe <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 8004d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d32:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004d34:	e043      	b.n	8004dbe <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d36:	f000 f8df 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 f8fd 	bl	8004f3c <RCC_GetHCLKClockFreq>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f911 	bl	8004f6c <RCC_GetPCLK1ClockFreq>
 8004d4a:	60f8      	str	r0, [r7, #12]
        break;
 8004d4c:	bf00      	nop
 8004d4e:	e03d      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b30      	cmp	r3, #48	; 0x30
 8004d54:	d135      	bne.n	8004dc2 <LL_RCC_GetUSARTClockFreq+0x146>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff ff30 	bl	8004bbc <LL_RCC_GetUSARTClockSource>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4a23      	ldr	r2, [pc, #140]	; (8004dec <LL_RCC_GetUSARTClockFreq+0x170>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <LL_RCC_GetUSARTClockFreq+0xfc>
 8004d64:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004d68:	d00e      	beq.n	8004d88 <LL_RCC_GetUSARTClockFreq+0x10c>
 8004d6a:	4a21      	ldr	r2, [pc, #132]	; (8004df0 <LL_RCC_GetUSARTClockFreq+0x174>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d114      	bne.n	8004d9a <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8004d70:	f000 f8c2 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004d74:	60f8      	str	r0, [r7, #12]
          break;
 8004d76:	e029      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8004d78:	f7ff fec0 	bl	8004afc <LL_RCC_HSI_IsReady>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d021      	beq.n	8004dc6 <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = HSI_VALUE;
 8004d82:	4b17      	ldr	r3, [pc, #92]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x164>)
 8004d84:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004d86:	e01e      	b.n	8004dc6 <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8004d88:	f7ff fecc 	bl	8004b24 <LL_RCC_LSE_IsReady>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01b      	beq.n	8004dca <LL_RCC_GetUSARTClockFreq+0x14e>
          {
            usart_frequency = LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d96:	60fb      	str	r3, [r7, #12]
          }
          break;
 8004d98:	e017      	b.n	8004dca <LL_RCC_GetUSARTClockFreq+0x14e>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d9a:	f000 f8ad 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 f8cb 	bl	8004f3c <RCC_GetHCLKClockFreq>
 8004da6:	4603      	mov	r3, r0
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 f8df 	bl	8004f6c <RCC_GetPCLK1ClockFreq>
 8004dae:	60f8      	str	r0, [r7, #12]
          break;
 8004db0:	e00c      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 8004db2:	bf00      	nop
 8004db4:	e00a      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 8004db6:	bf00      	nop
 8004db8:	e008      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 8004dba:	bf00      	nop
 8004dbc:	e006      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 8004dbe:	bf00      	nop
 8004dc0:	e004      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
      }
    }
 8004dc2:	bf00      	nop
 8004dc4:	e002      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 8004dc6:	bf00      	nop
 8004dc8:	e000      	b.n	8004dcc <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 8004dca:	bf00      	nop
  }
  return usart_frequency;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	00030002 	.word	0x00030002
 8004ddc:	00030001 	.word	0x00030001
 8004de0:	00f42400 	.word	0x00f42400
 8004de4:	000c0008 	.word	0x000c0008
 8004de8:	000c0004 	.word	0x000c0004
 8004dec:	00300020 	.word	0x00300020
 8004df0:	00300010 	.word	0x00300010

08004df4 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2bc0      	cmp	r3, #192	; 0xc0
 8004e04:	d12d      	bne.n	8004e62 <LL_RCC_GetUARTClockFreq+0x6e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff feec 	bl	8004be4 <LL_RCC_GetUARTClockSource>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a35      	ldr	r2, [pc, #212]	; (8004ee4 <LL_RCC_GetUARTClockFreq+0xf0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <LL_RCC_GetUARTClockFreq+0x34>
 8004e14:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004e18:	d00e      	beq.n	8004e38 <LL_RCC_GetUARTClockFreq+0x44>
 8004e1a:	4a33      	ldr	r2, [pc, #204]	; (8004ee8 <LL_RCC_GetUARTClockFreq+0xf4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d114      	bne.n	8004e4a <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004e20:	f000 f86a 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004e24:	60f8      	str	r0, [r7, #12]
        break;
 8004e26:	e021      	b.n	8004e6c <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004e28:	f7ff fe68 	bl	8004afc <LL_RCC_HSI_IsReady>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d019      	beq.n	8004e66 <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = HSI_VALUE;
 8004e32:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <LL_RCC_GetUARTClockFreq+0xf8>)
 8004e34:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004e36:	e016      	b.n	8004e66 <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004e38:	f7ff fe74 	bl	8004b24 <LL_RCC_LSE_IsReady>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d013      	beq.n	8004e6a <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = LSE_VALUE;
 8004e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e46:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004e48:	e00f      	b.n	8004e6a <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e4a:	f000 f855 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f873 	bl	8004f3c <RCC_GetHCLKClockFreq>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 f887 	bl	8004f6c <RCC_GetPCLK1ClockFreq>
 8004e5e:	60f8      	str	r0, [r7, #12]
        break;
 8004e60:	e004      	b.n	8004e6c <LL_RCC_GetUARTClockFreq+0x78>
    }
  }
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <LL_RCC_GetUARTClockFreq+0x78>
        break;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <LL_RCC_GetUARTClockFreq+0x78>
        break;
 8004e6a:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e72:	d12d      	bne.n	8004ed0 <LL_RCC_GetUARTClockFreq+0xdc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff feb5 	bl	8004be4 <LL_RCC_GetUARTClockSource>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ef0 <LL_RCC_GetUARTClockFreq+0xfc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d009      	beq.n	8004e96 <LL_RCC_GetUARTClockFreq+0xa2>
 8004e82:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004e86:	d00e      	beq.n	8004ea6 <LL_RCC_GetUARTClockFreq+0xb2>
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <LL_RCC_GetUARTClockFreq+0x100>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d114      	bne.n	8004eb8 <LL_RCC_GetUARTClockFreq+0xc4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004e8e:	f000 f833 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004e92:	60f8      	str	r0, [r7, #12]
        break;
 8004e94:	e021      	b.n	8004eda <LL_RCC_GetUARTClockFreq+0xe6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004e96:	f7ff fe31 	bl	8004afc <LL_RCC_HSI_IsReady>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d019      	beq.n	8004ed4 <LL_RCC_GetUARTClockFreq+0xe0>
        {
          uart_frequency = HSI_VALUE;
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <LL_RCC_GetUARTClockFreq+0xf8>)
 8004ea2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004ea4:	e016      	b.n	8004ed4 <LL_RCC_GetUARTClockFreq+0xe0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004ea6:	f7ff fe3d 	bl	8004b24 <LL_RCC_LSE_IsReady>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <LL_RCC_GetUARTClockFreq+0xe4>
        {
          uart_frequency = LSE_VALUE;
 8004eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eb4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004eb6:	e00f      	b.n	8004ed8 <LL_RCC_GetUARTClockFreq+0xe4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004eb8:	f000 f81e 	bl	8004ef8 <RCC_GetSystemClockFreq>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 f83c 	bl	8004f3c <RCC_GetHCLKClockFreq>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 f850 	bl	8004f6c <RCC_GetPCLK1ClockFreq>
 8004ecc:	60f8      	str	r0, [r7, #12]
        break;
 8004ece:	e004      	b.n	8004eda <LL_RCC_GetUARTClockFreq+0xe6>
    }
  }
 8004ed0:	bf00      	nop
 8004ed2:	e002      	b.n	8004eda <LL_RCC_GetUARTClockFreq+0xe6>
        break;
 8004ed4:	bf00      	nop
 8004ed6:	e000      	b.n	8004eda <LL_RCC_GetUARTClockFreq+0xe6>
        break;
 8004ed8:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	00c00080 	.word	0x00c00080
 8004ee8:	00c00040 	.word	0x00c00040
 8004eec:	00f42400 	.word	0x00f42400
 8004ef0:	03000200 	.word	0x03000200
 8004ef4:	03000100 	.word	0x03000100

08004ef8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004efe:	f7ff fe25 	bl	8004b4c <LL_RCC_GetSysClkSource>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d006      	beq.n	8004f16 <RCC_GetSystemClockFreq+0x1e>
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d007      	beq.n	8004f1c <RCC_GetSystemClockFreq+0x24>
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d109      	bne.n	8004f24 <RCC_GetSystemClockFreq+0x2c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004f10:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <RCC_GetSystemClockFreq+0x3c>)
 8004f12:	607b      	str	r3, [r7, #4]
      break;
 8004f14:	e009      	b.n	8004f2a <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <RCC_GetSystemClockFreq+0x40>)
 8004f18:	607b      	str	r3, [r7, #4]
      break;
 8004f1a:	e006      	b.n	8004f2a <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004f1c:	f000 f852 	bl	8004fc4 <RCC_PLL_GetFreqDomain_SYS>
 8004f20:	6078      	str	r0, [r7, #4]
      break;
 8004f22:	e002      	b.n	8004f2a <RCC_GetSystemClockFreq+0x32>

    default:
      frequency = HSI_VALUE;
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <RCC_GetSystemClockFreq+0x3c>)
 8004f26:	607b      	str	r3, [r7, #4]
      break;
 8004f28:	bf00      	nop
  }

  return frequency;
 8004f2a:	687b      	ldr	r3, [r7, #4]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3708      	adds	r7, #8
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	00f42400 	.word	0x00f42400
 8004f38:	016e3600 	.word	0x016e3600

08004f3c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004f44:	f7ff fe10 	bl	8004b68 <LL_RCC_GetAHBPrescaler>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	091b      	lsrs	r3, r3, #4
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	4a05      	ldr	r2, [pc, #20]	; (8004f68 <RCC_GetHCLKClockFreq+0x2c>)
 8004f52:	5cd3      	ldrb	r3, [r2, r3]
 8004f54:	f003 031f 	and.w	r3, r3, #31
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	080055d0 	.word	0x080055d0

08004f6c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004f74:	f7ff fe06 	bl	8004b84 <LL_RCC_GetAPB1Prescaler>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	4a05      	ldr	r2, [pc, #20]	; (8004f94 <RCC_GetPCLK1ClockFreq+0x28>)
 8004f7e:	5cd3      	ldrb	r3, [r2, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	080055e0 	.word	0x080055e0

08004f98 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004fa0:	f7ff fdfe 	bl	8004ba0 <LL_RCC_GetAPB2Prescaler>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	0adb      	lsrs	r3, r3, #11
 8004fa8:	4a05      	ldr	r2, [pc, #20]	; (8004fc0 <RCC_GetPCLK2ClockFreq+0x28>)
 8004faa:	5cd3      	ldrb	r3, [r2, r3]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	080055e0 	.word	0x080055e0

08004fc4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004fc4:	b590      	push	{r4, r7, lr}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004fca:	f7ff fe1f 	bl	8004c0c <LL_RCC_PLL_GetMainSource>
 8004fce:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d002      	beq.n	8004fdc <RCC_PLL_GetFreqDomain_SYS+0x18>
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d003      	beq.n	8004fe2 <RCC_PLL_GetFreqDomain_SYS+0x1e>
 8004fda:	e005      	b.n	8004fe8 <RCC_PLL_GetFreqDomain_SYS+0x24>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004fde:	607b      	str	r3, [r7, #4]
      break;
 8004fe0:	e005      	b.n	8004fee <RCC_PLL_GetFreqDomain_SYS+0x2a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004fe4:	607b      	str	r3, [r7, #4]
      break;
 8004fe6:	e002      	b.n	8004fee <RCC_PLL_GetFreqDomain_SYS+0x2a>

    default:
      pllinputfreq = HSI_VALUE;
 8004fe8:	4b0d      	ldr	r3, [pc, #52]	; (8005020 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004fea:	607b      	str	r3, [r7, #4]
      break;
 8004fec:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004fee:	f7ff fe1b 	bl	8004c28 <LL_RCC_PLL_GetN>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	fb03 f402 	mul.w	r4, r3, r2
 8004ffa:	f7ff fe31 	bl	8004c60 <LL_RCC_PLL_GetDivider>
 8004ffe:	4603      	mov	r3, r0
 8005000:	091b      	lsrs	r3, r3, #4
 8005002:	3301      	adds	r3, #1
 8005004:	fbb4 f4f3 	udiv	r4, r4, r3
 8005008:	f7ff fe1c 	bl	8004c44 <LL_RCC_PLL_GetR>
 800500c:	4603      	mov	r3, r0
 800500e:	0e5b      	lsrs	r3, r3, #25
 8005010:	3301      	adds	r3, #1
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	bd90      	pop	{r4, r7, pc}
 8005020:	00f42400 	.word	0x00f42400
 8005024:	016e3600 	.word	0x016e3600

08005028 <LL_USART_IsEnabled>:
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b01      	cmp	r3, #1
 800503a:	d101      	bne.n	8005040 <LL_USART_IsEnabled+0x18>
 800503c:	2301      	movs	r3, #1
 800503e:	e000      	b.n	8005042 <LL_USART_IsEnabled+0x1a>
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_USART_SetPrescaler>:
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	f023 030f 	bic.w	r3, r3, #15
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	b292      	uxth	r2, r2
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <LL_USART_SetStopBitsLength>:
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_USART_SetHWFlowCtrl>:
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	609a      	str	r2, [r3, #8]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <LL_USART_SetBaudRate>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b0b      	cmp	r3, #11
 80050d6:	d83c      	bhi.n	8005152 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d039      	beq.n	8005152 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	d122      	bne.n	800512c <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b1c      	ldr	r3, [pc, #112]	; (8005160 <LL_USART_SetBaudRate+0x9c>)
 80050ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f8:	005a      	lsls	r2, r3, #1
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	441a      	add	r2, r3
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	b29b      	uxth	r3, r3
 8005108:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	b29b      	uxth	r3, r3
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	60da      	str	r2, [r3, #12]
}
 800512a:	e012      	b.n	8005152 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <LL_USART_SetBaudRate+0x9c>)
 8005134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	fbb2 f2f3 	udiv	r2, r2, r3
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	085b      	lsrs	r3, r3, #1
 8005142:	441a      	add	r2, r3
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	fbb2 f3f3 	udiv	r3, r2, r3
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	60da      	str	r2, [r3, #12]
}
 8005152:	bf00      	nop
 8005154:	371c      	adds	r7, #28
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	080055f0 	.word	0x080055f0

08005164 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af02      	add	r7, sp, #8
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ff56 	bl	8005028 <LL_USART_IsEnabled>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d165      	bne.n	800524e <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b34      	ldr	r3, [pc, #208]	; (8005258 <LL_USART_Init+0xf4>)
 8005188:	4013      	ands	r3, r2
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	6891      	ldr	r1, [r2, #8]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	6912      	ldr	r2, [r2, #16]
 8005192:	4311      	orrs	r1, r2
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	6952      	ldr	r2, [r2, #20]
 8005198:	4311      	orrs	r1, r2
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	69d2      	ldr	r2, [r2, #28]
 800519e:	430a      	orrs	r2, r1
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff ff62 	bl	8005076 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7ff ff6f 	bl	800509c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a26      	ldr	r2, [pc, #152]	; (800525c <LL_USART_Init+0xf8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d104      	bne.n	80051d0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80051c6:	2003      	movs	r0, #3
 80051c8:	f7ff fd58 	bl	8004c7c <LL_RCC_GetUSARTClockFreq>
 80051cc:	60b8      	str	r0, [r7, #8]
 80051ce:	e023      	b.n	8005218 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a23      	ldr	r2, [pc, #140]	; (8005260 <LL_USART_Init+0xfc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d104      	bne.n	80051e2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80051d8:	200c      	movs	r0, #12
 80051da:	f7ff fd4f 	bl	8004c7c <LL_RCC_GetUSARTClockFreq>
 80051de:	60b8      	str	r0, [r7, #8]
 80051e0:	e01a      	b.n	8005218 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	; (8005264 <LL_USART_Init+0x100>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d104      	bne.n	80051f4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80051ea:	2030      	movs	r0, #48	; 0x30
 80051ec:	f7ff fd46 	bl	8004c7c <LL_RCC_GetUSARTClockFreq>
 80051f0:	60b8      	str	r0, [r7, #8]
 80051f2:	e011      	b.n	8005218 <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <LL_USART_Init+0x104>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d104      	bne.n	8005206 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80051fc:	20c0      	movs	r0, #192	; 0xc0
 80051fe:	f7ff fdf9 	bl	8004df4 <LL_RCC_GetUARTClockFreq>
 8005202:	60b8      	str	r0, [r7, #8]
 8005204:	e008      	b.n	8005218 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a18      	ldr	r2, [pc, #96]	; (800526c <LL_USART_Init+0x108>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d104      	bne.n	8005218 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800520e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8005212:	f7ff fdef 	bl	8004df4 <LL_RCC_GetUARTClockFreq>
 8005216:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d011      	beq.n	8005242 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00d      	beq.n	8005242 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8005226:	2300      	movs	r3, #0
 8005228:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	69d9      	ldr	r1, [r3, #28]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	460b      	mov	r3, r1
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff ff41 	bl	80050c4 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff ff00 	bl	800504e <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800524e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	efff69f3 	.word	0xefff69f3
 800525c:	40013800 	.word	0x40013800
 8005260:	40004400 	.word	0x40004400
 8005264:	40004800 	.word	0x40004800
 8005268:	40004c00 	.word	0x40004c00
 800526c:	40005000 	.word	0x40005000

08005270 <crc_16>:
 * string of which the beginning has been passed to the function. The number of
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 */

uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 800527a:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <crc_16+0x68>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	f083 0301 	eor.w	r3, r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <crc_16+0x1c>
 8005288:	f000 f82a 	bl	80052e0 <init_crc16_tab>

	crc = CRC_START_16;
 800528c:	2300      	movs	r3, #0
 800528e:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d018      	beq.n	80052cc <crc_16+0x5c>
 800529a:	2300      	movs	r3, #0
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e011      	b.n	80052c4 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 80052a0:	8afb      	ldrh	r3, [r7, #22]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	8af9      	ldrh	r1, [r7, #22]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1c58      	adds	r0, r3, #1
 80052ac:	6138      	str	r0, [r7, #16]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	404b      	eors	r3, r1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	4909      	ldr	r1, [pc, #36]	; (80052dc <crc_16+0x6c>)
 80052b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80052ba:	4053      	eors	r3, r2
 80052bc:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	3301      	adds	r3, #1
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d3e9      	bcc.n	80052a0 <crc_16+0x30>
	}

	return crc;
 80052cc:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000258 	.word	0x20000258
 80052dc:	2000025c 	.word	0x2000025c

080052e0 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 80052e6:	2300      	movs	r3, #0
 80052e8:	80fb      	strh	r3, [r7, #6]
 80052ea:	e029      	b.n	8005340 <init_crc16_tab+0x60>

		crc = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	807b      	strh	r3, [r7, #2]
		c   = i;
 80052f0:	88fb      	ldrh	r3, [r7, #6]
 80052f2:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 80052f4:	2300      	movs	r3, #0
 80052f6:	80bb      	strh	r3, [r7, #4]
 80052f8:	e017      	b.n	800532a <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 80052fa:	887a      	ldrh	r2, [r7, #2]
 80052fc:	883b      	ldrh	r3, [r7, #0]
 80052fe:	4053      	eors	r3, r2
 8005300:	b29b      	uxth	r3, r3
 8005302:	f003 0301 	and.w	r3, r3, #1
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <init_crc16_tab+0x38>
 800530a:	887b      	ldrh	r3, [r7, #2]
 800530c:	085b      	lsrs	r3, r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <init_crc16_tab+0x78>)
 8005312:	4053      	eors	r3, r2
 8005314:	807b      	strh	r3, [r7, #2]
 8005316:	e002      	b.n	800531e <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8005318:	887b      	ldrh	r3, [r7, #2]
 800531a:	085b      	lsrs	r3, r3, #1
 800531c:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 800531e:	883b      	ldrh	r3, [r7, #0]
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8005324:	88bb      	ldrh	r3, [r7, #4]
 8005326:	3301      	adds	r3, #1
 8005328:	80bb      	strh	r3, [r7, #4]
 800532a:	88bb      	ldrh	r3, [r7, #4]
 800532c:	2b07      	cmp	r3, #7
 800532e:	d9e4      	bls.n	80052fa <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	490a      	ldr	r1, [pc, #40]	; (800535c <init_crc16_tab+0x7c>)
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	3301      	adds	r3, #1
 800533e:	80fb      	strh	r3, [r7, #6]
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	2bff      	cmp	r3, #255	; 0xff
 8005344:	d9d2      	bls.n	80052ec <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8005346:	4b06      	ldr	r3, [pc, #24]	; (8005360 <init_crc16_tab+0x80>)
 8005348:	2201      	movs	r2, #1
 800534a:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	ffffa001 	.word	0xffffa001
 800535c:	2000025c 	.word	0x2000025c
 8005360:	20000258 	.word	0x20000258

08005364 <crc_8>:
 *
 * The function crc_8() calculates the 8 bit wide CRC of an input string of a
 * given length.
 */

uint8_t crc_8( const unsigned char *input_str, size_t num_bytes ) {
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]

	size_t a;
	uint8_t crc;
	const unsigned char *ptr;

	crc = CRC_START_8;
 800536e:	2300      	movs	r3, #0
 8005370:	74fb      	strb	r3, [r7, #19]
	ptr = input_str;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	60fb      	str	r3, [r7, #12]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d014      	beq.n	80053a6 <crc_8+0x42>
 800537c:	2300      	movs	r3, #0
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e00d      	b.n	800539e <crc_8+0x3a>

		crc = sht75_crc_table[(*ptr++) ^ crc];
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	60fa      	str	r2, [r7, #12]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	7cfb      	ldrb	r3, [r7, #19]
 800538c:	4053      	eors	r3, r2
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <crc_8+0x50>)
 8005394:	5c9b      	ldrb	r3, [r3, r2]
 8005396:	74fb      	strb	r3, [r7, #19]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3301      	adds	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d3ed      	bcc.n	8005382 <crc_8+0x1e>
	}

	return crc;
 80053a6:	7cfb      	ldrb	r3, [r7, #19]

}  /* crc_8 */
 80053a8:	4618      	mov	r0, r3
 80053aa:	371c      	adds	r7, #28
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr
 80053b4:	20000088 	.word	0x20000088

080053b8 <__errno>:
 80053b8:	4b01      	ldr	r3, [pc, #4]	; (80053c0 <__errno+0x8>)
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000188 	.word	0x20000188

080053c4 <__libc_init_array>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	4e0d      	ldr	r6, [pc, #52]	; (80053fc <__libc_init_array+0x38>)
 80053c8:	4c0d      	ldr	r4, [pc, #52]	; (8005400 <__libc_init_array+0x3c>)
 80053ca:	1ba4      	subs	r4, r4, r6
 80053cc:	10a4      	asrs	r4, r4, #2
 80053ce:	2500      	movs	r5, #0
 80053d0:	42a5      	cmp	r5, r4
 80053d2:	d109      	bne.n	80053e8 <__libc_init_array+0x24>
 80053d4:	4e0b      	ldr	r6, [pc, #44]	; (8005404 <__libc_init_array+0x40>)
 80053d6:	4c0c      	ldr	r4, [pc, #48]	; (8005408 <__libc_init_array+0x44>)
 80053d8:	f000 f8ea 	bl	80055b0 <_init>
 80053dc:	1ba4      	subs	r4, r4, r6
 80053de:	10a4      	asrs	r4, r4, #2
 80053e0:	2500      	movs	r5, #0
 80053e2:	42a5      	cmp	r5, r4
 80053e4:	d105      	bne.n	80053f2 <__libc_init_array+0x2e>
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
 80053e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ec:	4798      	blx	r3
 80053ee:	3501      	adds	r5, #1
 80053f0:	e7ee      	b.n	80053d0 <__libc_init_array+0xc>
 80053f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053f6:	4798      	blx	r3
 80053f8:	3501      	adds	r5, #1
 80053fa:	e7f2      	b.n	80053e2 <__libc_init_array+0x1e>
 80053fc:	08005620 	.word	0x08005620
 8005400:	08005620 	.word	0x08005620
 8005404:	08005620 	.word	0x08005620
 8005408:	08005624 	.word	0x08005624

0800540c <malloc>:
 800540c:	4b02      	ldr	r3, [pc, #8]	; (8005418 <malloc+0xc>)
 800540e:	4601      	mov	r1, r0
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	f000 b861 	b.w	80054d8 <_malloc_r>
 8005416:	bf00      	nop
 8005418:	20000188 	.word	0x20000188

0800541c <free>:
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <free+0xc>)
 800541e:	4601      	mov	r1, r0
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	f000 b80b 	b.w	800543c <_free_r>
 8005426:	bf00      	nop
 8005428:	20000188 	.word	0x20000188

0800542c <memset>:
 800542c:	4402      	add	r2, r0
 800542e:	4603      	mov	r3, r0
 8005430:	4293      	cmp	r3, r2
 8005432:	d100      	bne.n	8005436 <memset+0xa>
 8005434:	4770      	bx	lr
 8005436:	f803 1b01 	strb.w	r1, [r3], #1
 800543a:	e7f9      	b.n	8005430 <memset+0x4>

0800543c <_free_r>:
 800543c:	b538      	push	{r3, r4, r5, lr}
 800543e:	4605      	mov	r5, r0
 8005440:	2900      	cmp	r1, #0
 8005442:	d045      	beq.n	80054d0 <_free_r+0x94>
 8005444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005448:	1f0c      	subs	r4, r1, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	bfb8      	it	lt
 800544e:	18e4      	addlt	r4, r4, r3
 8005450:	f000 f8ac 	bl	80055ac <__malloc_lock>
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <_free_r+0x98>)
 8005456:	6813      	ldr	r3, [r2, #0]
 8005458:	4610      	mov	r0, r2
 800545a:	b933      	cbnz	r3, 800546a <_free_r+0x2e>
 800545c:	6063      	str	r3, [r4, #4]
 800545e:	6014      	str	r4, [r2, #0]
 8005460:	4628      	mov	r0, r5
 8005462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005466:	f000 b8a2 	b.w	80055ae <__malloc_unlock>
 800546a:	42a3      	cmp	r3, r4
 800546c:	d90c      	bls.n	8005488 <_free_r+0x4c>
 800546e:	6821      	ldr	r1, [r4, #0]
 8005470:	1862      	adds	r2, r4, r1
 8005472:	4293      	cmp	r3, r2
 8005474:	bf04      	itt	eq
 8005476:	681a      	ldreq	r2, [r3, #0]
 8005478:	685b      	ldreq	r3, [r3, #4]
 800547a:	6063      	str	r3, [r4, #4]
 800547c:	bf04      	itt	eq
 800547e:	1852      	addeq	r2, r2, r1
 8005480:	6022      	streq	r2, [r4, #0]
 8005482:	6004      	str	r4, [r0, #0]
 8005484:	e7ec      	b.n	8005460 <_free_r+0x24>
 8005486:	4613      	mov	r3, r2
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	b10a      	cbz	r2, 8005490 <_free_r+0x54>
 800548c:	42a2      	cmp	r2, r4
 800548e:	d9fa      	bls.n	8005486 <_free_r+0x4a>
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	1858      	adds	r0, r3, r1
 8005494:	42a0      	cmp	r0, r4
 8005496:	d10b      	bne.n	80054b0 <_free_r+0x74>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	4401      	add	r1, r0
 800549c:	1858      	adds	r0, r3, r1
 800549e:	4282      	cmp	r2, r0
 80054a0:	6019      	str	r1, [r3, #0]
 80054a2:	d1dd      	bne.n	8005460 <_free_r+0x24>
 80054a4:	6810      	ldr	r0, [r2, #0]
 80054a6:	6852      	ldr	r2, [r2, #4]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	4401      	add	r1, r0
 80054ac:	6019      	str	r1, [r3, #0]
 80054ae:	e7d7      	b.n	8005460 <_free_r+0x24>
 80054b0:	d902      	bls.n	80054b8 <_free_r+0x7c>
 80054b2:	230c      	movs	r3, #12
 80054b4:	602b      	str	r3, [r5, #0]
 80054b6:	e7d3      	b.n	8005460 <_free_r+0x24>
 80054b8:	6820      	ldr	r0, [r4, #0]
 80054ba:	1821      	adds	r1, r4, r0
 80054bc:	428a      	cmp	r2, r1
 80054be:	bf04      	itt	eq
 80054c0:	6811      	ldreq	r1, [r2, #0]
 80054c2:	6852      	ldreq	r2, [r2, #4]
 80054c4:	6062      	str	r2, [r4, #4]
 80054c6:	bf04      	itt	eq
 80054c8:	1809      	addeq	r1, r1, r0
 80054ca:	6021      	streq	r1, [r4, #0]
 80054cc:	605c      	str	r4, [r3, #4]
 80054ce:	e7c7      	b.n	8005460 <_free_r+0x24>
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
 80054d2:	bf00      	nop
 80054d4:	2000045c 	.word	0x2000045c

080054d8 <_malloc_r>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	1ccd      	adds	r5, r1, #3
 80054dc:	f025 0503 	bic.w	r5, r5, #3
 80054e0:	3508      	adds	r5, #8
 80054e2:	2d0c      	cmp	r5, #12
 80054e4:	bf38      	it	cc
 80054e6:	250c      	movcc	r5, #12
 80054e8:	2d00      	cmp	r5, #0
 80054ea:	4606      	mov	r6, r0
 80054ec:	db01      	blt.n	80054f2 <_malloc_r+0x1a>
 80054ee:	42a9      	cmp	r1, r5
 80054f0:	d903      	bls.n	80054fa <_malloc_r+0x22>
 80054f2:	230c      	movs	r3, #12
 80054f4:	6033      	str	r3, [r6, #0]
 80054f6:	2000      	movs	r0, #0
 80054f8:	bd70      	pop	{r4, r5, r6, pc}
 80054fa:	f000 f857 	bl	80055ac <__malloc_lock>
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <_malloc_r+0xac>)
 8005500:	6814      	ldr	r4, [r2, #0]
 8005502:	4621      	mov	r1, r4
 8005504:	b991      	cbnz	r1, 800552c <_malloc_r+0x54>
 8005506:	4c20      	ldr	r4, [pc, #128]	; (8005588 <_malloc_r+0xb0>)
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	b91b      	cbnz	r3, 8005514 <_malloc_r+0x3c>
 800550c:	4630      	mov	r0, r6
 800550e:	f000 f83d 	bl	800558c <_sbrk_r>
 8005512:	6020      	str	r0, [r4, #0]
 8005514:	4629      	mov	r1, r5
 8005516:	4630      	mov	r0, r6
 8005518:	f000 f838 	bl	800558c <_sbrk_r>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d124      	bne.n	800556a <_malloc_r+0x92>
 8005520:	230c      	movs	r3, #12
 8005522:	6033      	str	r3, [r6, #0]
 8005524:	4630      	mov	r0, r6
 8005526:	f000 f842 	bl	80055ae <__malloc_unlock>
 800552a:	e7e4      	b.n	80054f6 <_malloc_r+0x1e>
 800552c:	680b      	ldr	r3, [r1, #0]
 800552e:	1b5b      	subs	r3, r3, r5
 8005530:	d418      	bmi.n	8005564 <_malloc_r+0x8c>
 8005532:	2b0b      	cmp	r3, #11
 8005534:	d90f      	bls.n	8005556 <_malloc_r+0x7e>
 8005536:	600b      	str	r3, [r1, #0]
 8005538:	50cd      	str	r5, [r1, r3]
 800553a:	18cc      	adds	r4, r1, r3
 800553c:	4630      	mov	r0, r6
 800553e:	f000 f836 	bl	80055ae <__malloc_unlock>
 8005542:	f104 000b 	add.w	r0, r4, #11
 8005546:	1d23      	adds	r3, r4, #4
 8005548:	f020 0007 	bic.w	r0, r0, #7
 800554c:	1ac3      	subs	r3, r0, r3
 800554e:	d0d3      	beq.n	80054f8 <_malloc_r+0x20>
 8005550:	425a      	negs	r2, r3
 8005552:	50e2      	str	r2, [r4, r3]
 8005554:	e7d0      	b.n	80054f8 <_malloc_r+0x20>
 8005556:	428c      	cmp	r4, r1
 8005558:	684b      	ldr	r3, [r1, #4]
 800555a:	bf16      	itet	ne
 800555c:	6063      	strne	r3, [r4, #4]
 800555e:	6013      	streq	r3, [r2, #0]
 8005560:	460c      	movne	r4, r1
 8005562:	e7eb      	b.n	800553c <_malloc_r+0x64>
 8005564:	460c      	mov	r4, r1
 8005566:	6849      	ldr	r1, [r1, #4]
 8005568:	e7cc      	b.n	8005504 <_malloc_r+0x2c>
 800556a:	1cc4      	adds	r4, r0, #3
 800556c:	f024 0403 	bic.w	r4, r4, #3
 8005570:	42a0      	cmp	r0, r4
 8005572:	d005      	beq.n	8005580 <_malloc_r+0xa8>
 8005574:	1a21      	subs	r1, r4, r0
 8005576:	4630      	mov	r0, r6
 8005578:	f000 f808 	bl	800558c <_sbrk_r>
 800557c:	3001      	adds	r0, #1
 800557e:	d0cf      	beq.n	8005520 <_malloc_r+0x48>
 8005580:	6025      	str	r5, [r4, #0]
 8005582:	e7db      	b.n	800553c <_malloc_r+0x64>
 8005584:	2000045c 	.word	0x2000045c
 8005588:	20000460 	.word	0x20000460

0800558c <_sbrk_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4c06      	ldr	r4, [pc, #24]	; (80055a8 <_sbrk_r+0x1c>)
 8005590:	2300      	movs	r3, #0
 8005592:	4605      	mov	r5, r0
 8005594:	4608      	mov	r0, r1
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	f7fc f8be 	bl	8001718 <_sbrk>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_sbrk_r+0x1a>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_sbrk_r+0x1a>
 80055a4:	602b      	str	r3, [r5, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	200005fc 	.word	0x200005fc

080055ac <__malloc_lock>:
 80055ac:	4770      	bx	lr

080055ae <__malloc_unlock>:
 80055ae:	4770      	bx	lr

080055b0 <_init>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	bf00      	nop
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr

080055bc <_fini>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr
