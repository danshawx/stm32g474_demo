
stm32g474re_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003724  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08003954  08003954  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003954  08003954  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003958  08003958  00013958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800395c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000017c  08003ad8  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08003ad8  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e756  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002804  00000000  00000000  0002e902  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  00031108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  00031d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283ad  00000000  00000000  00032890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb50  00000000  00000000  0005ac3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0a6c  00000000  00000000  0006778d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001581f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030d8  00000000  00000000  00158274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000017c 	.word	0x2000017c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080038e4 	.word	0x080038e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000180 	.word	0x20000180
 8000214:	080038e4 	.word	0x080038e4

08000218 <Comm_Unpack_Fun>:
#include "main.h"


uint32_t Comm_Unpack_Fun(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	//uint16_t unpack_cnt = 0;
	uint8_t u8_rxdata = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
	//static uint8_t unpack_phase = 0;

	while (!is_DeCirqueempty(p_usartrxque)) // || (unpack_cnt ++ < CONFIG_USART_RXQUE_MAXLEN))
 8000222:	e006      	b.n	8000232 <Comm_Unpack_Fun+0x1a>
	{
		if (1 == DeCirque_pop(p_usartrxque,&u8_rxdata, 1))
 8000224:	4b09      	ldr	r3, [pc, #36]	; (800024c <Comm_Unpack_Fun+0x34>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	1df9      	adds	r1, r7, #7
 800022a:	2201      	movs	r2, #1
 800022c:	4618      	mov	r0, r3
 800022e:	f000 fdbf 	bl	8000db0 <DeCirque_pop>
	while (!is_DeCirqueempty(p_usartrxque)) // || (unpack_cnt ++ < CONFIG_USART_RXQUE_MAXLEN))
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <Comm_Unpack_Fun+0x34>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4618      	mov	r0, r3
 8000238:	f000 fda4 	bl	8000d84 <is_DeCirqueempty>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f0      	beq.n	8000224 <Comm_Unpack_Fun+0xc>

			}*/

		}
	}
}
 8000242:	bf00      	nop
 8000244:	4618      	mov	r0, r3
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	200001dc 	.word	0x200001dc

08000250 <Comm_Recv_Process>:
#include "main.h"

T_Comm_Test_Send g_tComm_Test_Send = {0};

static void Comm_Recv_Process(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	if (SUCCESS == Comm_Unpack_Fun())
 8000254:	f7ff ffe0 	bl	8000218 <Comm_Unpack_Fun>
	{

	}
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}

0800025c <Comm_Tra_Procecss>:

static void Comm_Tra_Procecss(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
	//uint8_t i = 0;
	//uint16_t tx_crc16 = 0;
	T_Comm_Test_Send *p_tComm_Test_Send = (T_Comm_Test_Send *)g_aUsartTxBuf;
 8000262:	4b1d      	ldr	r3, [pc, #116]	; (80002d8 <Comm_Tra_Procecss+0x7c>)
 8000264:	607b      	str	r3, [r7, #4]

	p_tComm_Test_Send->g_tHeadTestSend.head_start = 0xFF;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	701a      	strb	r2, [r3, #0]
	p_tComm_Test_Send->g_tHeadTestSend.head_traid = 0x01;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2201      	movs	r2, #1
 8000270:	705a      	strb	r2, [r3, #1]
	p_tComm_Test_Send->g_tHeadTestSend.head_recid = 0x02;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2202      	movs	r2, #2
 8000276:	709a      	strb	r2, [r3, #2]
	p_tComm_Test_Send->g_tHeadTestSend.head_protoltype = 0xE1;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	22e1      	movs	r2, #225	; 0xe1
 800027c:	70da      	strb	r2, [r3, #3]
	p_tComm_Test_Send->g_tHeadTestSend.frame_cnt = 0x01;
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2201      	movs	r2, #1
 8000282:	711a      	strb	r2, [r3, #4]
	p_tComm_Test_Send->g_tHeadTestSend.head_crc = crc_8(p_tComm_Test_Send, CONFIG_COMMUSART_HEAD_LEN-1);
 8000284:	2105      	movs	r1, #5
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f003 fa06 	bl	8003698 <crc_8>
 800028c:	4603      	mov	r3, r0
 800028e:	461a      	mov	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	715a      	strb	r2, [r3, #5]

	p_tComm_Test_Send->g_tFrameTestSend.frame_start = 0xFE;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	22fe      	movs	r2, #254	; 0xfe
 8000298:	719a      	strb	r2, [r3, #6]
	p_tComm_Test_Send->g_tFrameTestSend.frame_len   = 6;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2206      	movs	r2, #6
 800029e:	71da      	strb	r2, [r3, #7]
	p_tComm_Test_Send->g_tFrameTestSend.frame_func  = 0xd9;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	22d9      	movs	r2, #217	; 0xd9
 80002a4:	721a      	strb	r2, [r3, #8]
	p_tComm_Test_Send->g_tFrameTestSend.frame_dates[0] = 10;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	220a      	movs	r2, #10
 80002aa:	725a      	strb	r2, [r3, #9]
	p_tComm_Test_Send->g_tFrameTestSend.frame_dates[1] = 11;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	220b      	movs	r2, #11
 80002b0:	729a      	strb	r2, [r3, #10]

	//crc to do
	p_tComm_Test_Send->g_tFrameTestSend.fram_crc = crc_16(&p_tComm_Test_Send->g_tFrameTestSend, CONFIG_COMMUSART_DATA_LEN-1);
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3306      	adds	r3, #6
 80002b6:	2106      	movs	r1, #6
 80002b8:	4618      	mov	r0, r3
 80002ba:	f003 f973 	bl	80035a4 <crc_16>
 80002be:	4603      	mov	r3, r0
 80002c0:	461a      	mov	r2, r3
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f8a3 200b 	strh.w	r2, [r3, #11]

	Comm_Tx_Hal((uint8_t *)p_tComm_Test_Send, sizeof(g_tComm_Test_Send));
 80002c8:	210d      	movs	r1, #13
 80002ca:	6878      	ldr	r0, [r7, #4]
 80002cc:	f000 fbd2 	bl	8000a74 <Comm_Tx_Hal>
}
 80002d0:	bf00      	nop
 80002d2:	3708      	adds	r7, #8
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	200001b8 	.word	0x200001b8

080002dc <Comm_Task>:

void Comm_Task(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	Comm_Recv_Process();
 80002e0:	f7ff ffb6 	bl	8000250 <Comm_Recv_Process>
	Comm_Tra_Procecss();
 80002e4:	f7ff ffba 	bl	800025c <Comm_Tra_Procecss>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}

080002ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <__NVIC_GetPriorityGrouping+0x18>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	0a1b      	lsrs	r3, r3, #8
 80002f6:	f003 0307 	and.w	r3, r3, #7
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	e000ed00 	.word	0xe000ed00

08000308 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	4603      	mov	r3, r0
 8000310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	2b00      	cmp	r3, #0
 8000318:	db0b      	blt.n	8000332 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	f003 021f 	and.w	r2, r3, #31
 8000320:	4907      	ldr	r1, [pc, #28]	; (8000340 <__NVIC_EnableIRQ+0x38>)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	095b      	lsrs	r3, r3, #5
 8000328:	2001      	movs	r0, #1
 800032a:	fa00 f202 	lsl.w	r2, r0, r2
 800032e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000e100 	.word	0xe000e100

08000344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	6039      	str	r1, [r7, #0]
 800034e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	db0a      	blt.n	800036e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	b2da      	uxtb	r2, r3
 800035c:	490c      	ldr	r1, [pc, #48]	; (8000390 <__NVIC_SetPriority+0x4c>)
 800035e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000362:	0112      	lsls	r2, r2, #4
 8000364:	b2d2      	uxtb	r2, r2
 8000366:	440b      	add	r3, r1
 8000368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800036c:	e00a      	b.n	8000384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	b2da      	uxtb	r2, r3
 8000372:	4908      	ldr	r1, [pc, #32]	; (8000394 <__NVIC_SetPriority+0x50>)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	f003 030f 	and.w	r3, r3, #15
 800037a:	3b04      	subs	r3, #4
 800037c:	0112      	lsls	r2, r2, #4
 800037e:	b2d2      	uxtb	r2, r2
 8000380:	440b      	add	r3, r1
 8000382:	761a      	strb	r2, [r3, #24]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	e000e100 	.word	0xe000e100
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000398:	b480      	push	{r7}
 800039a:	b089      	sub	sp, #36	; 0x24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f003 0307 	and.w	r3, r3, #7
 80003aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ac:	69fb      	ldr	r3, [r7, #28]
 80003ae:	f1c3 0307 	rsb	r3, r3, #7
 80003b2:	2b04      	cmp	r3, #4
 80003b4:	bf28      	it	cs
 80003b6:	2304      	movcs	r3, #4
 80003b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3304      	adds	r3, #4
 80003be:	2b06      	cmp	r3, #6
 80003c0:	d902      	bls.n	80003c8 <NVIC_EncodePriority+0x30>
 80003c2:	69fb      	ldr	r3, [r7, #28]
 80003c4:	3b03      	subs	r3, #3
 80003c6:	e000      	b.n	80003ca <NVIC_EncodePriority+0x32>
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	fa02 f303 	lsl.w	r3, r2, r3
 80003d6:	43da      	mvns	r2, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	401a      	ands	r2, r3
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	43d9      	mvns	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f0:	4313      	orrs	r3, r2
         );
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800040a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800040c:	4907      	ldr	r1, [pc, #28]	; (800042c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4313      	orrs	r3, r2
 8000412:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000416:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4013      	ands	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000

08000430 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8000434:	2004      	movs	r0, #4
 8000436:	f7ff ffe3 	bl	8000400 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800043a:	2001      	movs	r0, #1
 800043c:	f7ff ffe0 	bl	8000400 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000440:	f7ff ff54 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000444:	4603      	mov	r3, r0
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff ffa4 	bl	8000398 <NVIC_EncodePriority>
 8000450:	4603      	mov	r3, r0
 8000452:	4619      	mov	r1, r3
 8000454:	200c      	movs	r0, #12
 8000456:	f7ff ff75 	bl	8000344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff54 	bl	8000308 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000460:	f7ff ff44 	bl	80002ec <__NVIC_GetPriorityGrouping>
 8000464:	4603      	mov	r3, r0
 8000466:	2200      	movs	r2, #0
 8000468:	2100      	movs	r1, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff94 	bl	8000398 <NVIC_EncodePriority>
 8000470:	4603      	mov	r3, r0
 8000472:	4619      	mov	r1, r3
 8000474:	200d      	movs	r0, #13
 8000476:	f7ff ff65 	bl	8000344 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800047a:	200d      	movs	r0, #13
 800047c:	f7ff ff44 	bl	8000308 <__NVIC_EnableIRQ>

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}

08000484 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000484:	b480      	push	{r7}
 8000486:	b085      	sub	sp, #20
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800048e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000490:	4907      	ldr	r1, [pc, #28]	; (80004b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4313      	orrs	r3, r2
 8000496:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800049a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4013      	ands	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a2:	68fb      	ldr	r3, [r7, #12]
}
 80004a4:	bf00      	nop
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr
 80004b0:	40021000 	.word	0x40021000

080004b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80004b8:	2004      	movs	r0, #4
 80004ba:	f7ff ffe3 	bl	8000484 <LL_AHB2_GRP1_EnableClock>

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80004d2:	4a0c      	ldr	r2, [pc, #48]	; (8000504 <LL_DMA_EnableChannel+0x40>)
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	4413      	add	r3, r2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	461a      	mov	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4413      	add	r3, r2
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4908      	ldr	r1, [pc, #32]	; (8000504 <LL_DMA_EnableChannel+0x40>)
 80004e4:	683a      	ldr	r2, [r7, #0]
 80004e6:	440a      	add	r2, r1
 80004e8:	7812      	ldrb	r2, [r2, #0]
 80004ea:	4611      	mov	r1, r2
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	440a      	add	r2, r1
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	080038fc 	.word	0x080038fc

08000508 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <LL_DMA_DisableChannel+0x40>)
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	4413      	add	r3, r2
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	4413      	add	r3, r2
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4908      	ldr	r1, [pc, #32]	; (8000548 <LL_DMA_DisableChannel+0x40>)
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	440a      	add	r2, r1
 800052c:	7812      	ldrb	r2, [r2, #0]
 800052e:	4611      	mov	r1, r2
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	440a      	add	r2, r1
 8000534:	f023 0301 	bic.w	r3, r3, #1
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	080038fc 	.word	0x080038fc

0800054c <LL_DMA_IsEnabledChannel>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <LL_DMA_IsEnabledChannel+0x38>)
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	4413      	add	r3, r2
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4413      	add	r3, r2
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800056e:	2b01      	cmp	r3, #1
 8000570:	d101      	bne.n	8000576 <LL_DMA_IsEnabledChannel+0x2a>
 8000572:	2301      	movs	r3, #1
 8000574:	e000      	b.n	8000578 <LL_DMA_IsEnabledChannel+0x2c>
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	080038fc 	.word	0x080038fc

08000588 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <LL_DMA_GetDataTransferDirection+0x30>)
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	4413      	add	r3, r2
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f244 0310 	movw	r3, #16400	; 0x4010
 80005aa:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	080038fc 	.word	0x080038fc

080005bc <LL_DMA_SetDataLength>:
  *         (*) Not on all G4 devices
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <LL_DMA_SetDataLength+0x48>)
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	4413      	add	r3, r2
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	0c1b      	lsrs	r3, r3, #16
 80005de:	041b      	lsls	r3, r3, #16
 80005e0:	4908      	ldr	r1, [pc, #32]	; (8000604 <LL_DMA_SetDataLength+0x48>)
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	440a      	add	r2, r1
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	4611      	mov	r1, r2
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	440a      	add	r2, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80005f6:	bf00      	nop
 80005f8:	371c      	adds	r7, #28
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	080038fc 	.word	0x080038fc

08000608 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8000616:	4a07      	ldr	r2, [pc, #28]	; (8000634 <LL_DMA_GetDataLength+0x2c>)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8000628:	4618      	mov	r0, r3
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	080038fc 	.word	0x080038fc

08000638 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000638:	b480      	push	{r7}
 800063a:	b087      	sub	sp, #28
 800063c:	af00      	add	r7, sp, #0
 800063e:	60f8      	str	r0, [r7, #12]
 8000640:	60b9      	str	r1, [r7, #8]
 8000642:	607a      	str	r2, [r7, #4]
 8000644:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	617b      	str	r3, [r7, #20]

  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800064a:	6a3b      	ldr	r3, [r7, #32]
 800064c:	2b10      	cmp	r3, #16
 800064e:	d114      	bne.n	800067a <LL_DMA_ConfigAddresses+0x42>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <LL_DMA_ConfigAddresses+0x78>)
 8000652:	68bb      	ldr	r3, [r7, #8]
 8000654:	4413      	add	r3, r2
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	461a      	mov	r2, r3
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	4413      	add	r3, r2
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <LL_DMA_ConfigAddresses+0x78>)
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	4413      	add	r3, r2
 8000672:	461a      	mov	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
  }
}
 8000678:	e013      	b.n	80006a2 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 800067a:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LL_DMA_ConfigAddresses+0x78>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	4413      	add	r3, r2
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	4413      	add	r3, r2
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <LL_DMA_ConfigAddresses+0x78>)
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	4413      	add	r3, r2
 800069c:	461a      	mov	r2, r3
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	60d3      	str	r3, [r2, #12]
}
 80006a2:	bf00      	nop
 80006a4:	371c      	adds	r7, #28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	080038fc 	.word	0x080038fc

080006b4 <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 0320 	and.w	r3, r3, #32
 80006c4:	2b20      	cmp	r3, #32
 80006c6:	d101      	bne.n	80006cc <LL_DMA_IsActiveFlag_TC2+0x18>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <LL_DMA_IsActiveFlag_TC2+0x1a>
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ee:	d101      	bne.n	80006f4 <LL_DMA_IsActiveFlag_TC3+0x1a>
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <LL_DMA_IsActiveFlag_TC3+0x1c>
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000712:	2b80      	cmp	r3, #128	; 0x80
 8000714:	d101      	bne.n	800071a <LL_DMA_IsActiveFlag_TE2+0x18>
 8000716:	2301      	movs	r3, #1
 8000718:	e000      	b.n	800071c <LL_DMA_IsActiveFlag_TE2+0x1a>
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <LL_DMA_IsActiveFlag_TE3>:
  * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000738:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800073c:	d101      	bne.n	8000742 <LL_DMA_IsActiveFlag_TE3+0x1a>
 800073e:	2301      	movs	r3, #1
 8000740:	e000      	b.n	8000744 <LL_DMA_IsActiveFlag_TE3+0x1c>
 8000742:	2300      	movs	r3, #0
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_DMA_ClearFlag_GI2>:
  * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2210      	movs	r2, #16
 800075c:	605a      	str	r2, [r3, #4]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000778:	605a      	str	r2, [r3, #4]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 8000786:	b480      	push	{r7}
 8000788:	b083      	sub	sp, #12
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2280      	movs	r2, #128	; 0x80
 8000792:	605a      	str	r2, [r3, #4]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_DMA_ClearFlag_TE3>:
  * @rmtoll IFCR         CTEIF3        LL_DMA_ClearFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007ae:	605a      	str	r2, [r3, #4]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 80007ca:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <LL_DMA_EnableIT_TC+0x40>)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <LL_DMA_EnableIT_TC+0x40>)
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	440a      	add	r2, r1
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	4611      	mov	r1, r2
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	440a      	add	r2, r1
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	080038fc 	.word	0x080038fc

08000800 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <LL_DMA_EnableIT_TE+0x40>)
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	4413      	add	r3, r2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <LL_DMA_EnableIT_TE+0x40>)
 8000820:	683a      	ldr	r2, [r7, #0]
 8000822:	440a      	add	r2, r1
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	4611      	mov	r1, r2
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	440a      	add	r2, r1
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6013      	str	r3, [r2, #0]
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	080038fc 	.word	0x080038fc

08000844 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69db      	ldr	r3, [r3, #28]
 8000850:	f003 0310 	and.w	r3, r3, #16
 8000854:	2b10      	cmp	r3, #16
 8000856:	d101      	bne.n	800085c <LL_USART_IsActiveFlag_IDLE+0x18>
 8000858:	2301      	movs	r3, #1
 800085a:	e000      	b.n	800085e <LL_USART_IsActiveFlag_IDLE+0x1a>
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	2b40      	cmp	r3, #64	; 0x40
 800087c:	d101      	bne.n	8000882 <LL_USART_IsActiveFlag_TC+0x18>
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <LL_USART_IsActiveFlag_TC+0x1a>
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2210      	movs	r2, #16
 800089c:	621a      	str	r2, [r3, #32]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	621a      	str	r2, [r3, #32]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f043 0210 	orr.w	r2, r3, #16
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 0210 	bic.w	r2, r3, #16
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	601a      	str	r2, [r3, #0]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	609a      	str	r2, [r3, #8]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	609a      	str	r2, [r3, #8]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d103      	bne.n	800099c <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	3328      	adds	r3, #40	; 0x28
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	e002      	b.n	80009a2 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3324      	adds	r3, #36	; 0x24
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80009a2:	68fb      	ldr	r3, [r7, #12]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <Comm_BufInit_Hal>:

T_DeCirqueDate *p_usarttxque = NULL;
T_DeCirqueDate *p_usartrxque = NULL;

void Comm_BufInit_Hal(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
    p_usarttxque = DeCirque_init(CONFIG_USART_TXQUE_MAXLEN);
 80009b4:	205a      	movs	r0, #90	; 0x5a
 80009b6:	f000 fa94 	bl	8000ee2 <DeCirque_init>
 80009ba:	4602      	mov	r2, r0
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <Comm_BufInit_Hal+0x20>)
 80009be:	601a      	str	r2, [r3, #0]
    p_usartrxque = DeCirque_init(CONFIG_USART_RXQUE_MAXLEN);
 80009c0:	203c      	movs	r0, #60	; 0x3c
 80009c2:	f000 fa8e 	bl	8000ee2 <DeCirque_init>
 80009c6:	4602      	mov	r2, r0
 80009c8:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <Comm_BufInit_Hal+0x24>)
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200001d8 	.word	0x200001d8
 80009d4:	200001dc 	.word	0x200001dc

080009d8 <Comm_DMAUconf_Hal>:

void Comm_DMAUconf_Hal(void)
{
 80009d8:	b5b0      	push	{r4, r5, r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af02      	add	r7, sp, #8
    /* (3) Configure the DMA functional parameters for transmission */
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 80009de:	4c21      	ldr	r4, [pc, #132]	; (8000a64 <Comm_DMAUconf_Hal+0x8c>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4821      	ldr	r0, [pc, #132]	; (8000a68 <Comm_DMAUconf_Hal+0x90>)
 80009e4:	f7ff ffce 	bl	8000984 <LL_USART_DMA_GetRegAddr>
 80009e8:	4605      	mov	r5, r0
 80009ea:	2101      	movs	r1, #1
 80009ec:	481f      	ldr	r0, [pc, #124]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 80009ee:	f7ff fdcb 	bl	8000588 <LL_DMA_GetDataTransferDirection>
 80009f2:	4603      	mov	r3, r0
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	462b      	mov	r3, r5
 80009f8:	4622      	mov	r2, r4
 80009fa:	2101      	movs	r1, #1
 80009fc:	481b      	ldr	r0, [pc, #108]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 80009fe:	f7ff fe1b 	bl	8000638 <LL_DMA_ConfigAddresses>
                           (uint32_t)g_aTXDMABuf,
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT),
                           LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, CONFIG_USARTDMA_TX_MAXLEN);
 8000a02:	220a      	movs	r2, #10
 8000a04:	2101      	movs	r1, #1
 8000a06:	4819      	ldr	r0, [pc, #100]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 8000a08:	f7ff fdd8 	bl	80005bc <LL_DMA_SetDataLength>

    /* (4) Configure the DMA functional parameters for reception */

    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3,
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4816      	ldr	r0, [pc, #88]	; (8000a68 <Comm_DMAUconf_Hal+0x90>)
 8000a10:	f7ff ffb8 	bl	8000984 <LL_USART_DMA_GetRegAddr>
 8000a14:	4605      	mov	r5, r0
 8000a16:	4c16      	ldr	r4, [pc, #88]	; (8000a70 <Comm_DMAUconf_Hal+0x98>)
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4814      	ldr	r0, [pc, #80]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 8000a1c:	f7ff fdb4 	bl	8000588 <LL_DMA_GetDataTransferDirection>
 8000a20:	4603      	mov	r3, r0
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4623      	mov	r3, r4
 8000a26:	462a      	mov	r2, r5
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4810      	ldr	r0, [pc, #64]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 8000a2c:	f7ff fe04 	bl	8000638 <LL_DMA_ConfigAddresses>
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
                           (uint32_t)g_aRXDMABuf,
                           LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3));
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, CONFIG_USARTDMA_RX_MAXLEN);
 8000a30:	2214      	movs	r2, #20
 8000a32:	2102      	movs	r1, #2
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 8000a36:	f7ff fdc1 	bl	80005bc <LL_DMA_SetDataLength>

    /* (5) Enable DMA transfer complete/error interrupts  */
    //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 8000a3e:	f7ff fedf 	bl	8000800 <LL_DMA_EnableIT_TE>
    //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_3);
 8000a42:	2102      	movs	r1, #2
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 8000a46:	f7ff fedb 	bl	8000800 <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART1);
 8000a4a:	4807      	ldr	r0, [pc, #28]	; (8000a68 <Comm_DMAUconf_Hal+0x90>)
 8000a4c:	f7ff ff7a 	bl	8000944 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000a50:	2102      	movs	r1, #2
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <Comm_DMAUconf_Hal+0x94>)
 8000a54:	f7ff fd36 	bl	80004c4 <LL_DMA_EnableChannel>

    LL_USART_EnableIT_IDLE(USART1);
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <Comm_DMAUconf_Hal+0x90>)
 8000a5a:	f7ff ff33 	bl	80008c4 <LL_USART_EnableIT_IDLE>

}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}
 8000a64:	20000198 	.word	0x20000198
 8000a68:	40013800 	.word	0x40013800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	200001a4 	.word	0x200001a4

08000a74 <Comm_Tx_Hal>:

void Comm_Tx_Hal(uint8_t *p_txbuf, uint8_t tx_len)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_dmalen = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73fb      	strb	r3, [r7, #15]

    DeCirque_push(p_usarttxque, p_txbuf, tx_len);
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <Comm_Tx_Hal+0x78>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	78fa      	ldrb	r2, [r7, #3]
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f9d5 	bl	8000e3c <DeCirque_push>
    if (!LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_2))
 8000a92:	2101      	movs	r1, #1
 8000a94:	4816      	ldr	r0, [pc, #88]	; (8000af0 <Comm_Tx_Hal+0x7c>)
 8000a96:	f7ff fd59 	bl	800054c <LL_DMA_IsEnabledChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d121      	bne.n	8000ae4 <Comm_Tx_Hal+0x70>
    {
        tx_dmalen = (p_usarttxque->size < CONFIG_USARTDMA_TX_MAXLEN) ? p_usarttxque->size : CONFIG_USARTDMA_TX_MAXLEN;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <Comm_Tx_Hal+0x78>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	bfa8      	it	ge
 8000aaa:	230a      	movge	r3, #10
 8000aac:	73fb      	strb	r3, [r7, #15]
        if (1 == DeCirque_pop(p_usarttxque, g_aTXDMABuf, tx_dmalen))
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <Comm_Tx_Hal+0x78>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	7bfa      	ldrb	r2, [r7, #15]
 8000ab4:	490f      	ldr	r1, [pc, #60]	; (8000af4 <Comm_Tx_Hal+0x80>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f97a 	bl	8000db0 <DeCirque_pop>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d110      	bne.n	8000ae4 <Comm_Tx_Hal+0x70>
        {
        	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4809      	ldr	r0, [pc, #36]	; (8000af0 <Comm_Tx_Hal+0x7c>)
 8000aca:	f7ff fd77 	bl	80005bc <LL_DMA_SetDataLength>
        	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 8000ace:	2101      	movs	r1, #1
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <Comm_Tx_Hal+0x7c>)
 8000ad2:	f7ff fe73 	bl	80007bc <LL_DMA_EnableIT_TC>
            LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <Comm_Tx_Hal+0x7c>)
 8000ada:	f7ff fcf3 	bl	80004c4 <LL_DMA_EnableChannel>
            LL_USART_EnableDMAReq_TX(USART1);
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <Comm_Tx_Hal+0x84>)
 8000ae0:	f7ff ff40 	bl	8000964 <LL_USART_EnableDMAReq_TX>
        }
    }
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200001d8 	.word	0x200001d8
 8000af0:	40020000 	.word	0x40020000
 8000af4:	20000198 	.word	0x20000198
 8000af8:	40013800 	.word	0x40013800

08000afc <DMA1_ReceiveComplete_Callback>:


//******************** handler ***********************
static void DMA1_ReceiveComplete_Callback(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
	uint8_t rx_dmalen = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]

	//LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_3);
	//LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000b06:	2102      	movs	r1, #2
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000b0a:	f7ff fcfd 	bl	8000508 <LL_DMA_DisableChannel>

	rx_dmalen = CONFIG_USARTDMA_RX_MAXLEN - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 8000b0e:	2102      	movs	r1, #2
 8000b10:	480d      	ldr	r0, [pc, #52]	; (8000b48 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000b12:	f7ff fd79 	bl	8000608 <LL_DMA_GetDataLength>
 8000b16:	4603      	mov	r3, r0
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f1c3 0314 	rsb	r3, r3, #20
 8000b1e:	71fb      	strb	r3, [r7, #7]
	DeCirque_push(p_usartrxque, g_aRXDMABuf, rx_dmalen);
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <DMA1_ReceiveComplete_Callback+0x50>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	490a      	ldr	r1, [pc, #40]	; (8000b50 <DMA1_ReceiveComplete_Callback+0x54>)
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f987 	bl	8000e3c <DeCirque_push>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, CONFIG_USARTDMA_RX_MAXLEN);
 8000b2e:	2214      	movs	r2, #20
 8000b30:	2102      	movs	r1, #2
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000b34:	f7ff fd42 	bl	80005bc <LL_DMA_SetDataLength>

	//LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4803      	ldr	r0, [pc, #12]	; (8000b48 <DMA1_ReceiveComplete_Callback+0x4c>)
 8000b3c:	f7ff fcc2 	bl	80004c4 <LL_DMA_EnableChannel>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	200001dc 	.word	0x200001dc
 8000b50:	200001a4 	.word	0x200001a4

08000b54 <Comm_DMA_CHAN2_Handler>:

void Comm_DMA_CHAN2_Handler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    if(LL_DMA_IsActiveFlag_TC2(DMA1))
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <Comm_DMA_CHAN2_Handler+0x34>)
 8000b5a:	f7ff fdab 	bl	80006b4 <LL_DMA_IsActiveFlag_TC2>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <Comm_DMA_CHAN2_Handler+0x1e>
    {
        LL_DMA_ClearFlag_GI2(DMA1);
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <Comm_DMA_CHAN2_Handler+0x34>)
 8000b66:	f7ff fdf3 	bl	8000750 <LL_DMA_ClearFlag_GI2>
        /* Call function Transmission complete Callback */
        //DMA1_TransmitComplete_Callback();
        LL_USART_EnableIT_TC(USART1);
 8000b6a:	4808      	ldr	r0, [pc, #32]	; (8000b8c <Comm_DMA_CHAN2_Handler+0x38>)
 8000b6c:	f7ff feba 	bl	80008e4 <LL_USART_EnableIT_TC>
//    {
//    	LL_DMA_ClearFlag_TE3(DMA1);
//        /* Call Error function */
//        //USART_TransferError_Callback();
//    }
}
 8000b70:	e008      	b.n	8000b84 <Comm_DMA_CHAN2_Handler+0x30>
    else if(LL_DMA_IsActiveFlag_TE2(DMA1))
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <Comm_DMA_CHAN2_Handler+0x34>)
 8000b74:	f7ff fdc5 	bl	8000702 <LL_DMA_IsActiveFlag_TE2>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <Comm_DMA_CHAN2_Handler+0x30>
    	LL_DMA_ClearFlag_TE2(DMA1);
 8000b7e:	4802      	ldr	r0, [pc, #8]	; (8000b88 <Comm_DMA_CHAN2_Handler+0x34>)
 8000b80:	f7ff fe01 	bl	8000786 <LL_DMA_ClearFlag_TE2>
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40013800 	.word	0x40013800

08000b90 <Comm_DMA_CHAN3_Handler>:

void Comm_DMA_CHAN3_Handler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
//    {
//        /* Call Error function */
//        //USART_TransferError_Callback();
//    	LL_DMA_ClearFlag_TE2(DMA1);
//    }
    if(LL_DMA_IsActiveFlag_TC3(DMA1))
 8000b94:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <Comm_DMA_CHAN3_Handler+0x30>)
 8000b96:	f7ff fda0 	bl	80006da <LL_DMA_IsActiveFlag_TC3>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d003      	beq.n	8000ba8 <Comm_DMA_CHAN3_Handler+0x18>
    {
        LL_DMA_ClearFlag_GI3(DMA1);
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <Comm_DMA_CHAN3_Handler+0x30>)
 8000ba2:	f7ff fde2 	bl	800076a <LL_DMA_ClearFlag_GI3>
    {
    	LL_DMA_ClearFlag_TE3(DMA1);
        /* Call Error function */
        //USART_TransferError_Callback();
    }
}
 8000ba6:	e008      	b.n	8000bba <Comm_DMA_CHAN3_Handler+0x2a>
    else if(LL_DMA_IsActiveFlag_TE3(DMA1))
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <Comm_DMA_CHAN3_Handler+0x30>)
 8000baa:	f7ff fdbd 	bl	8000728 <LL_DMA_IsActiveFlag_TE3>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <Comm_DMA_CHAN3_Handler+0x2a>
    	LL_DMA_ClearFlag_TE3(DMA1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <Comm_DMA_CHAN3_Handler+0x30>)
 8000bb6:	f7ff fdf3 	bl	80007a0 <LL_DMA_ClearFlag_TE3>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020000 	.word	0x40020000

08000bc4 <Comm_USART1_TX_Handler>:

void Comm_USART1_TX_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
	 uint8_t tx_dmalen = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	71fb      	strb	r3, [r7, #7]

	if (is_DeCirqueempty(p_usarttxque))
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <Comm_USART1_TX_Handler+0x6c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f8d6 	bl	8000d84 <is_DeCirqueempty>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d004      	beq.n	8000be8 <Comm_USART1_TX_Handler+0x24>
	{
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000bde:	2101      	movs	r1, #1
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <Comm_USART1_TX_Handler+0x70>)
 8000be2:	f7ff fc91 	bl	8000508 <LL_DMA_DisableChannel>
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
			//LL_USART_EnableDMAReq_TX(USART1);
		}
	}
}
 8000be6:	e01e      	b.n	8000c26 <Comm_USART1_TX_Handler+0x62>
		tx_dmalen = (p_usarttxque->size < CONFIG_USARTDMA_TX_MAXLEN) ? p_usarttxque->size : CONFIG_USARTDMA_TX_MAXLEN;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <Comm_USART1_TX_Handler+0x6c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	2b0a      	cmp	r3, #10
 8000bf0:	bfa8      	it	ge
 8000bf2:	230a      	movge	r3, #10
 8000bf4:	71fb      	strb	r3, [r7, #7]
		if (1 == DeCirque_pop(p_usarttxque, g_aTXDMABuf, tx_dmalen))
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <Comm_USART1_TX_Handler+0x6c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	490e      	ldr	r1, [pc, #56]	; (8000c38 <Comm_USART1_TX_Handler+0x74>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f8d6 	bl	8000db0 <DeCirque_pop>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d10d      	bne.n	8000c26 <Comm_USART1_TX_Handler+0x62>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4809      	ldr	r0, [pc, #36]	; (8000c34 <Comm_USART1_TX_Handler+0x70>)
 8000c0e:	f7ff fc7b 	bl	8000508 <LL_DMA_DisableChannel>
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	461a      	mov	r2, r3
 8000c16:	2101      	movs	r1, #1
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <Comm_USART1_TX_Handler+0x70>)
 8000c1a:	f7ff fccf 	bl	80005bc <LL_DMA_SetDataLength>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	4804      	ldr	r0, [pc, #16]	; (8000c34 <Comm_USART1_TX_Handler+0x70>)
 8000c22:	f7ff fc4f 	bl	80004c4 <LL_DMA_EnableChannel>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001d8 	.word	0x200001d8
 8000c34:	40020000 	.word	0x40020000
 8000c38:	20000198 	.word	0x20000198

08000c3c <Comm_USART1_Handler>:

void Comm_USART1_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	if (LL_USART_IsActiveFlag_TC(USART1))
 8000c40:	4810      	ldr	r0, [pc, #64]	; (8000c84 <Comm_USART1_Handler+0x48>)
 8000c42:	f7ff fe12 	bl	800086a <LL_USART_IsActiveFlag_TC>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <Comm_USART1_Handler+0x20>
	{
		LL_USART_ClearFlag_TC(USART1);
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <Comm_USART1_Handler+0x48>)
 8000c4e:	f7ff fe2c 	bl	80008aa <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(USART1);
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <Comm_USART1_Handler+0x48>)
 8000c54:	f7ff fe66 	bl	8000924 <LL_USART_DisableIT_TC>
		Comm_USART1_TX_Handler();
 8000c58:	f7ff ffb4 	bl	8000bc4 <Comm_USART1_TX_Handler>
	}
	if (LL_USART_IsActiveFlag_IDLE(USART1))
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <Comm_USART1_Handler+0x48>)
 8000c5e:	f7ff fdf1 	bl	8000844 <LL_USART_IsActiveFlag_IDLE>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00a      	beq.n	8000c7e <Comm_USART1_Handler+0x42>
	{
		LL_USART_ClearFlag_IDLE(USART1);
 8000c68:	4806      	ldr	r0, [pc, #24]	; (8000c84 <Comm_USART1_Handler+0x48>)
 8000c6a:	f7ff fe11 	bl	8000890 <LL_USART_ClearFlag_IDLE>
		LL_USART_DisableIT_IDLE(USART1);
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <Comm_USART1_Handler+0x48>)
 8000c70:	f7ff fe48 	bl	8000904 <LL_USART_DisableIT_IDLE>
		DMA1_ReceiveComplete_Callback();
 8000c74:	f7ff ff42 	bl	8000afc <DMA1_ReceiveComplete_Callback>
		LL_USART_EnableIT_IDLE(USART1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <Comm_USART1_Handler+0x48>)
 8000c7a:	f7ff fe23 	bl	80008c4 <LL_USART_EnableIT_IDLE>
	}
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40013800 	.word	0x40013800

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f000 fdc5 	bl	800181a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f80d 	bl	8000cae <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Comm_BufInit_Hal();
 8000c94:	f7ff fe8c 	bl	80009b0 <Comm_BufInit_Hal>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f7ff fc0c 	bl	80004b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c9c:	f7ff fbc8 	bl	8000430 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000ca0:	f000 fcb6 	bl	8001610 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Comm_DMAUconf_Hal();
 8000ca4:	f7ff fe98 	bl	80009d8 <Comm_DMAUconf_Hal>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  My_Sched_Loop();
 8000ca8:	f000 f952 	bl	8000f50 <My_Sched_Loop>
 8000cac:	e7fc      	b.n	8000ca8 <main+0x20>

08000cae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b0a8      	sub	sp, #160	; 0xa0
 8000cb2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000cb8:	2238      	movs	r2, #56	; 0x38
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fd4f 	bl	8003760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2254      	movs	r2, #84	; 0x54
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fd41 	bl	8003760 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 fef0 	bl	8001ac4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cec:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cee:	2340      	movs	r3, #64	; 0x40
 8000cf0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d04:	2355      	movs	r3, #85	; 0x55
 8000d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 ff83 	bl	8001c2c <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d2c:	f000 f826 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	230f      	movs	r3, #15
 8000d32:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d34:	2303      	movs	r3, #3
 8000d36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fa86 	bl	800225c <HAL_RCC_ClockConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000d56:	f000 f811 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fc5d 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d70:	f000 f804 	bl	8000d7c <Error_Handler>
  }
}
 8000d74:	bf00      	nop
 8000d76:	37a0      	adds	r7, #160	; 0xa0
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <Error_Handler+0x6>

08000d84 <is_DeCirqueempty>:
#include "stdio.h"
#include "my_lib.h"

//*********************** circular queue ****************//
int32_t is_DeCirqueempty(T_DeCirqueDate *p_quehead)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
    if (NULL == p_quehead)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <is_DeCirqueempty+0x12>
        return 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e006      	b.n	8000da4 <is_DeCirqueempty+0x20>
    
    if (p_quehead->size <= 0)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	dc01      	bgt.n	8000da2 <is_DeCirqueempty+0x1e>
    {
        return 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <is_DeCirqueempty+0x20>
    }

    return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <DeCirque_pop>:

int32_t DeCirque_pop(T_DeCirqueDate *p_quehead, uint8_t *p_buf, uint8_t buf_len)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]

    if (NULL == p_quehead)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d102      	bne.n	8000dce <DeCirque_pop+0x1e>
        return -1;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dcc:	e030      	b.n	8000e30 <DeCirque_pop+0x80>
    if ((buf_len > p_quehead->size) || (buf_len <= 0))
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dc02      	bgt.n	8000dde <DeCirque_pop+0x2e>
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <DeCirque_pop+0x34>
    	return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de2:	e025      	b.n	8000e30 <DeCirque_pop+0x80>

    for (i = 0; i < buf_len; i ++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	75fb      	strb	r3, [r7, #23]
 8000de8:	e01d      	b.n	8000e26 <DeCirque_pop+0x76>
    {
    	p_buf[i] = p_quehead->p_queuebuf[p_quehead->front];
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	6892      	ldr	r2, [r2, #8]
 8000df2:	441a      	add	r2, r3
 8000df4:	7dfb      	ldrb	r3, [r7, #23]
 8000df6:	68b9      	ldr	r1, [r7, #8]
 8000df8:	440b      	add	r3, r1
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	701a      	strb	r2, [r3, #0]
		p_quehead->front = (p_quehead->front + 1) % (p_quehead->cap);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	3301      	adds	r3, #1
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	6812      	ldr	r2, [r2, #0]
 8000e08:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e0c:	fb02 f201 	mul.w	r2, r2, r1
 8000e10:	1a9a      	subs	r2, r3, r2
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	609a      	str	r2, [r3, #8]
		p_quehead->size -= 1;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	1e5a      	subs	r2, r3, #1
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	60da      	str	r2, [r3, #12]
    for (i = 0; i < buf_len; i ++)
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	3301      	adds	r3, #1
 8000e24:	75fb      	strb	r3, [r7, #23]
 8000e26:	7dfa      	ldrb	r2, [r7, #23]
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d3dd      	bcc.n	8000dea <DeCirque_pop+0x3a>
    }
    return 1;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	371c      	adds	r7, #28
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <DeCirque_push>:

int32_t DeCirque_push(T_DeCirqueDate *p_quehead, uint8_t *p_buf, uint8_t buf_len)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	4613      	mov	r3, r2
 8000e48:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75fb      	strb	r3, [r7, #23]

    if (NULL == p_quehead)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <DeCirque_push+0x1e>
        return -1;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e58:	e03d      	b.n	8000ed6 <DeCirque_push+0x9a>
    if (NULL == p_quehead->p_queuebuf)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <DeCirque_push+0x2c>
        return -1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e66:	e036      	b.n	8000ed6 <DeCirque_push+0x9a>
    if (buf_len <= 0)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d102      	bne.n	8000e74 <DeCirque_push+0x38>
    	return -1;
 8000e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e72:	e030      	b.n	8000ed6 <DeCirque_push+0x9a>

    for (i = 0; i < buf_len; i ++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	75fb      	strb	r3, [r7, #23]
 8000e78:	e028      	b.n	8000ecc <DeCirque_push+0x90>
    {
    	p_quehead->p_queuebuf[p_quehead->rear] = p_buf[i];
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	68ba      	ldr	r2, [r7, #8]
 8000e7e:	441a      	add	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	691b      	ldr	r3, [r3, #16]
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	6849      	ldr	r1, [r1, #4]
 8000e88:	440b      	add	r3, r1
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	701a      	strb	r2, [r3, #0]
		p_quehead->rear = (p_quehead->rear + 1) % (p_quehead->cap);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	3301      	adds	r3, #1
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e9c:	fb02 f201 	mul.w	r2, r2, r1
 8000ea0:	1a9a      	subs	r2, r3, r2
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	605a      	str	r2, [r3, #4]
		if (p_quehead->size < p_quehead->cap)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	da05      	bge.n	8000ebe <DeCirque_push+0x82>
			p_quehead->size += 1;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	e003      	b.n	8000ec6 <DeCirque_push+0x8a>
		else
		{
			p_quehead->front = p_quehead->rear;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	609a      	str	r2, [r3, #8]
    for (i = 0; i < buf_len; i ++)
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	75fb      	strb	r3, [r7, #23]
 8000ecc:	7dfa      	ldrb	r2, [r7, #23]
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d3d2      	bcc.n	8000e7a <DeCirque_push+0x3e>
		}
    }
    
    return 1;
 8000ed4:	2301      	movs	r3, #1
};
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <DeCirque_init>:

T_DeCirqueDate *DeCirque_init(int32_t buf_len)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
    if (buf_len > 0)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	dd29      	ble.n	8000f44 <DeCirque_init+0x62>
    {
        T_DeCirqueDate *p_queue = (T_DeCirqueDate *)malloc(sizeof(T_DeCirqueDate));
 8000ef0:	2014      	movs	r0, #20
 8000ef2:	f002 fc25 	bl	8003740 <malloc>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60fb      	str	r3, [r7, #12]
        uint8_t *p_buf = (uint8_t *)malloc(buf_len * sizeof(uint8_t));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f002 fc1f 	bl	8003740 <malloc>
 8000f02:	4603      	mov	r3, r0
 8000f04:	60bb      	str	r3, [r7, #8]

        if ((NULL == p_queue) || (NULL == p_buf))
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <DeCirque_init+0x30>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d107      	bne.n	8000f22 <DeCirque_init+0x40>
        {
            free(p_queue);
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f002 fc1c 	bl	8003750 <free>
            free(p_buf);
 8000f18:	68b8      	ldr	r0, [r7, #8]
 8000f1a:	f002 fc19 	bl	8003750 <free>
            return NULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e011      	b.n	8000f46 <DeCirque_init+0x64>
        }
        p_queue->cap = buf_len;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	601a      	str	r2, [r3, #0]
        p_queue->rear = 0;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
        p_queue->front = 0;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
        p_queue->size = 0;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
        p_queue->p_queuebuf = p_buf;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68ba      	ldr	r2, [r7, #8]
 8000f3e:	611a      	str	r2, [r3, #16]

        return p_queue;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	e000      	b.n	8000f46 <DeCirque_init+0x64>
    }
    return NULL;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <My_Sched_Loop>:
    {Comm_Task, 100, 100},
};


void My_Sched_Loop(void)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < SCHED_MAX_TASKS; i++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e02e      	b.n	8000fba <My_Sched_Loop+0x6a>
    {
        if(HAL_GetTick() >= g_uMy_Task[i].remainToExec)
 8000f5c:	f000 fcc2 	bl	80018e4 <HAL_GetTick>
 8000f60:	79fa      	ldrb	r2, [r7, #7]
 8000f62:	4919      	ldr	r1, [pc, #100]	; (8000fc8 <My_Sched_Loop+0x78>)
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3308      	adds	r3, #8
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4298      	cmp	r0, r3
 8000f74:	d31e      	bcc.n	8000fb4 <My_Sched_Loop+0x64>
        {
            g_uMy_Task[i].runnable();
 8000f76:	79fa      	ldrb	r2, [r7, #7]
 8000f78:	4913      	ldr	r1, [pc, #76]	; (8000fc8 <My_Sched_Loop+0x78>)
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	440b      	add	r3, r1
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4798      	blx	r3
            g_uMy_Task[i].remainToExec = g_uMy_Task[i].periodicTimeMs + HAL_GetTick();
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	490f      	ldr	r1, [pc, #60]	; (8000fc8 <My_Sched_Loop+0x78>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	3304      	adds	r3, #4
 8000f98:	681c      	ldr	r4, [r3, #0]
 8000f9a:	f000 fca3 	bl	80018e4 <HAL_GetTick>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	18e1      	adds	r1, r4, r3
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <My_Sched_Loop+0x78>)
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4413      	add	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4403      	add	r3, r0
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	6019      	str	r1, [r3, #0]
    for (i = 0; i < SCHED_MAX_TASKS; i++)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0cd      	beq.n	8000f5c <My_Sched_Loop+0xc>

            //Iwdg_Clear();
        }
    }
    //exp deal
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}
 8000fc8:	20000000 	.word	0x20000000

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_MspInit+0x44>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x44>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x44>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001002:	f000 fe03 	bl	8001c0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <NMI_Handler+0x4>

0800101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <HardFault_Handler+0x4>

08001020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <MemManage_Handler+0x4>

08001026 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler+0x4>

08001032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001060:	f000 fc2e 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}

08001068 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	Comm_DMA_CHAN2_Handler();
 800106c:	f7ff fd72 	bl	8000b54 <Comm_DMA_CHAN2_Handler>
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	Comm_DMA_CHAN3_Handler();
 8001078:	f7ff fd8a 	bl	8000b90 <Comm_DMA_CHAN3_Handler>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Comm_USART1_Handler();
 8001084:	f7ff fdda 	bl	8000c3c <Comm_USART1_Handler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f002 fb16 	bl	80036ec <__errno>
 80010c0:	4602      	mov	r2, r0
 80010c2:	230c      	movs	r3, #12
 80010c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20020000 	.word	0x20020000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	200001e0 	.word	0x200001e0
 80010f4:	200003f8 	.word	0x200003f8

080010f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <SystemInit+0x28>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <SystemInit+0x28>)
 8001104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SystemInit+0x28>)
 800110e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001112:	609a      	str	r2, [r3, #8]
#endif
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_GetPriorityGrouping>:
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <LL_DMA_SetDataTransferDirection>:
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <LL_DMA_SetDataTransferDirection+0x4c>)
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800125c:	f023 0310 	bic.w	r3, r3, #16
 8001260:	4908      	ldr	r1, [pc, #32]	; (8001284 <LL_DMA_SetDataTransferDirection+0x4c>)
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	440a      	add	r2, r1
 8001266:	7812      	ldrb	r2, [r2, #0]
 8001268:	4611      	mov	r1, r2
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	440a      	add	r2, r1
 800126e:	4611      	mov	r1, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
}
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	0800391c 	.word	0x0800391c

08001288 <LL_DMA_SetMode>:
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LL_DMA_SetMode+0x48>)
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f023 0220 	bic.w	r2, r3, #32
 80012ac:	4908      	ldr	r1, [pc, #32]	; (80012d0 <LL_DMA_SetMode+0x48>)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	440b      	add	r3, r1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4619      	mov	r1, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	440b      	add	r3, r1
 80012ba:	4619      	mov	r1, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4313      	orrs	r3, r2
 80012c0:	600b      	str	r3, [r1, #0]
}
 80012c2:	bf00      	nop
 80012c4:	371c      	adds	r7, #28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	0800391c 	.word	0x0800391c

080012d4 <LL_DMA_SetPeriphIncMode>:
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80012e4:	4a0d      	ldr	r2, [pc, #52]	; (800131c <LL_DMA_SetPeriphIncMode+0x48>)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4413      	add	r3, r2
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80012f8:	4908      	ldr	r1, [pc, #32]	; (800131c <LL_DMA_SetPeriphIncMode+0x48>)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	440b      	add	r3, r1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	440b      	add	r3, r1
 8001306:	4619      	mov	r1, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]
}
 800130e:	bf00      	nop
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	0800391c 	.word	0x0800391c

08001320 <LL_DMA_SetMemoryIncMode>:
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8001330:	4a0d      	ldr	r2, [pc, #52]	; (8001368 <LL_DMA_SetMemoryIncMode+0x48>)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001344:	4908      	ldr	r1, [pc, #32]	; (8001368 <LL_DMA_SetMemoryIncMode+0x48>)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	440b      	add	r3, r1
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	440b      	add	r3, r1
 8001352:	4619      	mov	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	0800391c 	.word	0x0800391c

0800136c <LL_DMA_SetPeriphSize>:
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LL_DMA_SetPeriphSize+0x48>)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	4413      	add	r3, r2
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001390:	4908      	ldr	r1, [pc, #32]	; (80013b4 <LL_DMA_SetPeriphSize+0x48>)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	440b      	add	r3, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	440b      	add	r3, r1
 800139e:	4619      	mov	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
}
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	0800391c 	.word	0x0800391c

080013b8 <LL_DMA_SetMemorySize>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b087      	sub	sp, #28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LL_DMA_SetMemorySize+0x48>)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	4413      	add	r3, r2
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80013dc:	4908      	ldr	r1, [pc, #32]	; (8001400 <LL_DMA_SetMemorySize+0x48>)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	440b      	add	r3, r1
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4619      	mov	r1, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	440b      	add	r3, r1
 80013ea:	4619      	mov	r1, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
}
 80013f2:	bf00      	nop
 80013f4:	371c      	adds	r7, #28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	0800391c 	.word	0x0800391c

08001404 <LL_DMA_SetChannelPriorityLevel>:
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <LL_DMA_SetChannelPriorityLevel+0x48>)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	461a      	mov	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	4413      	add	r3, r2
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001428:	4908      	ldr	r1, [pc, #32]	; (800144c <LL_DMA_SetChannelPriorityLevel+0x48>)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	440b      	add	r3, r1
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	440b      	add	r3, r1
 8001436:	4619      	mov	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]
}
 800143e:	bf00      	nop
 8001440:	371c      	adds	r7, #28
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	0800391c 	.word	0x0800391c

08001450 <LL_DMA_SetPeriphRequest>:
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8001464:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001478:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800148e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
}
 8001498:	bf00      	nop
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_USART_Enable>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_USART_DisableFIFO>:
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	601a      	str	r2, [r3, #0]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_USART_SetTXFIFOThreshold>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	075b      	lsls	r3, r3, #29
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_USART_SetRXFIFOThreshold>:
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	065b      	lsls	r3, r3, #25
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_USART_ConfigAsyncMode>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_USART_IsActiveFlag_TEACK>:
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001574:	d101      	bne.n	800157a <LL_USART_IsActiveFlag_TEACK+0x1a>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_USART_IsActiveFlag_TEACK+0x1c>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <LL_USART_IsActiveFlag_REACK>:
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800159c:	d101      	bne.n	80015a2 <LL_USART_IsActiveFlag_REACK+0x1a>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <LL_USART_IsActiveFlag_REACK+0x1c>
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_AHB2_GRP1_EnableClock>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4013      	ands	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ce:	68fb      	ldr	r3, [r7, #12]
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40021000 	.word	0x40021000

080015e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <LL_APB2_GRP1_EnableClock+0x2c>)
 80015ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <LL_APB2_GRP1_EnableClock+0x2c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <LL_APB2_GRP1_EnableClock+0x2c>)
 80015f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4013      	ands	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	40021000 	.word	0x40021000

08001610 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	2220      	movs	r2, #32
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f002 f89e 	bl	8003760 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001634:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001638:	f7ff ffd2 	bl	80015e0 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800163c:	2004      	movs	r0, #4
 800163e:	f7ff ffb7 	bl	80015b0 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PC4   ------> USART1_TX
  PC5   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001642:	2310      	movs	r3, #16
 8001644:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001646:	2302      	movs	r3, #2
 8001648:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001656:	2307      	movs	r3, #7
 8001658:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4857      	ldr	r0, [pc, #348]	; (80017bc <MX_USART1_UART_Init+0x1ac>)
 8001660:	f001 fb77 	bl	8002d52 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001664:	2320      	movs	r3, #32
 8001666:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001668:	2302      	movs	r3, #2
 800166a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001678:	2307      	movs	r3, #7
 800167a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167c:	463b      	mov	r3, r7
 800167e:	4619      	mov	r1, r3
 8001680:	484e      	ldr	r0, [pc, #312]	; (80017bc <MX_USART1_UART_Init+0x1ac>)
 8001682:	f001 fb66 	bl	8002d52 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART1_TX);
 8001686:	2219      	movs	r2, #25
 8001688:	2101      	movs	r1, #1
 800168a:	484d      	ldr	r0, [pc, #308]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 800168c:	f7ff fee0 	bl	8001450 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001690:	2210      	movs	r2, #16
 8001692:	2101      	movs	r1, #1
 8001694:	484a      	ldr	r0, [pc, #296]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 8001696:	f7ff fdcf 	bl	8001238 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 800169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169e:	2101      	movs	r1, #1
 80016a0:	4847      	ldr	r0, [pc, #284]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016a2:	f7ff feaf 	bl	8001404 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2101      	movs	r1, #1
 80016aa:	4845      	ldr	r0, [pc, #276]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016ac:	f7ff fdec 	bl	8001288 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2101      	movs	r1, #1
 80016b4:	4842      	ldr	r0, [pc, #264]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016b6:	f7ff fe0d 	bl	80012d4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	2101      	movs	r1, #1
 80016be:	4840      	ldr	r0, [pc, #256]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016c0:	f7ff fe2e 	bl	8001320 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2101      	movs	r1, #1
 80016c8:	483d      	ldr	r0, [pc, #244]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016ca:	f7ff fe4f 	bl	800136c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2101      	movs	r1, #1
 80016d2:	483b      	ldr	r0, [pc, #236]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016d4:	f7ff fe70 	bl	80013b8 <LL_DMA_SetMemorySize>

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_USART1_RX);
 80016d8:	2218      	movs	r2, #24
 80016da:	2102      	movs	r1, #2
 80016dc:	4838      	ldr	r0, [pc, #224]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016de:	f7ff feb7 	bl	8001450 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2102      	movs	r1, #2
 80016e6:	4836      	ldr	r0, [pc, #216]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016e8:	f7ff fda6 	bl	8001238 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_HIGH);
 80016ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f0:	2102      	movs	r1, #2
 80016f2:	4833      	ldr	r0, [pc, #204]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016f4:	f7ff fe86 	bl	8001404 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2102      	movs	r1, #2
 80016fc:	4830      	ldr	r0, [pc, #192]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 80016fe:	f7ff fdc3 	bl	8001288 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8001702:	2200      	movs	r2, #0
 8001704:	2102      	movs	r1, #2
 8001706:	482e      	ldr	r0, [pc, #184]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 8001708:	f7ff fde4 	bl	80012d4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	2102      	movs	r1, #2
 8001710:	482b      	ldr	r0, [pc, #172]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 8001712:	f7ff fe05 	bl	8001320 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8001716:	2200      	movs	r2, #0
 8001718:	2102      	movs	r1, #2
 800171a:	4829      	ldr	r0, [pc, #164]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 800171c:	f7ff fe26 	bl	800136c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8001720:	2200      	movs	r2, #0
 8001722:	2102      	movs	r1, #2
 8001724:	4826      	ldr	r0, [pc, #152]	; (80017c0 <MX_USART1_UART_Init+0x1b0>)
 8001726:	f7ff fe47 	bl	80013b8 <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800172a:	f7ff fcfb 	bl	8001124 <__NVIC_GetPriorityGrouping>
 800172e:	4603      	mov	r3, r0
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fd4b 	bl	80011d0 <NVIC_EncodePriority>
 800173a:	4603      	mov	r3, r0
 800173c:	4619      	mov	r1, r3
 800173e:	2025      	movs	r0, #37	; 0x25
 8001740:	f7ff fd1c 	bl	800117c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001744:	2025      	movs	r0, #37	; 0x25
 8001746:	f7ff fcfb 	bl	8001140 <__NVIC_EnableIRQ>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 800174e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001752:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001760:	230c      	movs	r3, #12
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001768:	2300      	movs	r3, #0
 800176a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4619      	mov	r1, r3
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 8001774:	f001 fe90 	bl	8003498 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001778:	2100      	movs	r1, #0
 800177a:	4812      	ldr	r0, [pc, #72]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 800177c:	f7ff feb2 	bl	80014e4 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 8001780:	2100      	movs	r1, #0
 8001782:	4810      	ldr	r0, [pc, #64]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 8001784:	f7ff fec2 	bl	800150c <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 8001788:	480e      	ldr	r0, [pc, #56]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 800178a:	f7ff fe9b 	bl	80014c4 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 8001790:	f7ff fed0 	bl	8001534 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 8001796:	f7ff fe85 	bl	80014a4 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 800179a:	bf00      	nop
 800179c:	4809      	ldr	r0, [pc, #36]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 800179e:	f7ff fedf 	bl	8001560 <LL_USART_IsActiveFlag_TEACK>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f9      	beq.n	800179c <MX_USART1_UART_Init+0x18c>
 80017a8:	4806      	ldr	r0, [pc, #24]	; (80017c4 <MX_USART1_UART_Init+0x1b4>)
 80017aa:	f7ff feed 	bl	8001588 <LL_USART_IsActiveFlag_REACK>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d0f3      	beq.n	800179c <MX_USART1_UART_Init+0x18c>
  {
  }

}
 80017b4:	bf00      	nop
 80017b6:	3738      	adds	r7, #56	; 0x38
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	48000800 	.word	0x48000800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40013800 	.word	0x40013800

080017c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopForever+0xe>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopForever+0x16>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f2:	f7ff fc81 	bl	80010f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f001 ff7f 	bl	80036f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017fa:	f7ff fa45 	bl	8000c88 <main>

080017fe <LoopForever>:

LoopForever:
    b LoopForever
 80017fe:	e7fe      	b.n	80017fe <LoopForever>
  ldr   r0, =_estack
 8001800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800180c:	0800395c 	.word	0x0800395c
  ldr r2, =_sbss
 8001810:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001814:	200003f8 	.word	0x200003f8

08001818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC1_2_IRQHandler>

0800181a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 f91b 	bl	8001a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182a:	2000      	movs	r0, #0
 800182c:	f000 f80e 	bl	800184c <HAL_InitTick>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	71fb      	strb	r3, [r7, #7]
 800183a:	e001      	b.n	8001840 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800183c:	f7ff fbc6 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001840:	79fb      	ldrb	r3, [r7, #7]

}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_InitTick+0x68>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d022      	beq.n	80018a6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_InitTick+0x6c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_InitTick+0x68>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800186c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	4618      	mov	r0, r3
 8001876:	f000 f918 	bl	8001aaa <HAL_SYSTICK_Config>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10f      	bne.n	80018a0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	d809      	bhi.n	800189a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001886:	2200      	movs	r2, #0
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800188e:	f000 f8f2 	bl	8001a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_InitTick+0x70>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e007      	b.n	80018aa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
 800189e:	e004      	b.n	80018aa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
 80018a4:	e001      	b.n	80018aa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000014 	.word	0x20000014
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	20000010 	.word	0x20000010

080018c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_IncTick+0x1c>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_IncTick+0x20>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a03      	ldr	r2, [pc, #12]	; (80018dc <HAL_IncTick+0x1c>)
 80018d0:	6013      	str	r3, [r2, #0]
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	200003f0 	.word	0x200003f0
 80018e0:	20000014 	.word	0x20000014

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	200003f0 	.word	0x200003f0

080018fc <__NVIC_SetPriorityGrouping>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_SetPriority>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	6039      	str	r1, [r7, #0]
 800196a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	db0a      	blt.n	800198a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	490c      	ldr	r1, [pc, #48]	; (80019ac <__NVIC_SetPriority+0x4c>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	b2d2      	uxtb	r2, r2
 8001982:	440b      	add	r3, r1
 8001984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001988:	e00a      	b.n	80019a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4908      	ldr	r1, [pc, #32]	; (80019b0 <__NVIC_SetPriority+0x50>)
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3b04      	subs	r3, #4
 8001998:	0112      	lsls	r2, r2, #4
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	440b      	add	r3, r1
 800199e:	761a      	strb	r2, [r3, #24]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000e100 	.word	0xe000e100
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <NVIC_EncodePriority>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b089      	sub	sp, #36	; 0x24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f1c3 0307 	rsb	r3, r3, #7
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	bf28      	it	cs
 80019d2:	2304      	movcs	r3, #4
 80019d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3304      	adds	r3, #4
 80019da:	2b06      	cmp	r3, #6
 80019dc:	d902      	bls.n	80019e4 <NVIC_EncodePriority+0x30>
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3b03      	subs	r3, #3
 80019e2:	e000      	b.n	80019e6 <NVIC_EncodePriority+0x32>
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	401a      	ands	r2, r3
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa01 f303 	lsl.w	r3, r1, r3
 8001a06:	43d9      	mvns	r1, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	4313      	orrs	r3, r2
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a2c:	d301      	bcc.n	8001a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e00f      	b.n	8001a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a32:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <SysTick_Config+0x40>)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3a:	210f      	movs	r1, #15
 8001a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a40:	f7ff ff8e 	bl	8001960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <SysTick_Config+0x40>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <SysTick_Config+0x40>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	e000e010 	.word	0xe000e010

08001a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ff47 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff5e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff90 	bl	80019b4 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5f 	bl	8001960 <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffb2 	bl	8001a1c <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d141      	bne.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ade:	d131      	bne.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae0:	4b47      	ldr	r3, [pc, #284]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ae6:	4a46      	ldr	r2, [pc, #280]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af8:	4a41      	ldr	r2, [pc, #260]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b00:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2232      	movs	r2, #50	; 0x32
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	4a3f      	ldr	r2, [pc, #252]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b10:	0c9b      	lsrs	r3, r3, #18
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b16:	e002      	b.n	8001b1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1e:	4b38      	ldr	r3, [pc, #224]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2a:	d102      	bne.n	8001b32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f2      	bne.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b32:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3e:	d158      	bne.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e057      	b.n	8001bf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b54:	e04d      	b.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5c:	d141      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b5e:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6a:	d131      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2232      	movs	r2, #50	; 0x32
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b98:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	e002      	b.n	8001baa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	d102      	bne.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f2      	bne.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d112      	bne.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e011      	b.n	8001bf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be0:	e007      	b.n	8001bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001be2:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40007000 	.word	0x40007000
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	431bde83 	.word	0x431bde83

08001c0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1a:	6093      	str	r3, [r2, #8]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40007000 	.word	0x40007000

08001c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e308      	b.n	8002250 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d075      	beq.n	8001d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4ba3      	ldr	r3, [pc, #652]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4ba0      	ldr	r3, [pc, #640]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3e>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_OscConfig+0x44>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d10b      	bne.n	8001c88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c70:	4b99      	ldr	r3, [pc, #612]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d05b      	beq.n	8001d34 <HAL_RCC_OscConfig+0x108>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d157      	bne.n	8001d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e2e3      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d106      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x74>
 8001c92:	4b91      	ldr	r3, [pc, #580]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a90      	ldr	r2, [pc, #576]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xb0>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x98>
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a8a      	ldr	r2, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b88      	ldr	r3, [pc, #544]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a87      	ldr	r2, [pc, #540]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xb0>
 8001cc4:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a83      	ldr	r2, [pc, #524]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a80      	ldr	r2, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fdfe 	bl	80018e4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff fdfa 	bl	80018e4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e2a8      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xc0>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fdea 	bl	80018e4 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fde6 	bl	80018e4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e294      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d26:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0xe8>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d075      	beq.n	8001e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d42:	4b65      	ldr	r3, [pc, #404]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d4c:	4b62      	ldr	r3, [pc, #392]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_OscConfig+0x136>
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d002      	beq.n	8001d68 <HAL_RCC_OscConfig+0x13c>
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d11f      	bne.n	8001da8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d68:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_OscConfig+0x154>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e267      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d80:	4b55      	ldr	r3, [pc, #340]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	061b      	lsls	r3, r3, #24
 8001d8e:	4952      	ldr	r1, [pc, #328]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d94:	4b51      	ldr	r3, [pc, #324]	; (8001edc <HAL_RCC_OscConfig+0x2b0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fd57 	bl	800184c <HAL_InitTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d043      	beq.n	8001e2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e253      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d023      	beq.n	8001df8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db0:	4b49      	ldr	r3, [pc, #292]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a48      	ldr	r2, [pc, #288]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fd92 	bl	80018e4 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc4:	f7ff fd8e 	bl	80018e4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e23c      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd6:	4b40      	ldr	r3, [pc, #256]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	061b      	lsls	r3, r3, #24
 8001df0:	4939      	ldr	r1, [pc, #228]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
 8001df6:	e01a      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df8:	4b37      	ldr	r3, [pc, #220]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a36      	ldr	r2, [pc, #216]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fd6e 	bl	80018e4 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fd6a 	bl	80018e4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e218      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f0      	bne.n	8001e0c <HAL_RCC_OscConfig+0x1e0>
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d03c      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01c      	beq.n	8001e7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e42:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff fd47 	bl	80018e4 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fd43 	bl	80018e4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1f1      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ef      	beq.n	8001e5a <HAL_RCC_OscConfig+0x22e>
 8001e7a:	e01b      	b.n	8001eb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e8c:	f7ff fd2a 	bl	80018e4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e94:	f7ff fd26 	bl	80018e4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1d4      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea6:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ef      	bne.n	8001e94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80ab 	beq.w	8002018 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ec6:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x2b4>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e005      	b.n	8001ee2 <HAL_RCC_OscConfig+0x2b6>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4baf      	ldr	r3, [pc, #700]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4aae      	ldr	r2, [pc, #696]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef2:	4bac      	ldr	r3, [pc, #688]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001efe:	2301      	movs	r3, #1
 8001f00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f02:	4ba9      	ldr	r3, [pc, #676]	; (80021a8 <HAL_RCC_OscConfig+0x57c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0e:	4ba6      	ldr	r3, [pc, #664]	; (80021a8 <HAL_RCC_OscConfig+0x57c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4aa5      	ldr	r2, [pc, #660]	; (80021a8 <HAL_RCC_OscConfig+0x57c>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7ff fce3 	bl	80018e4 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f22:	f7ff fcdf 	bl	80018e4 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e18d      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b9c      	ldr	r3, [pc, #624]	; (80021a8 <HAL_RCC_OscConfig+0x57c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_RCC_OscConfig+0x32e>
 8001f48:	4b96      	ldr	r3, [pc, #600]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a95      	ldr	r2, [pc, #596]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	e024      	b.n	8001fa4 <HAL_RCC_OscConfig+0x378>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2b05      	cmp	r3, #5
 8001f60:	d110      	bne.n	8001f84 <HAL_RCC_OscConfig+0x358>
 8001f62:	4b90      	ldr	r3, [pc, #576]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	4a8e      	ldr	r2, [pc, #568]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f043 0304 	orr.w	r3, r3, #4
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f72:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	4a8a      	ldr	r2, [pc, #552]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f82:	e00f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x378>
 8001f84:	4b87      	ldr	r3, [pc, #540]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a86      	ldr	r2, [pc, #536]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f023 0301 	bic.w	r3, r3, #1
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f94:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a82      	ldr	r2, [pc, #520]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f023 0304 	bic.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d016      	beq.n	8001fda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fac:	f7ff fc9a 	bl	80018e4 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7ff fc96 	bl	80018e4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e142      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ed      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x388>
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff fc83 	bl	80018e4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff fc7f 	bl	80018e4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e12b      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1ed      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002006:	7ffb      	ldrb	r3, [r7, #31]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d105      	bne.n	8002018 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200c:	4b65      	ldr	r3, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	4a64      	ldr	r2, [pc, #400]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002016:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d03c      	beq.n	800209e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01c      	beq.n	8002066 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800202c:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 800202e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002032:	4a5c      	ldr	r2, [pc, #368]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7ff fc52 	bl	80018e4 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002044:	f7ff fc4e 	bl	80018e4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e0fc      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ef      	beq.n	8002044 <HAL_RCC_OscConfig+0x418>
 8002064:	e01b      	b.n	800209e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002066:	4b4f      	ldr	r3, [pc, #316]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002068:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800206c:	4a4d      	ldr	r2, [pc, #308]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 800206e:	f023 0301 	bic.w	r3, r3, #1
 8002072:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002076:	f7ff fc35 	bl	80018e4 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800207e:	f7ff fc31 	bl	80018e4 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0df      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002090:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ef      	bne.n	800207e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80d3 	beq.w	800224e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a8:	4b3e      	ldr	r3, [pc, #248]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	f000 808d 	beq.w	80021d0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d15a      	bne.n	8002174 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020be:	4b39      	ldr	r3, [pc, #228]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a38      	ldr	r2, [pc, #224]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 80020c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7ff fc0b 	bl	80018e4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff fc07 	bl	80018e4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0b5      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e4:	4b2f      	ldr	r3, [pc, #188]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f0:	4b2c      	ldr	r3, [pc, #176]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_OscConfig+0x580>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6a11      	ldr	r1, [r2, #32]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002100:	3a01      	subs	r2, #1
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800210a:	0212      	lsls	r2, r2, #8
 800210c:	4311      	orrs	r1, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002112:	0852      	lsrs	r2, r2, #1
 8002114:	3a01      	subs	r2, #1
 8002116:	0552      	lsls	r2, r2, #21
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800211e:	0852      	lsrs	r2, r2, #1
 8002120:	3a01      	subs	r2, #1
 8002122:	0652      	lsls	r2, r2, #25
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800212a:	06d2      	lsls	r2, r2, #27
 800212c:	430a      	orrs	r2, r1
 800212e:	491d      	ldr	r1, [pc, #116]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a17      	ldr	r2, [pc, #92]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fbca 	bl	80018e4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff fbc6 	bl	80018e4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e074      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x528>
 8002172:	e06c      	b.n	800224e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 800217a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002186:	f023 0303 	bic.w	r3, r3, #3
 800218a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_OscConfig+0x578>)
 8002192:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7ff fba2 	bl	80018e4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a2:	e00e      	b.n	80021c2 <HAL_RCC_OscConfig+0x596>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff fb98 	bl	80018e4 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e046      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_RCC_OscConfig+0x62c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x584>
 80021ce:	e03e      	b.n	800224e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e039      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_OscConfig+0x62c>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d12c      	bne.n	800224a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	3b01      	subs	r3, #1
 80021fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d123      	bne.n	800224a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d11b      	bne.n	800224a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d113      	bne.n	800224a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d109      	bne.n	800224a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	3b01      	subs	r3, #1
 8002244:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3720      	adds	r7, #32
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e11e      	b.n	80024b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b91      	ldr	r3, [pc, #580]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d910      	bls.n	80022a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 020f 	bic.w	r2, r3, #15
 800228a:	498c      	ldr	r1, [pc, #560]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b8a      	ldr	r3, [pc, #552]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e106      	b.n	80024b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d073      	beq.n	8002398 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d129      	bne.n	800230c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b8:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0f4      	b.n	80024b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022c8:	f000 f966 	bl	8002598 <RCC_GetSysClockFreqFromPLLSource>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4a7c      	ldr	r2, [pc, #496]	; (80024c4 <HAL_RCC_ClockConfig+0x268>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d93f      	bls.n	8002356 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022d6:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d009      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d033      	beq.n	8002356 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d12f      	bne.n	8002356 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022f6:	4b72      	ldr	r3, [pc, #456]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fe:	4a70      	ldr	r2, [pc, #448]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e024      	b.n	8002356 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d107      	bne.n	8002324 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0c6      	b.n	80024b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002324:	4b66      	ldr	r3, [pc, #408]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0be      	b.n	80024b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002334:	f000 f8ce 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002338:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4a61      	ldr	r2, [pc, #388]	; (80024c4 <HAL_RCC_ClockConfig+0x268>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d909      	bls.n	8002356 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002342:	4b5f      	ldr	r3, [pc, #380]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800234a:	4a5d      	ldr	r2, [pc, #372]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 800234c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002350:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002356:	4b5a      	ldr	r3, [pc, #360]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 0203 	bic.w	r2, r3, #3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4957      	ldr	r1, [pc, #348]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002368:	f7ff fabc 	bl	80018e4 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	e00a      	b.n	8002386 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002370:	f7ff fab8 	bl	80018e4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e095      	b.n	80024b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002386:	4b4e      	ldr	r3, [pc, #312]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 020c 	and.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	429a      	cmp	r2, r3
 8002396:	d1eb      	bne.n	8002370 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d023      	beq.n	80023ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a42      	ldr	r2, [pc, #264]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d007      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023c8:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023d0:	4a3b      	ldr	r2, [pc, #236]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
 80023ea:	e008      	b.n	80023fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d105      	bne.n	80023fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023f2:	4b33      	ldr	r3, [pc, #204]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4a32      	ldr	r2, [pc, #200]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 80023f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d21d      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 020f 	bic.w	r2, r3, #15
 8002414:	4929      	ldr	r1, [pc, #164]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800241c:	f7ff fa62 	bl	80018e4 <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7ff fa5e 	bl	80018e4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e03b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x260>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ed      	bne.n	8002424 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4917      	ldr	r1, [pc, #92]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490f      	ldr	r1, [pc, #60]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002486:	f000 f825 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 800248a:	4601      	mov	r1, r0
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_RCC_ClockConfig+0x264>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	4a0c      	ldr	r2, [pc, #48]	; (80024c8 <HAL_RCC_ClockConfig+0x26c>)
 8002498:	5cd3      	ldrb	r3, [r2, r3]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	fa21 f303 	lsr.w	r3, r1, r3
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x270>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_RCC_ClockConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f9ce 	bl	800184c <HAL_InitTick>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	04c4b400 	.word	0x04c4b400
 80024c8:	08003904 	.word	0x08003904
 80024cc:	2000000c 	.word	0x2000000c
 80024d0:	20000010 	.word	0x20000010

080024d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024da:	4b2c      	ldr	r3, [pc, #176]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d102      	bne.n	80024ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e6:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	e047      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024ec:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d102      	bne.n	80024fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f8:	4b26      	ldr	r3, [pc, #152]	; (8002594 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	e03e      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024fe:	4b23      	ldr	r3, [pc, #140]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b0c      	cmp	r3, #12
 8002508:	d136      	bne.n	8002578 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800250a:	4b20      	ldr	r3, [pc, #128]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3301      	adds	r3, #1
 8002520:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002528:	4a1a      	ldr	r2, [pc, #104]	; (8002594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	4a16      	ldr	r2, [pc, #88]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002532:	68d2      	ldr	r2, [r2, #12]
 8002534:	0a12      	lsrs	r2, r2, #8
 8002536:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
      break;
 8002540:	e00c      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002542:	4a13      	ldr	r2, [pc, #76]	; (8002590 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	0a12      	lsrs	r2, r2, #8
 8002550:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
      break;
 800255a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_GetSysClockFreq+0xb8>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0e5b      	lsrs	r3, r3, #25
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	3301      	adds	r3, #1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e001      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800257c:	693b      	ldr	r3, [r7, #16]
}
 800257e:	4618      	mov	r0, r3
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000
 8002590:	00f42400 	.word	0x00f42400
 8002594:	016e3600 	.word	0x016e3600

08002598 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800259e:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10c      	bne.n	80025d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	4a14      	ldr	r2, [pc, #80]	; (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	0a12      	lsrs	r2, r2, #8
 80025ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
    break;
 80025d4:	e00c      	b.n	80025f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d6:	4a12      	ldr	r2, [pc, #72]	; (8002620 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	0a12      	lsrs	r2, r2, #8
 80025e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
    break;
 80025ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0e5b      	lsrs	r3, r3, #25
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	40021000 	.word	0x40021000
 800261c:	016e3600 	.word	0x016e3600
 8002620:	00f42400 	.word	0x00f42400

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800262c:	2300      	movs	r3, #0
 800262e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002630:	2300      	movs	r3, #0
 8002632:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8098 	beq.w	8002772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002646:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002652:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002656:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
 800265e:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800266e:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a39      	ldr	r2, [pc, #228]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002678:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800267a:	f7ff f933 	bl	80018e4 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002680:	e009      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002682:	f7ff f92f 	bl	80018e4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d902      	bls.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	74fb      	strb	r3, [r7, #19]
        break;
 8002694:	e005      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002696:	4b30      	ldr	r3, [pc, #192]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0ef      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d159      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d01e      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d019      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026c4:	4b23      	ldr	r3, [pc, #140]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026d0:	4b20      	ldr	r3, [pc, #128]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e6:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026f0:	4a18      	ldr	r2, [pc, #96]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7ff f8ef 	bl	80018e4 <HAL_GetTick>
 8002706:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002708:	e00b      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7ff f8eb 	bl	80018e4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d902      	bls.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	74fb      	strb	r3, [r7, #19]
            break;
 8002720:	e006      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ec      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002744:	4903      	ldr	r1, [pc, #12]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800274c:	e008      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	74bb      	strb	r3, [r7, #18]
 8002752:	e005      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002754:	40021000 	.word	0x40021000
 8002758:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002760:	7c7b      	ldrb	r3, [r7, #17]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4baf      	ldr	r3, [pc, #700]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	4aae      	ldr	r2, [pc, #696]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800277e:	4ba9      	ldr	r3, [pc, #676]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f023 0203 	bic.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	49a5      	ldr	r1, [pc, #660]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027a0:	4ba0      	ldr	r3, [pc, #640]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f023 020c 	bic.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	499d      	ldr	r1, [pc, #628]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027c2:	4b98      	ldr	r3, [pc, #608]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4994      	ldr	r1, [pc, #592]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027e4:	4b8f      	ldr	r3, [pc, #572]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	498c      	ldr	r1, [pc, #560]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002806:	4b87      	ldr	r3, [pc, #540]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4983      	ldr	r1, [pc, #524]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0320 	and.w	r3, r3, #32
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	497b      	ldr	r1, [pc, #492]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4972      	ldr	r1, [pc, #456]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286c:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	496a      	ldr	r1, [pc, #424]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800288e:	4b65      	ldr	r3, [pc, #404]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002894:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	4961      	ldr	r1, [pc, #388]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028b0:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	4959      	ldr	r1, [pc, #356]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	4950      	ldr	r1, [pc, #320]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d015      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4948      	ldr	r1, [pc, #288]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002912:	d105      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	4b43      	ldr	r3, [pc, #268]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800292c:	4b3d      	ldr	r3, [pc, #244]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	493a      	ldr	r1, [pc, #232]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d105      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294c:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a34      	ldr	r2, [pc, #208]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002956:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d015      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002964:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	492c      	ldr	r1, [pc, #176]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002982:	d105      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a26      	ldr	r2, [pc, #152]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d015      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	491e      	ldr	r1, [pc, #120]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ba:	d105      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d015      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4910      	ldr	r1, [pc, #64]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f2:	d105      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d018      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4902      	ldr	r1, [pc, #8]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a22:	e001      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002a24:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a30:	d105      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a50:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a58:	4917      	ldr	r1, [pc, #92]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a68:	d105      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a74:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d015      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	4909      	ldr	r1, [pc, #36]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002aa0:	d105      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aac:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002aae:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000

08002abc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b08b      	sub	sp, #44	; 0x2c
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8002ae2:	2320      	movs	r3, #32
 8002ae4:	e003      	b.n	8002aee <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	fab3 f383 	clz	r3, r3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2103      	movs	r1, #3
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	401a      	ands	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	61fb      	str	r3, [r7, #28]
  return result;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	e003      	b.n	8002b1c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	372c      	adds	r7, #44	; 0x2c
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	605a      	str	r2, [r3, #4]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b08b      	sub	sp, #44	; 0x2c
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	613b      	str	r3, [r7, #16]
  return result;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002b8c:	2320      	movs	r3, #32
 8002b8e:	e003      	b.n	8002b98 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	fab3 f383 	clz	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2103      	movs	r1, #3
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	401a      	ands	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	61fb      	str	r3, [r7, #28]
  return result;
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e003      	b.n	8002bc6 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	fab3 f383 	clz	r3, r3
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002bd4:	bf00      	nop
 8002bd6:	372c      	adds	r7, #44	; 0x2c
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b08b      	sub	sp, #44	; 0x2c
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	613b      	str	r3, [r7, #16]
  return result;
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e003      	b.n	8002c12 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2103      	movs	r1, #3
 8002c16:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	401a      	ands	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	61fb      	str	r3, [r7, #28]
  return result;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002c34:	2320      	movs	r3, #32
 8002c36:	e003      	b.n	8002c40 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	fab3 f383 	clz	r3, r3
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	fa01 f303 	lsl.w	r3, r1, r3
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	60da      	str	r2, [r3, #12]
}
 8002c4e:	bf00      	nop
 8002c50:	372c      	adds	r7, #44	; 0x2c
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b08b      	sub	sp, #44	; 0x2c
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1a      	ldr	r2, [r3, #32]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	613b      	str	r3, [r7, #16]
  return result;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002c80:	2320      	movs	r3, #32
 8002c82:	e003      	b.n	8002c8c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	210f      	movs	r1, #15
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	401a      	ands	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	61fb      	str	r3, [r7, #28]
  return result;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e003      	b.n	8002cba <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	fab3 f383 	clz	r3, r3
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002cc8:	bf00      	nop
 8002cca:	372c      	adds	r7, #44	; 0x2c
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b08b      	sub	sp, #44	; 0x2c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	613b      	str	r3, [r7, #16]
  return result;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002cfc:	2320      	movs	r3, #32
 8002cfe:	e003      	b.n	8002d08 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	401a      	ands	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	0a1b      	lsrs	r3, r3, #8
 8002d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	61fb      	str	r3, [r7, #28]
  return result;
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e003      	b.n	8002d38 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	431a      	orrs	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002d46:	bf00      	nop
 8002d48:	372c      	adds	r7, #44	; 0x2c
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	fa93 f3a3 	rbit	r3, r3
 8002d68:	60fb      	str	r3, [r7, #12]
  return result;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <LL_GPIO_Init+0x26>
    return 32U;
 8002d74:	2320      	movs	r3, #32
 8002d76:	e003      	b.n	8002d80 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002d82:	e048      	b.n	8002e16 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d03a      	beq.n	8002e10 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d003      	beq.n	8002daa <LL_GPIO_Init+0x58>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d10e      	bne.n	8002dc8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	461a      	mov	r2, r3
 8002db0:	69b9      	ldr	r1, [r7, #24]
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fed7 	bl	8002b66 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6819      	ldr	r1, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff feb7 	bl	8002b36 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff ff05 	bl	8002be0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d111      	bne.n	8002e02 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2bff      	cmp	r3, #255	; 0xff
 8002de2:	d807      	bhi.n	8002df4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	461a      	mov	r2, r3
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7ff ff34 	bl	8002c5a <LL_GPIO_SetAFPin_0_7>
 8002df2:	e006      	b.n	8002e02 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ff69 	bl	8002cd4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	461a      	mov	r2, r3
 8002e08:	69b9      	ldr	r1, [r7, #24]
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff fe56 	bl	8002abc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	3301      	adds	r3, #1
 8002e14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1af      	bne.n	8002d84 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <LL_RCC_HSI_IsReady+0x24>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e40:	d101      	bne.n	8002e46 <LL_RCC_HSI_IsReady+0x16>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <LL_RCC_HSI_IsReady+0x18>
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <LL_RCC_LSE_IsReady+0x24>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d101      	bne.n	8002e6e <LL_RCC_LSE_IsReady+0x16>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <LL_RCC_LSE_IsReady+0x18>
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000

08002e80 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <LL_RCC_GetSysClkSource+0x18>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 030c 	and.w	r3, r3, #12
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ea0:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <LL_RCC_GetAHBPrescaler+0x18>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <LL_RCC_GetAPB2Prescaler+0x18>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000

08002ef0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <LL_RCC_GetUSARTClockSource+0x24>)
 8002efa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	4313      	orrs	r3, r2
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40021000 	.word	0x40021000

08002f18 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <LL_RCC_GetUARTClockSource+0x24>)
 8002f22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	401a      	ands	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	041b      	lsls	r3, r3, #16
 8002f2e:	4313      	orrs	r3, r2
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	40021000 	.word	0x40021000

08002f40 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <LL_RCC_PLL_GetMainSource+0x18>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0303 	and.w	r3, r3, #3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000

08002f5c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <LL_RCC_PLL_GetN+0x18>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40021000 	.word	0x40021000

08002f78 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <LL_RCC_PLL_GetR+0x18>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000

08002f94 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <LL_RCC_PLL_GetDivider+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d12e      	bne.n	8003020 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff94 	bl	8002ef0 <LL_RCC_GetUSARTClockSource>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4a50      	ldr	r2, [pc, #320]	; (800310c <LL_RCC_GetUSARTClockFreq+0x15c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d009      	beq.n	8002fe4 <LL_RCC_GetUSARTClockFreq+0x34>
 8002fd0:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8002fd4:	d00e      	beq.n	8002ff4 <LL_RCC_GetUSARTClockFreq+0x44>
 8002fd6:	4a4e      	ldr	r2, [pc, #312]	; (8003110 <LL_RCC_GetUSARTClockFreq+0x160>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d114      	bne.n	8003006 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002fdc:	f000 f926 	bl	800322c <RCC_GetSystemClockFreq>
 8002fe0:	60f8      	str	r0, [r7, #12]
        break;
 8002fe2:	e08d      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002fe4:	f7ff ff24 	bl	8002e30 <LL_RCC_HSI_IsReady>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d07b      	beq.n	80030e6 <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <LL_RCC_GetUSARTClockFreq+0x164>)
 8002ff0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002ff2:	e078      	b.n	80030e6 <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002ff4:	f7ff ff30 	bl	8002e58 <LL_RCC_LSE_IsReady>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 8002ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003002:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003004:	e071      	b.n	80030ea <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003006:	f000 f911 	bl	800322c <RCC_GetSystemClockFreq>
 800300a:	4603      	mov	r3, r0
 800300c:	4618      	mov	r0, r3
 800300e:	f000 f92f 	bl	8003270 <RCC_GetHCLKClockFreq>
 8003012:	4603      	mov	r3, r0
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f959 	bl	80032cc <RCC_GetPCLK2ClockFreq>
 800301a:	60f8      	str	r0, [r7, #12]
        break;
 800301c:	bf00      	nop
 800301e:	e06f      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d12e      	bne.n	8003084 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ff62 	bl	8002ef0 <LL_RCC_GetUSARTClockSource>
 800302c:	4603      	mov	r3, r0
 800302e:	4a3a      	ldr	r2, [pc, #232]	; (8003118 <LL_RCC_GetUSARTClockFreq+0x168>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <LL_RCC_GetUSARTClockFreq+0x98>
 8003034:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8003038:	d00e      	beq.n	8003058 <LL_RCC_GetUSARTClockFreq+0xa8>
 800303a:	4a38      	ldr	r2, [pc, #224]	; (800311c <LL_RCC_GetUSARTClockFreq+0x16c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d114      	bne.n	800306a <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003040:	f000 f8f4 	bl	800322c <RCC_GetSystemClockFreq>
 8003044:	60f8      	str	r0, [r7, #12]
        break;
 8003046:	e05b      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003048:	f7ff fef2 	bl	8002e30 <LL_RCC_HSI_IsReady>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d04d      	beq.n	80030ee <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 8003052:	4b30      	ldr	r3, [pc, #192]	; (8003114 <LL_RCC_GetUSARTClockFreq+0x164>)
 8003054:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003056:	e04a      	b.n	80030ee <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003058:	f7ff fefe 	bl	8002e58 <LL_RCC_LSE_IsReady>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d047      	beq.n	80030f2 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 8003062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003066:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003068:	e043      	b.n	80030f2 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800306a:	f000 f8df 	bl	800322c <RCC_GetSystemClockFreq>
 800306e:	4603      	mov	r3, r0
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f8fd 	bl	8003270 <RCC_GetHCLKClockFreq>
 8003076:	4603      	mov	r3, r0
 8003078:	4618      	mov	r0, r3
 800307a:	f000 f911 	bl	80032a0 <RCC_GetPCLK1ClockFreq>
 800307e:	60f8      	str	r0, [r7, #12]
        break;
 8003080:	bf00      	nop
 8003082:	e03d      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d135      	bne.n	80030f6 <LL_RCC_GetUSARTClockFreq+0x146>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff30 	bl	8002ef0 <LL_RCC_GetUSARTClockSource>
 8003090:	4603      	mov	r3, r0
 8003092:	4a23      	ldr	r2, [pc, #140]	; (8003120 <LL_RCC_GetUSARTClockFreq+0x170>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d009      	beq.n	80030ac <LL_RCC_GetUSARTClockFreq+0xfc>
 8003098:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800309c:	d00e      	beq.n	80030bc <LL_RCC_GetUSARTClockFreq+0x10c>
 800309e:	4a21      	ldr	r2, [pc, #132]	; (8003124 <LL_RCC_GetUSARTClockFreq+0x174>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d114      	bne.n	80030ce <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80030a4:	f000 f8c2 	bl	800322c <RCC_GetSystemClockFreq>
 80030a8:	60f8      	str	r0, [r7, #12]
          break;
 80030aa:	e029      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80030ac:	f7ff fec0 	bl	8002e30 <LL_RCC_HSI_IsReady>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d021      	beq.n	80030fa <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = HSI_VALUE;
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <LL_RCC_GetUSARTClockFreq+0x164>)
 80030b8:	60fb      	str	r3, [r7, #12]
          }
          break;
 80030ba:	e01e      	b.n	80030fa <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80030bc:	f7ff fecc 	bl	8002e58 <LL_RCC_LSE_IsReady>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d01b      	beq.n	80030fe <LL_RCC_GetUSARTClockFreq+0x14e>
          {
            usart_frequency = LSE_VALUE;
 80030c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ca:	60fb      	str	r3, [r7, #12]
          }
          break;
 80030cc:	e017      	b.n	80030fe <LL_RCC_GetUSARTClockFreq+0x14e>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80030ce:	f000 f8ad 	bl	800322c <RCC_GetSystemClockFreq>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f8cb 	bl	8003270 <RCC_GetHCLKClockFreq>
 80030da:	4603      	mov	r3, r0
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f8df 	bl	80032a0 <RCC_GetPCLK1ClockFreq>
 80030e2:	60f8      	str	r0, [r7, #12]
          break;
 80030e4:	e00c      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 80030e6:	bf00      	nop
 80030e8:	e00a      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 80030ea:	bf00      	nop
 80030ec:	e008      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 80030ee:	bf00      	nop
 80030f0:	e006      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
      }
    }
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 80030fe:	bf00      	nop
  }
  return usart_frequency;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	00030002 	.word	0x00030002
 8003110:	00030001 	.word	0x00030001
 8003114:	00f42400 	.word	0x00f42400
 8003118:	000c0008 	.word	0x000c0008
 800311c:	000c0004 	.word	0x000c0004
 8003120:	00300020 	.word	0x00300020
 8003124:	00300010 	.word	0x00300010

08003128 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2bc0      	cmp	r3, #192	; 0xc0
 8003138:	d12d      	bne.n	8003196 <LL_RCC_GetUARTClockFreq+0x6e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff feec 	bl	8002f18 <LL_RCC_GetUARTClockSource>
 8003140:	4603      	mov	r3, r0
 8003142:	4a35      	ldr	r2, [pc, #212]	; (8003218 <LL_RCC_GetUARTClockFreq+0xf0>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d009      	beq.n	800315c <LL_RCC_GetUARTClockFreq+0x34>
 8003148:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800314c:	d00e      	beq.n	800316c <LL_RCC_GetUARTClockFreq+0x44>
 800314e:	4a33      	ldr	r2, [pc, #204]	; (800321c <LL_RCC_GetUARTClockFreq+0xf4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d114      	bne.n	800317e <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003154:	f000 f86a 	bl	800322c <RCC_GetSystemClockFreq>
 8003158:	60f8      	str	r0, [r7, #12]
        break;
 800315a:	e021      	b.n	80031a0 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800315c:	f7ff fe68 	bl	8002e30 <LL_RCC_HSI_IsReady>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d019      	beq.n	800319a <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = HSI_VALUE;
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <LL_RCC_GetUARTClockFreq+0xf8>)
 8003168:	60fb      	str	r3, [r7, #12]
        }
        break;
 800316a:	e016      	b.n	800319a <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800316c:	f7ff fe74 	bl	8002e58 <LL_RCC_LSE_IsReady>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d013      	beq.n	800319e <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = LSE_VALUE;
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800317c:	e00f      	b.n	800319e <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800317e:	f000 f855 	bl	800322c <RCC_GetSystemClockFreq>
 8003182:	4603      	mov	r3, r0
 8003184:	4618      	mov	r0, r3
 8003186:	f000 f873 	bl	8003270 <RCC_GetHCLKClockFreq>
 800318a:	4603      	mov	r3, r0
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f887 	bl	80032a0 <RCC_GetPCLK1ClockFreq>
 8003192:	60f8      	str	r0, [r7, #12]
        break;
 8003194:	e004      	b.n	80031a0 <LL_RCC_GetUARTClockFreq+0x78>
    }
  }
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <LL_RCC_GetUARTClockFreq+0x78>
        break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <LL_RCC_GetUARTClockFreq+0x78>
        break;
 800319e:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a6:	d12d      	bne.n	8003204 <LL_RCC_GetUARTClockFreq+0xdc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff feb5 	bl	8002f18 <LL_RCC_GetUARTClockSource>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4a1c      	ldr	r2, [pc, #112]	; (8003224 <LL_RCC_GetUARTClockFreq+0xfc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d009      	beq.n	80031ca <LL_RCC_GetUARTClockFreq+0xa2>
 80031b6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80031ba:	d00e      	beq.n	80031da <LL_RCC_GetUARTClockFreq+0xb2>
 80031bc:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <LL_RCC_GetUARTClockFreq+0x100>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d114      	bne.n	80031ec <LL_RCC_GetUARTClockFreq+0xc4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80031c2:	f000 f833 	bl	800322c <RCC_GetSystemClockFreq>
 80031c6:	60f8      	str	r0, [r7, #12]
        break;
 80031c8:	e021      	b.n	800320e <LL_RCC_GetUARTClockFreq+0xe6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80031ca:	f7ff fe31 	bl	8002e30 <LL_RCC_HSI_IsReady>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d019      	beq.n	8003208 <LL_RCC_GetUARTClockFreq+0xe0>
        {
          uart_frequency = HSI_VALUE;
 80031d4:	4b12      	ldr	r3, [pc, #72]	; (8003220 <LL_RCC_GetUARTClockFreq+0xf8>)
 80031d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80031d8:	e016      	b.n	8003208 <LL_RCC_GetUARTClockFreq+0xe0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80031da:	f7ff fe3d 	bl	8002e58 <LL_RCC_LSE_IsReady>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <LL_RCC_GetUARTClockFreq+0xe4>
        {
          uart_frequency = LSE_VALUE;
 80031e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80031ea:	e00f      	b.n	800320c <LL_RCC_GetUARTClockFreq+0xe4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80031ec:	f000 f81e 	bl	800322c <RCC_GetSystemClockFreq>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f83c 	bl	8003270 <RCC_GetHCLKClockFreq>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 f850 	bl	80032a0 <RCC_GetPCLK1ClockFreq>
 8003200:	60f8      	str	r0, [r7, #12]
        break;
 8003202:	e004      	b.n	800320e <LL_RCC_GetUARTClockFreq+0xe6>
    }
  }
 8003204:	bf00      	nop
 8003206:	e002      	b.n	800320e <LL_RCC_GetUARTClockFreq+0xe6>
        break;
 8003208:	bf00      	nop
 800320a:	e000      	b.n	800320e <LL_RCC_GetUARTClockFreq+0xe6>
        break;
 800320c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800320e:	68fb      	ldr	r3, [r7, #12]
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	00c00080 	.word	0x00c00080
 800321c:	00c00040 	.word	0x00c00040
 8003220:	00f42400 	.word	0x00f42400
 8003224:	03000200 	.word	0x03000200
 8003228:	03000100 	.word	0x03000100

0800322c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003232:	f7ff fe25 	bl	8002e80 <LL_RCC_GetSysClkSource>
 8003236:	4603      	mov	r3, r0
 8003238:	2b08      	cmp	r3, #8
 800323a:	d006      	beq.n	800324a <RCC_GetSystemClockFreq+0x1e>
 800323c:	2b0c      	cmp	r3, #12
 800323e:	d007      	beq.n	8003250 <RCC_GetSystemClockFreq+0x24>
 8003240:	2b04      	cmp	r3, #4
 8003242:	d109      	bne.n	8003258 <RCC_GetSystemClockFreq+0x2c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <RCC_GetSystemClockFreq+0x3c>)
 8003246:	607b      	str	r3, [r7, #4]
      break;
 8003248:	e009      	b.n	800325e <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <RCC_GetSystemClockFreq+0x40>)
 800324c:	607b      	str	r3, [r7, #4]
      break;
 800324e:	e006      	b.n	800325e <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003250:	f000 f852 	bl	80032f8 <RCC_PLL_GetFreqDomain_SYS>
 8003254:	6078      	str	r0, [r7, #4]
      break;
 8003256:	e002      	b.n	800325e <RCC_GetSystemClockFreq+0x32>

    default:
      frequency = HSI_VALUE;
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <RCC_GetSystemClockFreq+0x3c>)
 800325a:	607b      	str	r3, [r7, #4]
      break;
 800325c:	bf00      	nop
  }

  return frequency;
 800325e:	687b      	ldr	r3, [r7, #4]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	00f42400 	.word	0x00f42400
 800326c:	016e3600 	.word	0x016e3600

08003270 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003278:	f7ff fe10 	bl	8002e9c <LL_RCC_GetAHBPrescaler>
 800327c:	4603      	mov	r3, r0
 800327e:	091b      	lsrs	r3, r3, #4
 8003280:	f003 030f 	and.w	r3, r3, #15
 8003284:	4a05      	ldr	r2, [pc, #20]	; (800329c <RCC_GetHCLKClockFreq+0x2c>)
 8003286:	5cd3      	ldrb	r3, [r2, r3]
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	08003904 	.word	0x08003904

080032a0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80032a8:	f7ff fe06 	bl	8002eb8 <LL_RCC_GetAPB1Prescaler>
 80032ac:	4603      	mov	r3, r0
 80032ae:	0a1b      	lsrs	r3, r3, #8
 80032b0:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <RCC_GetPCLK1ClockFreq+0x28>)
 80032b2:	5cd3      	ldrb	r3, [r2, r3]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08003914 	.word	0x08003914

080032cc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80032d4:	f7ff fdfe 	bl	8002ed4 <LL_RCC_GetAPB2Prescaler>
 80032d8:	4603      	mov	r3, r0
 80032da:	0adb      	lsrs	r3, r3, #11
 80032dc:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <RCC_GetPCLK2ClockFreq+0x28>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08003914 	.word	0x08003914

080032f8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80032fe:	f7ff fe1f 	bl	8002f40 <LL_RCC_PLL_GetMainSource>
 8003302:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d002      	beq.n	8003310 <RCC_PLL_GetFreqDomain_SYS+0x18>
 800330a:	2b03      	cmp	r3, #3
 800330c:	d003      	beq.n	8003316 <RCC_PLL_GetFreqDomain_SYS+0x1e>
 800330e:	e005      	b.n	800331c <RCC_PLL_GetFreqDomain_SYS+0x24>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003312:	607b      	str	r3, [r7, #4]
      break;
 8003314:	e005      	b.n	8003322 <RCC_PLL_GetFreqDomain_SYS+0x2a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003318:	607b      	str	r3, [r7, #4]
      break;
 800331a:	e002      	b.n	8003322 <RCC_PLL_GetFreqDomain_SYS+0x2a>

    default:
      pllinputfreq = HSI_VALUE;
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800331e:	607b      	str	r3, [r7, #4]
      break;
 8003320:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003322:	f7ff fe1b 	bl	8002f5c <LL_RCC_PLL_GetN>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	fb03 f402 	mul.w	r4, r3, r2
 800332e:	f7ff fe31 	bl	8002f94 <LL_RCC_PLL_GetDivider>
 8003332:	4603      	mov	r3, r0
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	3301      	adds	r3, #1
 8003338:	fbb4 f4f3 	udiv	r4, r4, r3
 800333c:	f7ff fe1c 	bl	8002f78 <LL_RCC_PLL_GetR>
 8003340:	4603      	mov	r3, r0
 8003342:	0e5b      	lsrs	r3, r3, #25
 8003344:	3301      	adds	r3, #1
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800334c:	4618      	mov	r0, r3
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	00f42400 	.word	0x00f42400
 8003358:	016e3600 	.word	0x016e3600

0800335c <LL_USART_IsEnabled>:
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <LL_USART_IsEnabled+0x18>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <LL_USART_IsEnabled+0x1a>
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_USART_SetPrescaler>:
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	b292      	uxth	r2, r2
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_USART_SetStopBitsLength>:
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	605a      	str	r2, [r3, #4]
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_USART_SetHWFlowCtrl>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	609a      	str	r2, [r3, #8]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <LL_USART_SetBaudRate>:
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b0b      	cmp	r3, #11
 800340a:	d83c      	bhi.n	8003486 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d039      	beq.n	8003486 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003418:	d122      	bne.n	8003460 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <LL_USART_SetBaudRate+0x9c>)
 8003422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	005a      	lsls	r2, r3, #1
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	441a      	add	r2, r3
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	b29b      	uxth	r3, r3
 800343c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003444:	4013      	ands	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	085b      	lsrs	r3, r3, #1
 800344c:	b29b      	uxth	r3, r3
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	60da      	str	r2, [r3, #12]
}
 800345e:	e012      	b.n	8003486 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <LL_USART_SetBaudRate+0x9c>)
 8003468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	441a      	add	r2, r3
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	461a      	mov	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	60da      	str	r2, [r3, #12]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	08003924 	.word	0x08003924

08003498 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff56 	bl	800335c <LL_USART_IsEnabled>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d165      	bne.n	8003582 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <LL_USART_Init+0xf4>)
 80034bc:	4013      	ands	r3, r2
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	6891      	ldr	r1, [r2, #8]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	6912      	ldr	r2, [r2, #16]
 80034c6:	4311      	orrs	r1, r2
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6952      	ldr	r2, [r2, #20]
 80034cc:	4311      	orrs	r1, r2
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	69d2      	ldr	r2, [r2, #28]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4619      	mov	r1, r3
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff62 	bl	80033aa <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff6f 	bl	80033d0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a26      	ldr	r2, [pc, #152]	; (8003590 <LL_USART_Init+0xf8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d104      	bne.n	8003504 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80034fa:	2003      	movs	r0, #3
 80034fc:	f7ff fd58 	bl	8002fb0 <LL_RCC_GetUSARTClockFreq>
 8003500:	60b8      	str	r0, [r7, #8]
 8003502:	e023      	b.n	800354c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a23      	ldr	r2, [pc, #140]	; (8003594 <LL_USART_Init+0xfc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d104      	bne.n	8003516 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 800350c:	200c      	movs	r0, #12
 800350e:	f7ff fd4f 	bl	8002fb0 <LL_RCC_GetUSARTClockFreq>
 8003512:	60b8      	str	r0, [r7, #8]
 8003514:	e01a      	b.n	800354c <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <LL_USART_Init+0x100>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d104      	bne.n	8003528 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800351e:	2030      	movs	r0, #48	; 0x30
 8003520:	f7ff fd46 	bl	8002fb0 <LL_RCC_GetUSARTClockFreq>
 8003524:	60b8      	str	r0, [r7, #8]
 8003526:	e011      	b.n	800354c <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a1c      	ldr	r2, [pc, #112]	; (800359c <LL_USART_Init+0x104>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d104      	bne.n	800353a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003530:	20c0      	movs	r0, #192	; 0xc0
 8003532:	f7ff fdf9 	bl	8003128 <LL_RCC_GetUARTClockFreq>
 8003536:	60b8      	str	r0, [r7, #8]
 8003538:	e008      	b.n	800354c <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <LL_USART_Init+0x108>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d104      	bne.n	800354c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003542:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003546:	f7ff fdef 	bl	8003128 <LL_RCC_GetUARTClockFreq>
 800354a:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d011      	beq.n	8003576 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00d      	beq.n	8003576 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	69d9      	ldr	r1, [r3, #28]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	460b      	mov	r3, r1
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff41 	bl	80033f8 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4619      	mov	r1, r3
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff ff00 	bl	8003382 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	efff69f3 	.word	0xefff69f3
 8003590:	40013800 	.word	0x40013800
 8003594:	40004400 	.word	0x40004400
 8003598:	40004800 	.word	0x40004800
 800359c:	40004c00 	.word	0x40004c00
 80035a0:	40005000 	.word	0x40005000

080035a4 <crc_16>:
 * string of which the beginning has been passed to the function. The number of
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 */

uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <crc_16+0x68>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <crc_16+0x1c>
 80035bc:	f000 f82a 	bl	8003614 <init_crc16_tab>

	crc = CRC_START_16;
 80035c0:	2300      	movs	r3, #0
 80035c2:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <crc_16+0x5c>
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	e011      	b.n	80035f8 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	0a1b      	lsrs	r3, r3, #8
 80035d8:	b29a      	uxth	r2, r3
 80035da:	8af9      	ldrh	r1, [r7, #22]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1c58      	adds	r0, r3, #1
 80035e0:	6138      	str	r0, [r7, #16]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	404b      	eors	r3, r1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	4909      	ldr	r1, [pc, #36]	; (8003610 <crc_16+0x6c>)
 80035ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035ee:	4053      	eors	r3, r2
 80035f0:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d3e9      	bcc.n	80035d4 <crc_16+0x30>
	}

	return crc;
 8003600:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200001e4 	.word	0x200001e4
 8003610:	200001e8 	.word	0x200001e8

08003614 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 800361a:	2300      	movs	r3, #0
 800361c:	80fb      	strh	r3, [r7, #6]
 800361e:	e029      	b.n	8003674 <init_crc16_tab+0x60>

		crc = 0;
 8003620:	2300      	movs	r3, #0
 8003622:	807b      	strh	r3, [r7, #2]
		c   = i;
 8003624:	88fb      	ldrh	r3, [r7, #6]
 8003626:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8003628:	2300      	movs	r3, #0
 800362a:	80bb      	strh	r3, [r7, #4]
 800362c:	e017      	b.n	800365e <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	883b      	ldrh	r3, [r7, #0]
 8003632:	4053      	eors	r3, r2
 8003634:	b29b      	uxth	r3, r3
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <init_crc16_tab+0x38>
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	085b      	lsrs	r3, r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	4b11      	ldr	r3, [pc, #68]	; (800368c <init_crc16_tab+0x78>)
 8003646:	4053      	eors	r3, r2
 8003648:	807b      	strh	r3, [r7, #2]
 800364a:	e002      	b.n	8003652 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 800364c:	887b      	ldrh	r3, [r7, #2]
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8003652:	883b      	ldrh	r3, [r7, #0]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8003658:	88bb      	ldrh	r3, [r7, #4]
 800365a:	3301      	adds	r3, #1
 800365c:	80bb      	strh	r3, [r7, #4]
 800365e:	88bb      	ldrh	r3, [r7, #4]
 8003660:	2b07      	cmp	r3, #7
 8003662:	d9e4      	bls.n	800362e <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <init_crc16_tab+0x7c>)
 8003668:	887a      	ldrh	r2, [r7, #2]
 800366a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	3301      	adds	r3, #1
 8003672:	80fb      	strh	r3, [r7, #6]
 8003674:	88fb      	ldrh	r3, [r7, #6]
 8003676:	2bff      	cmp	r3, #255	; 0xff
 8003678:	d9d2      	bls.n	8003620 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <init_crc16_tab+0x80>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	ffffa001 	.word	0xffffa001
 8003690:	200001e8 	.word	0x200001e8
 8003694:	200001e4 	.word	0x200001e4

08003698 <crc_8>:
 *
 * The function crc_8() calculates the 8 bit wide CRC of an input string of a
 * given length.
 */

uint8_t crc_8( const unsigned char *input_str, size_t num_bytes ) {
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]

	size_t a;
	uint8_t crc;
	const unsigned char *ptr;

	crc = CRC_START_8;
 80036a2:	2300      	movs	r3, #0
 80036a4:	74fb      	strb	r3, [r7, #19]
	ptr = input_str;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	60fb      	str	r3, [r7, #12]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d014      	beq.n	80036da <crc_8+0x42>
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e00d      	b.n	80036d2 <crc_8+0x3a>

		crc = sht75_crc_table[(*ptr++) ^ crc];
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	60fa      	str	r2, [r7, #12]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	4053      	eors	r3, r2
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <crc_8+0x50>)
 80036c8:	5c9b      	ldrb	r3, [r3, r2]
 80036ca:	74fb      	strb	r3, [r7, #19]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3301      	adds	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d3ed      	bcc.n	80036b6 <crc_8+0x1e>
	}

	return crc;
 80036da:	7cfb      	ldrb	r3, [r7, #19]

}  /* crc_8 */
 80036dc:	4618      	mov	r0, r3
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	20000018 	.word	0x20000018

080036ec <__errno>:
 80036ec:	4b01      	ldr	r3, [pc, #4]	; (80036f4 <__errno+0x8>)
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000118 	.word	0x20000118

080036f8 <__libc_init_array>:
 80036f8:	b570      	push	{r4, r5, r6, lr}
 80036fa:	4e0d      	ldr	r6, [pc, #52]	; (8003730 <__libc_init_array+0x38>)
 80036fc:	4c0d      	ldr	r4, [pc, #52]	; (8003734 <__libc_init_array+0x3c>)
 80036fe:	1ba4      	subs	r4, r4, r6
 8003700:	10a4      	asrs	r4, r4, #2
 8003702:	2500      	movs	r5, #0
 8003704:	42a5      	cmp	r5, r4
 8003706:	d109      	bne.n	800371c <__libc_init_array+0x24>
 8003708:	4e0b      	ldr	r6, [pc, #44]	; (8003738 <__libc_init_array+0x40>)
 800370a:	4c0c      	ldr	r4, [pc, #48]	; (800373c <__libc_init_array+0x44>)
 800370c:	f000 f8ea 	bl	80038e4 <_init>
 8003710:	1ba4      	subs	r4, r4, r6
 8003712:	10a4      	asrs	r4, r4, #2
 8003714:	2500      	movs	r5, #0
 8003716:	42a5      	cmp	r5, r4
 8003718:	d105      	bne.n	8003726 <__libc_init_array+0x2e>
 800371a:	bd70      	pop	{r4, r5, r6, pc}
 800371c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003720:	4798      	blx	r3
 8003722:	3501      	adds	r5, #1
 8003724:	e7ee      	b.n	8003704 <__libc_init_array+0xc>
 8003726:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800372a:	4798      	blx	r3
 800372c:	3501      	adds	r5, #1
 800372e:	e7f2      	b.n	8003716 <__libc_init_array+0x1e>
 8003730:	08003954 	.word	0x08003954
 8003734:	08003954 	.word	0x08003954
 8003738:	08003954 	.word	0x08003954
 800373c:	08003958 	.word	0x08003958

08003740 <malloc>:
 8003740:	4b02      	ldr	r3, [pc, #8]	; (800374c <malloc+0xc>)
 8003742:	4601      	mov	r1, r0
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	f000 b861 	b.w	800380c <_malloc_r>
 800374a:	bf00      	nop
 800374c:	20000118 	.word	0x20000118

08003750 <free>:
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <free+0xc>)
 8003752:	4601      	mov	r1, r0
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	f000 b80b 	b.w	8003770 <_free_r>
 800375a:	bf00      	nop
 800375c:	20000118 	.word	0x20000118

08003760 <memset>:
 8003760:	4402      	add	r2, r0
 8003762:	4603      	mov	r3, r0
 8003764:	4293      	cmp	r3, r2
 8003766:	d100      	bne.n	800376a <memset+0xa>
 8003768:	4770      	bx	lr
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7f9      	b.n	8003764 <memset+0x4>

08003770 <_free_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4605      	mov	r5, r0
 8003774:	2900      	cmp	r1, #0
 8003776:	d045      	beq.n	8003804 <_free_r+0x94>
 8003778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800377c:	1f0c      	subs	r4, r1, #4
 800377e:	2b00      	cmp	r3, #0
 8003780:	bfb8      	it	lt
 8003782:	18e4      	addlt	r4, r4, r3
 8003784:	f000 f8ac 	bl	80038e0 <__malloc_lock>
 8003788:	4a1f      	ldr	r2, [pc, #124]	; (8003808 <_free_r+0x98>)
 800378a:	6813      	ldr	r3, [r2, #0]
 800378c:	4610      	mov	r0, r2
 800378e:	b933      	cbnz	r3, 800379e <_free_r+0x2e>
 8003790:	6063      	str	r3, [r4, #4]
 8003792:	6014      	str	r4, [r2, #0]
 8003794:	4628      	mov	r0, r5
 8003796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800379a:	f000 b8a2 	b.w	80038e2 <__malloc_unlock>
 800379e:	42a3      	cmp	r3, r4
 80037a0:	d90c      	bls.n	80037bc <_free_r+0x4c>
 80037a2:	6821      	ldr	r1, [r4, #0]
 80037a4:	1862      	adds	r2, r4, r1
 80037a6:	4293      	cmp	r3, r2
 80037a8:	bf04      	itt	eq
 80037aa:	681a      	ldreq	r2, [r3, #0]
 80037ac:	685b      	ldreq	r3, [r3, #4]
 80037ae:	6063      	str	r3, [r4, #4]
 80037b0:	bf04      	itt	eq
 80037b2:	1852      	addeq	r2, r2, r1
 80037b4:	6022      	streq	r2, [r4, #0]
 80037b6:	6004      	str	r4, [r0, #0]
 80037b8:	e7ec      	b.n	8003794 <_free_r+0x24>
 80037ba:	4613      	mov	r3, r2
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	b10a      	cbz	r2, 80037c4 <_free_r+0x54>
 80037c0:	42a2      	cmp	r2, r4
 80037c2:	d9fa      	bls.n	80037ba <_free_r+0x4a>
 80037c4:	6819      	ldr	r1, [r3, #0]
 80037c6:	1858      	adds	r0, r3, r1
 80037c8:	42a0      	cmp	r0, r4
 80037ca:	d10b      	bne.n	80037e4 <_free_r+0x74>
 80037cc:	6820      	ldr	r0, [r4, #0]
 80037ce:	4401      	add	r1, r0
 80037d0:	1858      	adds	r0, r3, r1
 80037d2:	4282      	cmp	r2, r0
 80037d4:	6019      	str	r1, [r3, #0]
 80037d6:	d1dd      	bne.n	8003794 <_free_r+0x24>
 80037d8:	6810      	ldr	r0, [r2, #0]
 80037da:	6852      	ldr	r2, [r2, #4]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	4401      	add	r1, r0
 80037e0:	6019      	str	r1, [r3, #0]
 80037e2:	e7d7      	b.n	8003794 <_free_r+0x24>
 80037e4:	d902      	bls.n	80037ec <_free_r+0x7c>
 80037e6:	230c      	movs	r3, #12
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	e7d3      	b.n	8003794 <_free_r+0x24>
 80037ec:	6820      	ldr	r0, [r4, #0]
 80037ee:	1821      	adds	r1, r4, r0
 80037f0:	428a      	cmp	r2, r1
 80037f2:	bf04      	itt	eq
 80037f4:	6811      	ldreq	r1, [r2, #0]
 80037f6:	6852      	ldreq	r2, [r2, #4]
 80037f8:	6062      	str	r2, [r4, #4]
 80037fa:	bf04      	itt	eq
 80037fc:	1809      	addeq	r1, r1, r0
 80037fe:	6021      	streq	r1, [r4, #0]
 8003800:	605c      	str	r4, [r3, #4]
 8003802:	e7c7      	b.n	8003794 <_free_r+0x24>
 8003804:	bd38      	pop	{r3, r4, r5, pc}
 8003806:	bf00      	nop
 8003808:	200003e8 	.word	0x200003e8

0800380c <_malloc_r>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	1ccd      	adds	r5, r1, #3
 8003810:	f025 0503 	bic.w	r5, r5, #3
 8003814:	3508      	adds	r5, #8
 8003816:	2d0c      	cmp	r5, #12
 8003818:	bf38      	it	cc
 800381a:	250c      	movcc	r5, #12
 800381c:	2d00      	cmp	r5, #0
 800381e:	4606      	mov	r6, r0
 8003820:	db01      	blt.n	8003826 <_malloc_r+0x1a>
 8003822:	42a9      	cmp	r1, r5
 8003824:	d903      	bls.n	800382e <_malloc_r+0x22>
 8003826:	230c      	movs	r3, #12
 8003828:	6033      	str	r3, [r6, #0]
 800382a:	2000      	movs	r0, #0
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	f000 f857 	bl	80038e0 <__malloc_lock>
 8003832:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <_malloc_r+0xac>)
 8003834:	6814      	ldr	r4, [r2, #0]
 8003836:	4621      	mov	r1, r4
 8003838:	b991      	cbnz	r1, 8003860 <_malloc_r+0x54>
 800383a:	4c20      	ldr	r4, [pc, #128]	; (80038bc <_malloc_r+0xb0>)
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	b91b      	cbnz	r3, 8003848 <_malloc_r+0x3c>
 8003840:	4630      	mov	r0, r6
 8003842:	f000 f83d 	bl	80038c0 <_sbrk_r>
 8003846:	6020      	str	r0, [r4, #0]
 8003848:	4629      	mov	r1, r5
 800384a:	4630      	mov	r0, r6
 800384c:	f000 f838 	bl	80038c0 <_sbrk_r>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d124      	bne.n	800389e <_malloc_r+0x92>
 8003854:	230c      	movs	r3, #12
 8003856:	6033      	str	r3, [r6, #0]
 8003858:	4630      	mov	r0, r6
 800385a:	f000 f842 	bl	80038e2 <__malloc_unlock>
 800385e:	e7e4      	b.n	800382a <_malloc_r+0x1e>
 8003860:	680b      	ldr	r3, [r1, #0]
 8003862:	1b5b      	subs	r3, r3, r5
 8003864:	d418      	bmi.n	8003898 <_malloc_r+0x8c>
 8003866:	2b0b      	cmp	r3, #11
 8003868:	d90f      	bls.n	800388a <_malloc_r+0x7e>
 800386a:	600b      	str	r3, [r1, #0]
 800386c:	50cd      	str	r5, [r1, r3]
 800386e:	18cc      	adds	r4, r1, r3
 8003870:	4630      	mov	r0, r6
 8003872:	f000 f836 	bl	80038e2 <__malloc_unlock>
 8003876:	f104 000b 	add.w	r0, r4, #11
 800387a:	1d23      	adds	r3, r4, #4
 800387c:	f020 0007 	bic.w	r0, r0, #7
 8003880:	1ac3      	subs	r3, r0, r3
 8003882:	d0d3      	beq.n	800382c <_malloc_r+0x20>
 8003884:	425a      	negs	r2, r3
 8003886:	50e2      	str	r2, [r4, r3]
 8003888:	e7d0      	b.n	800382c <_malloc_r+0x20>
 800388a:	428c      	cmp	r4, r1
 800388c:	684b      	ldr	r3, [r1, #4]
 800388e:	bf16      	itet	ne
 8003890:	6063      	strne	r3, [r4, #4]
 8003892:	6013      	streq	r3, [r2, #0]
 8003894:	460c      	movne	r4, r1
 8003896:	e7eb      	b.n	8003870 <_malloc_r+0x64>
 8003898:	460c      	mov	r4, r1
 800389a:	6849      	ldr	r1, [r1, #4]
 800389c:	e7cc      	b.n	8003838 <_malloc_r+0x2c>
 800389e:	1cc4      	adds	r4, r0, #3
 80038a0:	f024 0403 	bic.w	r4, r4, #3
 80038a4:	42a0      	cmp	r0, r4
 80038a6:	d005      	beq.n	80038b4 <_malloc_r+0xa8>
 80038a8:	1a21      	subs	r1, r4, r0
 80038aa:	4630      	mov	r0, r6
 80038ac:	f000 f808 	bl	80038c0 <_sbrk_r>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d0cf      	beq.n	8003854 <_malloc_r+0x48>
 80038b4:	6025      	str	r5, [r4, #0]
 80038b6:	e7db      	b.n	8003870 <_malloc_r+0x64>
 80038b8:	200003e8 	.word	0x200003e8
 80038bc:	200003ec 	.word	0x200003ec

080038c0 <_sbrk_r>:
 80038c0:	b538      	push	{r3, r4, r5, lr}
 80038c2:	4c06      	ldr	r4, [pc, #24]	; (80038dc <_sbrk_r+0x1c>)
 80038c4:	2300      	movs	r3, #0
 80038c6:	4605      	mov	r5, r0
 80038c8:	4608      	mov	r0, r1
 80038ca:	6023      	str	r3, [r4, #0]
 80038cc:	f7fd fbde 	bl	800108c <_sbrk>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d102      	bne.n	80038da <_sbrk_r+0x1a>
 80038d4:	6823      	ldr	r3, [r4, #0]
 80038d6:	b103      	cbz	r3, 80038da <_sbrk_r+0x1a>
 80038d8:	602b      	str	r3, [r5, #0]
 80038da:	bd38      	pop	{r3, r4, r5, pc}
 80038dc:	200003f4 	.word	0x200003f4

080038e0 <__malloc_lock>:
 80038e0:	4770      	bx	lr

080038e2 <__malloc_unlock>:
 80038e2:	4770      	bx	lr

080038e4 <_init>:
 80038e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e6:	bf00      	nop
 80038e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ea:	bc08      	pop	{r3}
 80038ec:	469e      	mov	lr, r3
 80038ee:	4770      	bx	lr

080038f0 <_fini>:
 80038f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f2:	bf00      	nop
 80038f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f6:	bc08      	pop	{r3}
 80038f8:	469e      	mov	lr, r3
 80038fa:	4770      	bx	lr
