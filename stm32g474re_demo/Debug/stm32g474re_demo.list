
stm32g474re_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd4  08004bd4  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd4  08004bd4  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd4  08004bd4  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08004bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000017c  08004d58  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08004d58  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d84  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003343  00000000  00000000  00033f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed0  00000000  00000000  00038310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000288e7  00000000  00000000  000391e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010628  00000000  00000000  00061ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3c3d  00000000  00000000  000720ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165d2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  00165da8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000017c 	.word	0x2000017c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004b64 	.word	0x08004b64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000180 	.word	0x20000180
 8000214:	08004b64 	.word	0x08004b64

08000218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <__NVIC_GetPriorityGrouping+0x18>)
 800021e:	68db      	ldr	r3, [r3, #12]
 8000220:	0a1b      	lsrs	r3, r3, #8
 8000222:	f003 0307 	and.w	r3, r3, #7
}
 8000226:	4618      	mov	r0, r3
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	2b00      	cmp	r3, #0
 8000244:	db0b      	blt.n	800025e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	f003 021f 	and.w	r2, r3, #31
 800024c:	4907      	ldr	r1, [pc, #28]	; (800026c <__NVIC_EnableIRQ+0x38>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	095b      	lsrs	r3, r3, #5
 8000254:	2001      	movs	r0, #1
 8000256:	fa00 f202 	lsl.w	r2, r0, r2
 800025a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800025e:	bf00      	nop
 8000260:	370c      	adds	r7, #12
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	e000e100 	.word	0xe000e100

08000270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000280:	2b00      	cmp	r3, #0
 8000282:	db0a      	blt.n	800029a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	b2da      	uxtb	r2, r3
 8000288:	490c      	ldr	r1, [pc, #48]	; (80002bc <__NVIC_SetPriority+0x4c>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	0112      	lsls	r2, r2, #4
 8000290:	b2d2      	uxtb	r2, r2
 8000292:	440b      	add	r3, r1
 8000294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000298:	e00a      	b.n	80002b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029a:	683b      	ldr	r3, [r7, #0]
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4908      	ldr	r1, [pc, #32]	; (80002c0 <__NVIC_SetPriority+0x50>)
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	f003 030f 	and.w	r3, r3, #15
 80002a6:	3b04      	subs	r3, #4
 80002a8:	0112      	lsls	r2, r2, #4
 80002aa:	b2d2      	uxtb	r2, r2
 80002ac:	440b      	add	r3, r1
 80002ae:	761a      	strb	r2, [r3, #24]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	e000e100 	.word	0xe000e100
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b089      	sub	sp, #36	; 0x24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	f003 0307 	and.w	r3, r3, #7
 80002d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d8:	69fb      	ldr	r3, [r7, #28]
 80002da:	f1c3 0307 	rsb	r3, r3, #7
 80002de:	2b04      	cmp	r3, #4
 80002e0:	bf28      	it	cs
 80002e2:	2304      	movcs	r3, #4
 80002e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3304      	adds	r3, #4
 80002ea:	2b06      	cmp	r3, #6
 80002ec:	d902      	bls.n	80002f4 <NVIC_EncodePriority+0x30>
 80002ee:	69fb      	ldr	r3, [r7, #28]
 80002f0:	3b03      	subs	r3, #3
 80002f2:	e000      	b.n	80002f6 <NVIC_EncodePriority+0x32>
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000302:	43da      	mvns	r2, r3
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	401a      	ands	r2, r3
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800030c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	43d9      	mvns	r1, r3
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800031c:	4313      	orrs	r3, r2
         );
}
 800031e:	4618      	mov	r0, r3
 8000320:	3724      	adds	r7, #36	; 0x24
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000338:	4907      	ldr	r1, [pc, #28]	; (8000358 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4313      	orrs	r3, r2
 800033e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000342:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4013      	ands	r3, r2
 8000348:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800034a:	68fb      	ldr	r3, [r7, #12]
}
 800034c:	bf00      	nop
 800034e:	3714      	adds	r7, #20
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	40021000 	.word	0x40021000

0800035c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8000360:	2004      	movs	r0, #4
 8000362:	f7ff ffe3 	bl	800032c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000366:	2001      	movs	r0, #1
 8000368:	f7ff ffe0 	bl	800032c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800036c:	f7ff ff54 	bl	8000218 <__NVIC_GetPriorityGrouping>
 8000370:	4603      	mov	r3, r0
 8000372:	2200      	movs	r2, #0
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffa4 	bl	80002c4 <NVIC_EncodePriority>
 800037c:	4603      	mov	r3, r0
 800037e:	4619      	mov	r1, r3
 8000380:	200c      	movs	r0, #12
 8000382:	f7ff ff75 	bl	8000270 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000386:	200c      	movs	r0, #12
 8000388:	f7ff ff54 	bl	8000234 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800038c:	f7ff ff44 	bl	8000218 <__NVIC_GetPriorityGrouping>
 8000390:	4603      	mov	r3, r0
 8000392:	2200      	movs	r2, #0
 8000394:	2100      	movs	r1, #0
 8000396:	4618      	mov	r0, r3
 8000398:	f7ff ff94 	bl	80002c4 <NVIC_EncodePriority>
 800039c:	4603      	mov	r3, r0
 800039e:	4619      	mov	r1, r3
 80003a0:	200d      	movs	r0, #13
 80003a2:	f7ff ff65 	bl	8000270 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003a6:	200d      	movs	r0, #13
 80003a8:	f7ff ff44 	bl	8000234 <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2100      	movs	r1, #0
 80003b0:	200e      	movs	r0, #14
 80003b2:	f001 f91c 	bl	80015ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003b6:	200e      	movs	r0, #14
 80003b8:	f001 f933 	bl	8001622 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2100      	movs	r1, #0
 80003c0:	200f      	movs	r0, #15
 80003c2:	f001 f914 	bl	80015ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003c6:	200f      	movs	r0, #15
 80003c8:	f001 f92b 	bl	8001622 <HAL_NVIC_EnableIRQ>

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <__NVIC_GetPriorityGrouping>:
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <__NVIC_GetPriorityGrouping+0x18>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	0a1b      	lsrs	r3, r3, #8
 80003da:	f003 0307 	and.w	r3, r3, #7
}
 80003de:	4618      	mov	r0, r3
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <__NVIC_EnableIRQ>:
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db0b      	blt.n	8000416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 021f 	and.w	r2, r3, #31
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <__NVIC_EnableIRQ+0x38>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <__NVIC_SetPriority>:
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	db0a      	blt.n	8000452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	490c      	ldr	r1, [pc, #48]	; (8000474 <__NVIC_SetPriority+0x4c>)
 8000442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000446:	0112      	lsls	r2, r2, #4
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	440b      	add	r3, r1
 800044c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000450:	e00a      	b.n	8000468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4908      	ldr	r1, [pc, #32]	; (8000478 <__NVIC_SetPriority+0x50>)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	f003 030f 	and.w	r3, r3, #15
 800045e:	3b04      	subs	r3, #4
 8000460:	0112      	lsls	r2, r2, #4
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	440b      	add	r3, r1
 8000466:	761a      	strb	r2, [r3, #24]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000e100 	.word	0xe000e100
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <NVIC_EncodePriority>:
{
 800047c:	b480      	push	{r7}
 800047e:	b089      	sub	sp, #36	; 0x24
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	f003 0307 	and.w	r3, r3, #7
 800048e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000490:	69fb      	ldr	r3, [r7, #28]
 8000492:	f1c3 0307 	rsb	r3, r3, #7
 8000496:	2b04      	cmp	r3, #4
 8000498:	bf28      	it	cs
 800049a:	2304      	movcs	r3, #4
 800049c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800049e:	69fb      	ldr	r3, [r7, #28]
 80004a0:	3304      	adds	r3, #4
 80004a2:	2b06      	cmp	r3, #6
 80004a4:	d902      	bls.n	80004ac <NVIC_EncodePriority+0x30>
 80004a6:	69fb      	ldr	r3, [r7, #28]
 80004a8:	3b03      	subs	r3, #3
 80004aa:	e000      	b.n	80004ae <NVIC_EncodePriority+0x32>
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80004b4:	69bb      	ldr	r3, [r7, #24]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	43da      	mvns	r2, r3
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	401a      	ands	r2, r3
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43d9      	mvns	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d4:	4313      	orrs	r3, r2
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3724      	adds	r7, #36	; 0x24
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80004ee:	4a18      	ldr	r2, [pc, #96]	; (8000550 <LL_SYSCFG_SetEXTISource+0x6c>)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	f003 0303 	and.w	r3, r3, #3
 80004f6:	3302      	adds	r3, #2
 80004f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	0c1b      	lsrs	r3, r3, #16
 8000500:	43db      	mvns	r3, r3
 8000502:	ea02 0103 	and.w	r1, r2, r3
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	0c1b      	lsrs	r3, r3, #16
 800050a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800050c:	693b      	ldr	r3, [r7, #16]
 800050e:	fa93 f3a3 	rbit	r3, r3
 8000512:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d101      	bne.n	8000522 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 800051e:	2320      	movs	r3, #32
 8000520:	e003      	b.n	800052a <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	fab3 f383 	clz	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 031f 	and.w	r3, r3, #31
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	409a      	lsls	r2, r3
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	f003 0303 	and.w	r3, r3, #3
 800053a:	430a      	orrs	r2, r1
 800053c:	3302      	adds	r3, #2
 800053e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000542:	bf00      	nop
 8000544:	371c      	adds	r7, #28
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40010000 	.word	0x40010000

08000554 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000554:	b480      	push	{r7}
 8000556:	b08b      	sub	sp, #44	; 0x2c
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	fa93 f3a3 	rbit	r3, r3
 800056e:	613b      	str	r3, [r7, #16]
  return result;
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000574:	69bb      	ldr	r3, [r7, #24]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d101      	bne.n	800057e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800057a:	2320      	movs	r3, #32
 800057c:	e003      	b.n	8000586 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	fab3 f383 	clz	r3, r3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	2103      	movs	r1, #3
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	401a      	ands	r2, r3
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000596:	6a3b      	ldr	r3, [r7, #32]
 8000598:	fa93 f3a3 	rbit	r3, r3
 800059c:	61fb      	str	r3, [r7, #28]
  return result;
 800059e:	69fb      	ldr	r3, [r7, #28]
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80005a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d101      	bne.n	80005ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80005a8:	2320      	movs	r3, #32
 80005aa:	e003      	b.n	80005b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80005ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ae:	fab3 f383 	clz	r3, r3
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	431a      	orrs	r2, r3
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	601a      	str	r2, [r3, #0]
}
 80005c2:	bf00      	nop
 80005c4:	372c      	adds	r7, #44	; 0x2c
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b08b      	sub	sp, #44	; 0x2c
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	60b9      	str	r1, [r7, #8]
 80005d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	68da      	ldr	r2, [r3, #12]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	fa93 f3a3 	rbit	r3, r3
 80005e8:	613b      	str	r3, [r7, #16]
  return result;
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d101      	bne.n	80005f8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80005f4:	2320      	movs	r3, #32
 80005f6:	e003      	b.n	8000600 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	fab3 f383 	clz	r3, r3
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	2103      	movs	r1, #3
 8000604:	fa01 f303 	lsl.w	r3, r1, r3
 8000608:	43db      	mvns	r3, r3
 800060a:	401a      	ands	r2, r3
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000610:	6a3b      	ldr	r3, [r7, #32]
 8000612:	fa93 f3a3 	rbit	r3, r3
 8000616:	61fb      	str	r3, [r7, #28]
  return result;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061e:	2b00      	cmp	r3, #0
 8000620:	d101      	bne.n	8000626 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000622:	2320      	movs	r3, #32
 8000624:	e003      	b.n	800062e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000628:	fab3 f383 	clz	r3, r3
 800062c:	b2db      	uxtb	r3, r3
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	fa01 f303 	lsl.w	r3, r1, r3
 8000636:	431a      	orrs	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	60da      	str	r2, [r3, #12]
}
 800063c:	bf00      	nop
 800063e:	372c      	adds	r7, #44	; 0x2c
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800066e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4313      	orrs	r3, r2
 8000676:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800067a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4013      	ands	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000682:	68fb      	ldr	r3, [r7, #12]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80006b6:	2004      	movs	r0, #4
 80006b8:	f7ff ffd4 	bl	8000664 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ffd1 	bl	8000664 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f7ff ffce 	bl	8000664 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CE_GPIO_Port, CE_Pin);
 80006c8:	2140      	movs	r1, #64	; 0x40
 80006ca:	482a      	ldr	r0, [pc, #168]	; (8000774 <MX_GPIO_Init+0xe0>)
 80006cc:	f7ff ffbc 	bl	8000648 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CE_Pin;
 80006d0:	2340      	movs	r3, #64	; 0x40
 80006d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80006e0:	2302      	movs	r3, #2
 80006e2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4822      	ldr	r0, [pc, #136]	; (8000774 <MX_GPIO_Init+0xe0>)
 80006ea:	f002 ff02 	bl	80034f2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DWM_IRQ_Pin;
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80006f6:	2302      	movs	r3, #2
 80006f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DWM_IRQ_GPIO_Port, &GPIO_InitStruct);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	481d      	ldr	r0, [pc, #116]	; (8000774 <MX_GPIO_Init+0xe0>)
 8000700:	f002 fef7 	bl	80034f2 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE12);
 8000704:	491c      	ldr	r1, [pc, #112]	; (8000778 <MX_GPIO_Init+0xe4>)
 8000706:	2000      	movs	r0, #0
 8000708:	f7ff feec 	bl	80004e4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000712:	2301      	movs	r3, #1
 8000714:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000718:	2300      	movs	r3, #0
 800071a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800071e:	2301      	movs	r3, #1
 8000720:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4618      	mov	r0, r3
 800072a:	f002 fca9 	bl	8003080 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(DWM_IRQA12_GPIO_Port, DWM_IRQA12_Pin, LL_GPIO_PULL_DOWN);
 800072e:	2202      	movs	r2, #2
 8000730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000738:	f7ff ff49 	bl	80005ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(DWM_IRQA12_GPIO_Port, DWM_IRQA12_Pin, LL_GPIO_MODE_INPUT);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000746:	f7ff ff05 	bl	8000554 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800074a:	f7ff fe41 	bl	80003d0 <__NVIC_GetPriorityGrouping>
 800074e:	4603      	mov	r3, r0
 8000750:	2200      	movs	r2, #0
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe91 	bl	800047c <NVIC_EncodePriority>
 800075a:	4603      	mov	r3, r0
 800075c:	4619      	mov	r1, r3
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe62 	bl	8000428 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000764:	2028      	movs	r0, #40	; 0x28
 8000766:	f7ff fe41 	bl	80003ec <__NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	; 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	48000800 	.word	0x48000800
 8000778:	000f0003 	.word	0x000f0003

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fde9 	bl	8001356 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f80f 	bl	80007a6 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Comm_BufInit_Hal();
 8000788:	f003 fe60 	bl	800444c <Comm_BufInit_Hal>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f7ff ff82 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000790:	f7ff fde4 	bl	800035c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000794:	f000 fcda 	bl	800114c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000798:	f000 f870 	bl	800087c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  Comm_DMAUconf_Hal();
 800079c:	f003 fe6a 	bl	8004474 <Comm_DMAUconf_Hal>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  My_Sched_Loop();
 80007a0:	f004 f8a6 	bl	80048f0 <My_Sched_Loop>
 80007a4:	e7fc      	b.n	80007a0 <main+0x24>

080007a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b0a8      	sub	sp, #160	; 0xa0
 80007aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007b0:	2238      	movs	r2, #56	; 0x38
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 f913 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2254      	movs	r2, #84	; 0x54
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f004 f905 	bl	80049e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f001 fa7a 	bl	8001cd0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007f6:	2304      	movs	r3, #4
 80007f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007fc:	2355      	movs	r3, #85	; 0x55
 80007fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fb0d 	bl	8001e38 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000824:	f000 f826 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2303      	movs	r3, #3
 800082e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000840:	2104      	movs	r1, #4
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fe10 	bl	8002468 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800084e:	f000 f811 	bl	8000874 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000852:	2301      	movs	r3, #1
 8000854:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	4618      	mov	r0, r3
 800085e:	f001 ffe7 	bl	8002830 <HAL_RCCEx_PeriphCLKConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000868:	f000 f804 	bl	8000874 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	37a0      	adds	r7, #160	; 0xa0
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087a:	e7fe      	b.n	800087a <Error_Handler+0x6>

0800087c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000882:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <MX_SPI1_Init+0x78>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x74>)
 8000896:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800089a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a2:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b2:	2220      	movs	r2, #32
 80008b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008ca:	2207      	movs	r2, #7
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_SPI1_Init+0x74>)
 80008dc:	f002 f9f4 	bl	8002cc8 <HAL_SPI_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008e6:	f7ff ffc5 	bl	8000874 <Error_Handler>
  }

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200003f0 	.word	0x200003f0
 80008f4:	40013000 	.word	0x40013000

080008f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a50      	ldr	r2, [pc, #320]	; (8000a58 <HAL_SPI_MspInit+0x160>)
 8000916:	4293      	cmp	r3, r2
 8000918:	f040 809a 	bne.w	8000a50 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800091c:	4b4f      	ldr	r3, [pc, #316]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 800091e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000920:	4a4e      	ldr	r2, [pc, #312]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 8000922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000926:	6613      	str	r3, [r2, #96]	; 0x60
 8000928:	4b4c      	ldr	r3, [pc, #304]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 800092a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b49      	ldr	r3, [pc, #292]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 8000936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000938:	4a48      	ldr	r2, [pc, #288]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 8000942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b43      	ldr	r3, [pc, #268]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 800094e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000950:	4a42      	ldr	r2, [pc, #264]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000958:	4b40      	ldr	r3, [pc, #256]	; (8000a5c <HAL_SPI_MspInit+0x164>)
 800095a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000976:	2305      	movs	r3, #5
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000984:	f001 f822 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000988:	2338      	movs	r3, #56	; 0x38
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000998:	2305      	movs	r3, #5
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <HAL_SPI_MspInit+0x168>)
 80009a4:	f001 f812 	bl	80019cc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 80009a8:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009aa:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <HAL_SPI_MspInit+0x170>)
 80009ac:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009b0:	220b      	movs	r2, #11
 80009b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009b6:	2210      	movs	r2, #16
 80009b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009e2:	f000 fe39 	bl	8001658 <HAL_DMA_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 80009ec:	f7ff ff42 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a1c      	ldr	r2, [pc, #112]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009f4:	655a      	str	r2, [r3, #84]	; 0x54
 80009f6:	4a1b      	ldr	r2, [pc, #108]	; (8000a64 <HAL_SPI_MspInit+0x16c>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel5;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <HAL_SPI_MspInit+0x178>)
 8000a00:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a04:	220a      	movs	r2, #10
 8000a06:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a16:	2280      	movs	r2, #128	; 0x80
 8000a18:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a36:	f000 fe0f 	bl	8001658 <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 8000a40:	f7ff ff18 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a48:	659a      	str	r2, [r3, #88]	; 0x58
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_SPI_MspInit+0x174>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	; 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40013000 	.word	0x40013000
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000400 	.word	0x48000400
 8000a64:	200004b4 	.word	0x200004b4
 8000a68:	40020044 	.word	0x40020044
 8000a6c:	20000454 	.word	0x20000454
 8000a70:	40020058 	.word	0x40020058

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x44>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x44>)
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aaa:	f001 f9b5 	bl	8001e18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40021000 	.word	0x40021000

08000abc <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000ac6:	695a      	ldr	r2, [r3, #20]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4013      	ands	r3, r2
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d101      	bne.n	8000ad6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	40010400 	.word	0x40010400

08000ae8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6153      	str	r3, [r2, #20]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40010400 	.word	0x40010400

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 fc52 	bl	80013fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
	Comm_DMA_CHAN2_Handler();
 8000b60:	f003 fd46 	bl	80045f0 <Comm_DMA_CHAN2_Handler>
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	Comm_DMA_CHAN3_Handler();
 8000b6c:	f003 fd5e 	bl	800462c <Comm_DMA_CHAN3_Handler>
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <DMA1_Channel4_IRQHandler+0x10>)
 8000b7a:	f000 fe15 	bl	80017a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200004b4 	.word	0x200004b4

08000b88 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <DMA1_Channel5_IRQHandler+0x10>)
 8000b8e:	f000 fe0b 	bl	80017a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000454 	.word	0x20000454

08000b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Comm_USART1_Handler();
 8000ba0:	f003 fd9a 	bl	80046d8 <Comm_USART1_Handler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_12) != RESET)
 8000bac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bb0:	f7ff ff84 	bl	8000abc <LL_EXTI_IsActiveFlag_0_31>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_12);
 8000bba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bbe:	f7ff ff93 	bl	8000ae8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_12 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f003 feb8 	bl	800496c <__errno>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	230c      	movs	r3, #12
 8000c00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20020000 	.word	0x20020000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000198 	.word	0x20000198
 8000c30:	20000520 	.word	0x20000520

08000c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <SystemInit+0x28>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a07      	ldr	r2, [pc, #28]	; (8000c5c <SystemInit+0x28>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SystemInit+0x28>)
 8000c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	4413      	add	r3, r2
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d98:	f023 0310 	bic.w	r3, r3, #16
 8000d9c:	4908      	ldr	r1, [pc, #32]	; (8000dc0 <LL_DMA_SetDataTransferDirection+0x4c>)
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	440a      	add	r2, r1
 8000da2:	7812      	ldrb	r2, [r2, #0]
 8000da4:	4611      	mov	r1, r2
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	440a      	add	r2, r1
 8000daa:	4611      	mov	r1, r2
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	08004b94 	.word	0x08004b94

08000dc4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8000dd4:	4a0d      	ldr	r2, [pc, #52]	; (8000e0c <LL_DMA_SetMode+0x48>)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	4413      	add	r3, r2
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 0220 	bic.w	r2, r3, #32
 8000de8:	4908      	ldr	r1, [pc, #32]	; (8000e0c <LL_DMA_SetMode+0x48>)
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	440b      	add	r3, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	4619      	mov	r1, r3
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	440b      	add	r3, r1
 8000df6:	4619      	mov	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	08004b94 	.word	0x08004b94

08000e10 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <LL_DMA_SetPeriphIncMode+0x48>)
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	4413      	add	r3, r2
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e34:	4908      	ldr	r1, [pc, #32]	; (8000e58 <LL_DMA_SetPeriphIncMode+0x48>)
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	440b      	add	r3, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	440b      	add	r3, r1
 8000e42:	4619      	mov	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000e4a:	bf00      	nop
 8000e4c:	371c      	adds	r7, #28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	08004b94 	.word	0x08004b94

08000e5c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <LL_DMA_SetMemoryIncMode+0x48>)
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	4413      	add	r3, r2
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	4413      	add	r3, r2
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e80:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <LL_DMA_SetMemoryIncMode+0x48>)
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	440b      	add	r3, r1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	440b      	add	r3, r1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000e96:	bf00      	nop
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	08004b94 	.word	0x08004b94

08000ea8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LL_DMA_SetPeriphSize+0x48>)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ecc:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <LL_DMA_SetPeriphSize+0x48>)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	440b      	add	r3, r1
 8000eda:	4619      	mov	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000ee2:	bf00      	nop
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	08004b94 	.word	0x08004b94

08000ef4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <LL_DMA_SetMemorySize+0x48>)
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	4413      	add	r3, r2
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	4413      	add	r3, r2
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000f18:	4908      	ldr	r1, [pc, #32]	; (8000f3c <LL_DMA_SetMemorySize+0x48>)
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	440b      	add	r3, r1
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	440b      	add	r3, r1
 8000f26:	4619      	mov	r1, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000f2e:	bf00      	nop
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	08004b94 	.word	0x08004b94

08000f40 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b087      	sub	sp, #28
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000f64:	4908      	ldr	r1, [pc, #32]	; (8000f88 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	440b      	add	r3, r1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	440b      	add	r3, r1
 8000f72:	4619      	mov	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000f7a:	bf00      	nop
 8000f7c:	371c      	adds	r7, #28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	08004b94 	.word	0x08004b94

08000f8c <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b087      	sub	sp, #28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	0a9b      	lsrs	r3, r3, #10
 8000f9c:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000fa0:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fb4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fca:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f043 0201 	orr.w	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	075b      	lsls	r3, r3, #29
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	065b      	lsls	r3, r3, #25
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	609a      	str	r2, [r3, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010b0:	d101      	bne.n	80010b6 <LL_USART_IsActiveFlag_TEACK+0x1a>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <LL_USART_IsActiveFlag_TEACK+0x1c>
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010d8:	d101      	bne.n	80010de <LL_USART_IsActiveFlag_REACK+0x1a>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <LL_USART_IsActiveFlag_REACK+0x1c>
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_AHB2_GRP1_EnableClock>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001102:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4013      	ands	r3, r2
 8001108:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110a:	68fb      	ldr	r3, [r7, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40021000 	.word	0x40021000

0800111c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001126:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <LL_APB2_GRP1_EnableClock+0x2c>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4313      	orrs	r3, r2
 800112e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001132:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	bf00      	nop
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000

0800114c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2220      	movs	r2, #32
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f003 fc40 	bl	80049e0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	463b      	mov	r3, r7
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]
 8001168:	609a      	str	r2, [r3, #8]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	611a      	str	r2, [r3, #16]
 800116e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001170:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001174:	f7ff ffd2 	bl	800111c <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001178:	2004      	movs	r0, #4
 800117a:	f7ff ffb7 	bl	80010ec <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PC4   ------> USART1_TX
  PC5   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800117e:	2310      	movs	r3, #16
 8001180:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001182:	2302      	movs	r3, #2
 8001184:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001192:	2307      	movs	r3, #7
 8001194:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4857      	ldr	r0, [pc, #348]	; (80012f8 <MX_USART1_UART_Init+0x1ac>)
 800119c:	f002 f9a9 	bl	80034f2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80011a0:	2320      	movs	r3, #32
 80011a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011a4:	2302      	movs	r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b0:	2300      	movs	r3, #0
 80011b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	484e      	ldr	r0, [pc, #312]	; (80012f8 <MX_USART1_UART_Init+0x1ac>)
 80011be:	f002 f998 	bl	80034f2 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_USART1_TX);
 80011c2:	2219      	movs	r2, #25
 80011c4:	2101      	movs	r1, #1
 80011c6:	484d      	ldr	r0, [pc, #308]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 80011c8:	f7ff fee0 	bl	8000f8c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80011cc:	2210      	movs	r2, #16
 80011ce:	2101      	movs	r1, #1
 80011d0:	484a      	ldr	r0, [pc, #296]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 80011d2:	f7ff fdcf 	bl	8000d74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 80011d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011da:	2101      	movs	r1, #1
 80011dc:	4847      	ldr	r0, [pc, #284]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 80011de:	f7ff feaf 	bl	8000f40 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2101      	movs	r1, #1
 80011e6:	4845      	ldr	r0, [pc, #276]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 80011e8:	f7ff fdec 	bl	8000dc4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	4842      	ldr	r0, [pc, #264]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 80011f2:	f7ff fe0d 	bl	8000e10 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	2101      	movs	r1, #1
 80011fa:	4840      	ldr	r0, [pc, #256]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 80011fc:	f7ff fe2e 	bl	8000e5c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001200:	2200      	movs	r2, #0
 8001202:	2101      	movs	r1, #1
 8001204:	483d      	ldr	r0, [pc, #244]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 8001206:	f7ff fe4f 	bl	8000ea8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 800120a:	2200      	movs	r2, #0
 800120c:	2101      	movs	r1, #1
 800120e:	483b      	ldr	r0, [pc, #236]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 8001210:	f7ff fe70 	bl	8000ef4 <LL_DMA_SetMemorySize>

  /* USART1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_USART1_RX);
 8001214:	2218      	movs	r2, #24
 8001216:	2102      	movs	r1, #2
 8001218:	4838      	ldr	r0, [pc, #224]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 800121a:	f7ff feb7 	bl	8000f8c <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800121e:	2200      	movs	r2, #0
 8001220:	2102      	movs	r1, #2
 8001222:	4836      	ldr	r0, [pc, #216]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 8001224:	f7ff fda6 	bl	8000d74 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_HIGH);
 8001228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122c:	2102      	movs	r1, #2
 800122e:	4833      	ldr	r0, [pc, #204]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 8001230:	f7ff fe86 	bl	8000f40 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8001234:	2200      	movs	r2, #0
 8001236:	2102      	movs	r1, #2
 8001238:	4830      	ldr	r0, [pc, #192]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 800123a:	f7ff fdc3 	bl	8000dc4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 800123e:	2200      	movs	r2, #0
 8001240:	2102      	movs	r1, #2
 8001242:	482e      	ldr	r0, [pc, #184]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 8001244:	f7ff fde4 	bl	8000e10 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8001248:	2280      	movs	r2, #128	; 0x80
 800124a:	2102      	movs	r1, #2
 800124c:	482b      	ldr	r0, [pc, #172]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 800124e:	f7ff fe05 	bl	8000e5c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8001252:	2200      	movs	r2, #0
 8001254:	2102      	movs	r1, #2
 8001256:	4829      	ldr	r0, [pc, #164]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 8001258:	f7ff fe26 	bl	8000ea8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	4826      	ldr	r0, [pc, #152]	; (80012fc <MX_USART1_UART_Init+0x1b0>)
 8001262:	f7ff fe47 	bl	8000ef4 <LL_DMA_SetMemorySize>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001266:	f7ff fcfb 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 800126a:	4603      	mov	r3, r0
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fd4b 	bl	8000d0c <NVIC_EncodePriority>
 8001276:	4603      	mov	r3, r0
 8001278:	4619      	mov	r1, r3
 800127a:	2025      	movs	r0, #37	; 0x25
 800127c:	f7ff fd1c 	bl	8000cb8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001280:	2025      	movs	r0, #37	; 0x25
 8001282:	f7ff fcfb 	bl	8000c7c <__NVIC_EnableIRQ>

  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 800128a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800128e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001290:	2300      	movs	r3, #0
 8001292:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800129c:	230c      	movs	r3, #12
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80012a4:	2300      	movs	r3, #0
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80012a8:	f107 0318 	add.w	r3, r7, #24
 80012ac:	4619      	mov	r1, r3
 80012ae:	4814      	ldr	r0, [pc, #80]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012b0:	f002 fcc2 	bl	8003c38 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80012b4:	2100      	movs	r1, #0
 80012b6:	4812      	ldr	r0, [pc, #72]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012b8:	f7ff feb2 	bl	8001020 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80012bc:	2100      	movs	r1, #0
 80012be:	4810      	ldr	r0, [pc, #64]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012c0:	f7ff fec2 	bl	8001048 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 80012c4:	480e      	ldr	r0, [pc, #56]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012c6:	f7ff fe9b 	bl	8001000 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012cc:	f7ff fed0 	bl	8001070 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012d2:	f7ff fe85 	bl	8000fe0 <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 80012d6:	bf00      	nop
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012da:	f7ff fedf 	bl	800109c <LL_USART_IsActiveFlag_TEACK>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f9      	beq.n	80012d8 <MX_USART1_UART_Init+0x18c>
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_USART1_UART_Init+0x1b4>)
 80012e6:	f7ff feed 	bl	80010c4 <LL_USART_IsActiveFlag_REACK>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f3      	beq.n	80012d8 <MX_USART1_UART_Init+0x18c>
  {
  }

}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	; 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	48000800 	.word	0x48000800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40013800 	.word	0x40013800

08001304 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001306:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0b      	ldr	r4, [pc, #44]	; (8001350 <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800132e:	f7ff fc81 	bl	8000c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f003 fb21 	bl	8004978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001336:	f7ff fa21 	bl	800077c <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
  ldr   r0, =_estack
 800133c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001348:	08004bdc 	.word	0x08004bdc
  ldr r2, =_sbss
 800134c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001350:	2000051c 	.word	0x2000051c

08001354 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_2_IRQHandler>

08001356 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f939 	bl	80015d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f80e 	bl	8001388 <HAL_InitTick>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e001      	b.n	800137c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001378:	f7ff fb7c 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800137c:	79fb      	ldrb	r3, [r7, #7]

}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_InitTick+0x68>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d022      	beq.n	80013e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800139c:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_InitTick+0x6c>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_InitTick+0x68>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80013ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f944 	bl	800163e <HAL_SYSTICK_Config>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d809      	bhi.n	80013d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c2:	2200      	movs	r2, #0
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ca:	f000 f910 	bl	80015ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_InitTick+0x70>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	e007      	b.n	80013e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	e004      	b.n	80013e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e001      	b.n	80013e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x1c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_IncTick+0x20>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4413      	add	r3, r2
 800140a:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_IncTick+0x1c>)
 800140c:	6013      	str	r3, [r2, #0]
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	20000514 	.word	0x20000514
 800141c:	20000008 	.word	0x20000008

08001420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return uwTick;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_GetTick+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000514 	.word	0x20000514

08001438 <__NVIC_SetPriorityGrouping>:
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001454:	4013      	ands	r3, r2
 8001456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001460:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146a:	4a04      	ldr	r2, [pc, #16]	; (800147c <__NVIC_SetPriorityGrouping+0x44>)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	60d3      	str	r3, [r2, #12]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_GetPriorityGrouping>:
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <__NVIC_GetPriorityGrouping+0x18>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	f003 0307 	and.w	r3, r3, #7
}
 800148e:	4618      	mov	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <__NVIC_EnableIRQ>:
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0b      	blt.n	80014c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	f003 021f 	and.w	r2, r3, #31
 80014b4:	4907      	ldr	r1, [pc, #28]	; (80014d4 <__NVIC_EnableIRQ+0x38>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	095b      	lsrs	r3, r3, #5
 80014bc:	2001      	movs	r0, #1
 80014be:	fa00 f202 	lsl.w	r2, r0, r2
 80014c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <__NVIC_SetPriority>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db0a      	blt.n	8001502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <__NVIC_SetPriority+0x4c>)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	0112      	lsls	r2, r2, #4
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	440b      	add	r3, r1
 80014fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001500:	e00a      	b.n	8001518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4908      	ldr	r1, [pc, #32]	; (8001528 <__NVIC_SetPriority+0x50>)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	3b04      	subs	r3, #4
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	440b      	add	r3, r1
 8001516:	761a      	strb	r2, [r3, #24]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000e100 	.word	0xe000e100
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <NVIC_EncodePriority>:
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	; 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f1c3 0307 	rsb	r3, r3, #7
 8001546:	2b04      	cmp	r3, #4
 8001548:	bf28      	it	cs
 800154a:	2304      	movcs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	3304      	adds	r3, #4
 8001552:	2b06      	cmp	r3, #6
 8001554:	d902      	bls.n	800155c <NVIC_EncodePriority+0x30>
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3b03      	subs	r3, #3
 800155a:	e000      	b.n	800155e <NVIC_EncodePriority+0x32>
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43da      	mvns	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	401a      	ands	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43d9      	mvns	r1, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001584:	4313      	orrs	r3, r2
}
 8001586:	4618      	mov	r0, r3
 8001588:	3724      	adds	r7, #36	; 0x24
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a4:	d301      	bcc.n	80015aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2301      	movs	r3, #1
 80015a8:	e00f      	b.n	80015ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <SysTick_Config+0x40>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b2:	210f      	movs	r1, #15
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b8:	f7ff ff8e 	bl	80014d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <SysTick_Config+0x40>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <SysTick_Config+0x40>)
 80015c4:	2207      	movs	r2, #7
 80015c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	e000e010 	.word	0xe000e010

080015d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff29 	bl	8001438 <__NVIC_SetPriorityGrouping>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
 80015fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015fc:	f7ff ff40 	bl	8001480 <__NVIC_GetPriorityGrouping>
 8001600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	f7ff ff90 	bl	800152c <NVIC_EncodePriority>
 800160c:	4602      	mov	r2, r0
 800160e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff5f 	bl	80014d8 <__NVIC_SetPriority>
}
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff33 	bl	800149c <__NVIC_EnableIRQ>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ffa4 	bl	8001594 <SysTick_Config>
 800164c:	4603      	mov	r3, r0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e08d      	b.n	8001786 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_DMA_Init+0x138>)
 8001672:	429a      	cmp	r2, r3
 8001674:	d80f      	bhi.n	8001696 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_DMA_Init+0x13c>)
 800167e:	4413      	add	r3, r2
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_DMA_Init+0x140>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	009a      	lsls	r2, r3, #2
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a42      	ldr	r2, [pc, #264]	; (800179c <HAL_DMA_Init+0x144>)
 8001692:	641a      	str	r2, [r3, #64]	; 0x40
 8001694:	e00e      	b.n	80016b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_DMA_Init+0x148>)
 800169e:	4413      	add	r3, r2
 80016a0:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <HAL_DMA_Init+0x140>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	009a      	lsls	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a3c      	ldr	r2, [pc, #240]	; (80017a4 <HAL_DMA_Init+0x14c>)
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80016ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f8fe 	bl	8001908 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001714:	d102      	bne.n	800171c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001730:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_DMA_Init+0x104>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b04      	cmp	r3, #4
 8001740:	d80c      	bhi.n	800175c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f91e 	bl	8001984 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	e008      	b.n	800176e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40020407 	.word	0x40020407
 8001794:	bffdfff8 	.word	0xbffdfff8
 8001798:	cccccccd 	.word	0xcccccccd
 800179c:	40020000 	.word	0x40020000
 80017a0:	bffdfbf8 	.word	0xbffdfbf8
 80017a4:	40020400 	.word	0x40020400

080017a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2204      	movs	r2, #4
 80017ca:	409a      	lsls	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d026      	beq.n	8001822 <HAL_DMA_IRQHandler+0x7a>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d021      	beq.n	8001822 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	2104      	movs	r1, #4
 800180a:	fa01 f202 	lsl.w	r2, r1, r2
 800180e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	2b00      	cmp	r3, #0
 8001816:	d071      	beq.n	80018fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001820:	e06c      	b.n	80018fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	2202      	movs	r2, #2
 800182c:	409a      	lsls	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02e      	beq.n	8001894 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d029      	beq.n	8001894 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10b      	bne.n	8001866 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f022 020a 	bic.w	r2, r2, #10
 800185c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f003 021f 	and.w	r2, r3, #31
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	2102      	movs	r1, #2
 8001874:	fa01 f202 	lsl.w	r2, r1, r2
 8001878:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d038      	beq.n	80018fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001892:	e033      	b.n	80018fc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2208      	movs	r2, #8
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d02a      	beq.n	80018fe <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d025      	beq.n	80018fe <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 020e 	bic.w	r2, r2, #14
 80018c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f003 021f 	and.w	r2, r3, #31
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
}
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001918:	429a      	cmp	r2, r3
 800191a:	d802      	bhi.n	8001922 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e001      	b.n	8001926 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001924:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	3b08      	subs	r3, #8
 8001932:	4a12      	ldr	r2, [pc, #72]	; (800197c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	009a      	lsls	r2, r3, #2
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4413      	add	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001952:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	2201      	movs	r2, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40020407 	.word	0x40020407
 8001974:	40020800 	.word	0x40020800
 8001978:	40020820 	.word	0x40020820
 800197c:	cccccccd 	.word	0xcccccccd
 8001980:	40020880 	.word	0x40020880

08001984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a08      	ldr	r2, [pc, #32]	; (80019c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019a6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2201      	movs	r2, #1
 80019b2:	409a      	lsls	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	1000823f 	.word	0x1000823f
 80019c8:	40020940 	.word	0x40020940

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019da:	e15a      	b.n	8001c92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	4013      	ands	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 814c 	beq.w	8001c8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d00b      	beq.n	8001a14 <HAL_GPIO_Init+0x48>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d007      	beq.n	8001a14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a08:	2b11      	cmp	r3, #17
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b12      	cmp	r3, #18
 8001a12:	d130      	bne.n	8001a76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 0201 	and.w	r2, r3, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_Init+0xea>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b12      	cmp	r3, #18
 8001ab4:	d123      	bne.n	8001afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	220f      	movs	r2, #15
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	08da      	lsrs	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3208      	adds	r2, #8
 8001af8:	6939      	ldr	r1, [r7, #16]
 8001afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 0203 	and.w	r2, r3, #3
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80a6 	beq.w	8001c8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b40:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_GPIO_Init+0x2e4>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_GPIO_Init+0x2e4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4c:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <HAL_GPIO_Init+0x2e4>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b58:	4a56      	ldr	r2, [pc, #344]	; (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b82:	d01f      	beq.n	8001bc4 <HAL_GPIO_Init+0x1f8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a4c      	ldr	r2, [pc, #304]	; (8001cb8 <HAL_GPIO_Init+0x2ec>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d019      	beq.n	8001bc0 <HAL_GPIO_Init+0x1f4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a4b      	ldr	r2, [pc, #300]	; (8001cbc <HAL_GPIO_Init+0x2f0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d013      	beq.n	8001bbc <HAL_GPIO_Init+0x1f0>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a4a      	ldr	r2, [pc, #296]	; (8001cc0 <HAL_GPIO_Init+0x2f4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_GPIO_Init+0x1ec>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <HAL_GPIO_Init+0x2f8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d007      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e8>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a48      	ldr	r2, [pc, #288]	; (8001cc8 <HAL_GPIO_Init+0x2fc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <HAL_GPIO_Init+0x1e4>
 8001bac:	2305      	movs	r3, #5
 8001bae:	e00a      	b.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	e008      	b.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	e006      	b.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e004      	b.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	e002      	b.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <HAL_GPIO_Init+0x1fa>
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	f002 0203 	and.w	r2, r2, #3
 8001bcc:	0092      	lsls	r2, r2, #2
 8001bce:	4093      	lsls	r3, r2
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd6:	4937      	ldr	r1, [pc, #220]	; (8001cb4 <HAL_GPIO_Init+0x2e8>)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3302      	adds	r3, #2
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001be4:	4b39      	ldr	r3, [pc, #228]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c08:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c32:	4a26      	ldr	r2, [pc, #152]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c86:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_GPIO_Init+0x300>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f ae9d 	bne.w	80019dc <HAL_GPIO_Init+0x10>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	371c      	adds	r7, #28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010000 	.word	0x40010000
 8001cb8:	48000400 	.word	0x48000400
 8001cbc:	48000800 	.word	0x48000800
 8001cc0:	48000c00 	.word	0x48000c00
 8001cc4:	48001000 	.word	0x48001000
 8001cc8:	48001400 	.word	0x48001400
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d141      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cde:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cea:	d131      	bne.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cec:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cf2:	4a46      	ldr	r2, [pc, #280]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cfc:	4b43      	ldr	r3, [pc, #268]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d04:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d0c:	4b40      	ldr	r3, [pc, #256]	; (8001e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2232      	movs	r2, #50	; 0x32
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4a3f      	ldr	r2, [pc, #252]	; (8001e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	0c9b      	lsrs	r3, r3, #18
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d22:	e002      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d36:	d102      	bne.n	8001d3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f2      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d3e:	4b33      	ldr	r3, [pc, #204]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d158      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e057      	b.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d56:	4a2d      	ldr	r2, [pc, #180]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d60:	e04d      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d68:	d141      	bne.n	8001dee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d76:	d131      	bne.n	8001ddc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2232      	movs	r2, #50	; 0x32
 8001d9e:	fb02 f303 	mul.w	r3, r2, r3
 8001da2:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	3301      	adds	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dae:	e002      	b.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d102      	bne.n	8001dca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f2      	bne.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd6:	d112      	bne.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e011      	b.n	8001e00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dec:	e007      	b.n	8001dfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e26:	6093      	str	r3, [r2, #8]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e308      	b.n	800245c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d075      	beq.n	8001f42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e56:	4ba3      	ldr	r3, [pc, #652]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e60:	4ba0      	ldr	r3, [pc, #640]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d102      	bne.n	8001e76 <HAL_RCC_OscConfig+0x3e>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d002      	beq.n	8001e7c <HAL_RCC_OscConfig+0x44>
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	4b99      	ldr	r3, [pc, #612]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d05b      	beq.n	8001f40 <HAL_RCC_OscConfig+0x108>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d157      	bne.n	8001f40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e2e3      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x74>
 8001e9e:	4b91      	ldr	r3, [pc, #580]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a90      	ldr	r2, [pc, #576]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e01d      	b.n	8001ee8 <HAL_RCC_OscConfig+0xb0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x98>
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a8a      	ldr	r2, [pc, #552]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b88      	ldr	r3, [pc, #544]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a87      	ldr	r2, [pc, #540]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xb0>
 8001ed0:	4b84      	ldr	r3, [pc, #528]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a83      	ldr	r2, [pc, #524]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b81      	ldr	r3, [pc, #516]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a80      	ldr	r2, [pc, #512]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ee2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d013      	beq.n	8001f18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fa96 	bl	8001420 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff fa92 	bl	8001420 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e2a8      	b.n	800245c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0a:	4b76      	ldr	r3, [pc, #472]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xc0>
 8001f16:	e014      	b.n	8001f42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fa82 	bl	8001420 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff fa7e 	bl	8001420 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e294      	b.n	800245c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f0      	bne.n	8001f20 <HAL_RCC_OscConfig+0xe8>
 8001f3e:	e000      	b.n	8001f42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d075      	beq.n	800203a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f4e:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f58:	4b62      	ldr	r3, [pc, #392]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	2b0c      	cmp	r3, #12
 8001f66:	d102      	bne.n	8001f6e <HAL_RCC_OscConfig+0x136>
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d002      	beq.n	8001f74 <HAL_RCC_OscConfig+0x13c>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d11f      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	4b5b      	ldr	r3, [pc, #364]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_OscConfig+0x154>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e267      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b55      	ldr	r3, [pc, #340]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	4952      	ldr	r1, [pc, #328]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fa0:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_RCC_OscConfig+0x2b0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff f9ef 	bl	8001388 <HAL_InitTick>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d043      	beq.n	8002038 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e253      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d023      	beq.n	8002004 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a48      	ldr	r2, [pc, #288]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fa2a 	bl	8001420 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fa26 	bl	8001420 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e23c      	b.n	800245c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe2:	4b40      	ldr	r3, [pc, #256]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	061b      	lsls	r3, r3, #24
 8001ffc:	4939      	ldr	r1, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	604b      	str	r3, [r1, #4]
 8002002:	e01a      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002004:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a36      	ldr	r2, [pc, #216]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 800200a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7ff fa06 	bl	8001420 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7ff fa02 	bl	8001420 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e218      	b.n	800245c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800202a:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x1e0>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d03c      	beq.n	80020c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01c      	beq.n	8002088 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002054:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7ff f9df 	bl	8001420 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002066:	f7ff f9db 	bl	8001420 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1f1      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0ef      	beq.n	8002066 <HAL_RCC_OscConfig+0x22e>
 8002086:	e01b      	b.n	80020c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 800208a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	f023 0301 	bic.w	r3, r3, #1
 8002094:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7ff f9c2 	bl	8001420 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff f9be 	bl	8001420 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e1d4      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ef      	bne.n	80020a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80ab 	beq.w	8002224 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d106      	bne.n	80020ec <HAL_RCC_OscConfig+0x2b4>
 80020de:	2301      	movs	r3, #1
 80020e0:	e005      	b.n	80020ee <HAL_RCC_OscConfig+0x2b6>
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	20000004 	.word	0x20000004
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00d      	beq.n	800210e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4baf      	ldr	r3, [pc, #700]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	4aae      	ldr	r2, [pc, #696]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	; 0x58
 80020fe:	4bac      	ldr	r3, [pc, #688]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800210e:	4ba9      	ldr	r3, [pc, #676]	; (80023b4 <HAL_RCC_OscConfig+0x57c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800211a:	4ba6      	ldr	r3, [pc, #664]	; (80023b4 <HAL_RCC_OscConfig+0x57c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4aa5      	ldr	r2, [pc, #660]	; (80023b4 <HAL_RCC_OscConfig+0x57c>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff f97b 	bl	8001420 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff f977 	bl	8001420 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e18d      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002140:	4b9c      	ldr	r3, [pc, #624]	; (80023b4 <HAL_RCC_OscConfig+0x57c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d108      	bne.n	8002166 <HAL_RCC_OscConfig+0x32e>
 8002154:	4b96      	ldr	r3, [pc, #600]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a95      	ldr	r2, [pc, #596]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002164:	e024      	b.n	80021b0 <HAL_RCC_OscConfig+0x378>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2b05      	cmp	r3, #5
 800216c:	d110      	bne.n	8002190 <HAL_RCC_OscConfig+0x358>
 800216e:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002174:	4a8e      	ldr	r2, [pc, #568]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002176:	f043 0304 	orr.w	r3, r3, #4
 800217a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217e:	4b8c      	ldr	r3, [pc, #560]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002184:	4a8a      	ldr	r2, [pc, #552]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800218e:	e00f      	b.n	80021b0 <HAL_RCC_OscConfig+0x378>
 8002190:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a86      	ldr	r2, [pc, #536]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a0:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	4a82      	ldr	r2, [pc, #520]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d016      	beq.n	80021e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7ff f932 	bl	8001420 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7ff f92e 	bl	8001420 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e142      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d6:	4b76      	ldr	r3, [pc, #472]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ed      	beq.n	80021c0 <HAL_RCC_OscConfig+0x388>
 80021e4:	e015      	b.n	8002212 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e6:	f7ff f91b 	bl	8001420 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7ff f917 	bl	8001420 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e12b      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002204:	4b6a      	ldr	r3, [pc, #424]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ed      	bne.n	80021ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002212:	7ffb      	ldrb	r3, [r7, #31]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d105      	bne.n	8002224 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002218:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a64      	ldr	r2, [pc, #400]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800221e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d03c      	beq.n	80022aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01c      	beq.n	8002272 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002238:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800223a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800223e:	4a5c      	ldr	r2, [pc, #368]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002248:	f7ff f8ea 	bl	8001420 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002250:	f7ff f8e6 	bl	8001420 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0fc      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002262:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ef      	beq.n	8002250 <HAL_RCC_OscConfig+0x418>
 8002270:	e01b      	b.n	80022aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002272:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002278:	4a4d      	ldr	r2, [pc, #308]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800227a:	f023 0301 	bic.w	r3, r3, #1
 800227e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7ff f8cd 	bl	8001420 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800228a:	f7ff f8c9 	bl	8001420 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0df      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800229c:	4b44      	ldr	r3, [pc, #272]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800229e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1ef      	bne.n	800228a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f000 80d3 	beq.w	800245a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022b4:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030c 	and.w	r3, r3, #12
 80022bc:	2b0c      	cmp	r3, #12
 80022be:	f000 808d 	beq.w	80023dc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d15a      	bne.n	8002380 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a38      	ldr	r2, [pc, #224]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7ff f8a3 	bl	8001420 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022de:	f7ff f89f 	bl	8001420 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0b5      	b.n	800245c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x580>)
 8002302:	4013      	ands	r3, r2
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6a11      	ldr	r1, [r2, #32]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800230c:	3a01      	subs	r2, #1
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002316:	0212      	lsls	r2, r2, #8
 8002318:	4311      	orrs	r1, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800231e:	0852      	lsrs	r2, r2, #1
 8002320:	3a01      	subs	r2, #1
 8002322:	0552      	lsls	r2, r2, #21
 8002324:	4311      	orrs	r1, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800232a:	0852      	lsrs	r2, r2, #1
 800232c:	3a01      	subs	r2, #1
 800232e:	0652      	lsls	r2, r2, #25
 8002330:	4311      	orrs	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002336:	06d2      	lsls	r2, r2, #27
 8002338:	430a      	orrs	r2, r1
 800233a:	491d      	ldr	r1, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800233c:	4313      	orrs	r3, r2
 800233e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a1a      	ldr	r2, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff f862 	bl	8001420 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7ff f85e 	bl	8001420 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e074      	b.n	800245c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0x528>
 800237e:	e06c      	b.n	800245a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002386:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_RCC_OscConfig+0x578>)
 800239e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff f83a 	bl	8001420 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ae:	e00e      	b.n	80023ce <HAL_RCC_OscConfig+0x596>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
 80023b8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023bc:	f7ff f830 	bl	8001420 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e046      	b.n	800245c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_OscConfig+0x62c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x584>
 80023da:	e03e      	b.n	800245a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e039      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023e8:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_RCC_OscConfig+0x62c>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d12c      	bne.n	8002456 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	3b01      	subs	r3, #1
 8002408:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d123      	bne.n	8002456 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d11b      	bne.n	8002456 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d113      	bne.n	8002456 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	085b      	lsrs	r3, r3, #1
 800243a:	3b01      	subs	r3, #1
 800243c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d109      	bne.n	8002456 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	085b      	lsrs	r3, r3, #1
 800244e:	3b01      	subs	r3, #1
 8002450:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e11e      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b91      	ldr	r3, [pc, #580]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020f 	bic.w	r2, r3, #15
 8002496:	498c      	ldr	r1, [pc, #560]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b8a      	ldr	r3, [pc, #552]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e106      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d073      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d129      	bne.n	8002518 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c4:	4b81      	ldr	r3, [pc, #516]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0f4      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024d4:	f000 f966 	bl	80027a4 <RCC_GetSysClockFreqFromPLLSource>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4a7c      	ldr	r2, [pc, #496]	; (80026d0 <HAL_RCC_ClockConfig+0x268>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d93f      	bls.n	8002562 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024e2:	4b7a      	ldr	r3, [pc, #488]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d033      	beq.n	8002562 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d12f      	bne.n	8002562 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002502:	4b72      	ldr	r3, [pc, #456]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800250a:	4a70      	ldr	r2, [pc, #448]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002510:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e024      	b.n	8002562 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d107      	bne.n	8002530 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0c6      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002530:	4b66      	ldr	r3, [pc, #408]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e0be      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002540:	f000 f8ce 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8002544:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4a61      	ldr	r2, [pc, #388]	; (80026d0 <HAL_RCC_ClockConfig+0x268>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d909      	bls.n	8002562 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800254e:	4b5f      	ldr	r3, [pc, #380]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002556:	4a5d      	ldr	r2, [pc, #372]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800255c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800255e:	2380      	movs	r3, #128	; 0x80
 8002560:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b5a      	ldr	r3, [pc, #360]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4957      	ldr	r1, [pc, #348]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7fe ff54 	bl	8001420 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe ff50 	bl	8001420 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	; 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e095      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025bc:	4b43      	ldr	r3, [pc, #268]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	4a42      	ldr	r2, [pc, #264]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025d4:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025dc:	4a3b      	ldr	r2, [pc, #236]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4936      	ldr	r1, [pc, #216]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	608b      	str	r3, [r1, #8]
 80025f6:	e008      	b.n	800260a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b80      	cmp	r3, #128	; 0x80
 80025fc:	d105      	bne.n	800260a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025fe:	4b33      	ldr	r3, [pc, #204]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	4a32      	ldr	r2, [pc, #200]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002608:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800260a:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d21d      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 020f 	bic.w	r2, r3, #15
 8002620:	4929      	ldr	r1, [pc, #164]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002628:	f7fe fefa 	bl	8001420 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002630:	f7fe fef6 	bl	8001420 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e03b      	b.n	80026be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <HAL_RCC_ClockConfig+0x260>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d1ed      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b1a      	ldr	r3, [pc, #104]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4917      	ldr	r1, [pc, #92]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b13      	ldr	r3, [pc, #76]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490f      	ldr	r1, [pc, #60]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002692:	f000 f825 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8002696:	4601      	mov	r1, r0
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCC_ClockConfig+0x264>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	4a0c      	ldr	r2, [pc, #48]	; (80026d4 <HAL_RCC_ClockConfig+0x26c>)
 80026a4:	5cd3      	ldrb	r3, [r2, r3]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	fa21 f303 	lsr.w	r3, r1, r3
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_RCC_ClockConfig+0x270>)
 80026b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_RCC_ClockConfig+0x274>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fe66 	bl	8001388 <HAL_InitTick>
 80026bc:	4603      	mov	r3, r0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	04c4b400 	.word	0x04c4b400
 80026d4:	08004b7c 	.word	0x08004b7c
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d102      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	e047      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d102      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e03e      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800270a:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d136      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	3301      	adds	r3, #1
 800272c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d10c      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002734:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	4a16      	ldr	r2, [pc, #88]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800273e:	68d2      	ldr	r2, [r2, #12]
 8002740:	0a12      	lsrs	r2, r2, #8
 8002742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
      break;
 800274c:	e00c      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800274e:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	4a10      	ldr	r2, [pc, #64]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	0a12      	lsrs	r2, r2, #8
 800275c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
      break;
 8002766:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	0e5b      	lsrs	r3, r3, #25
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e001      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002788:	693b      	ldr	r3, [r7, #16]
}
 800278a:	4618      	mov	r0, r3
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	016e3600 	.word	0x016e3600

080027a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	3301      	adds	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d10c      	bne.n	80027e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027c8:	4a17      	ldr	r2, [pc, #92]	; (8002828 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027d2:	68d2      	ldr	r2, [r2, #12]
 80027d4:	0a12      	lsrs	r2, r2, #8
 80027d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	617b      	str	r3, [r7, #20]
    break;
 80027e0:	e00c      	b.n	80027fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ec:	68d2      	ldr	r2, [r2, #12]
 80027ee:	0a12      	lsrs	r2, r2, #8
 80027f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
    break;
 80027fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	0e5b      	lsrs	r3, r3, #25
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	3301      	adds	r3, #1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000
 8002828:	016e3600 	.word	0x016e3600
 800282c:	00f42400 	.word	0x00f42400

08002830 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002838:	2300      	movs	r3, #0
 800283a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800283c:	2300      	movs	r3, #0
 800283e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8098 	beq.w	800297e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10d      	bne.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b40      	ldr	r3, [pc, #256]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	4a3f      	ldr	r2, [pc, #252]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002868:	6593      	str	r3, [r2, #88]	; 0x58
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002876:	2301      	movs	r3, #1
 8002878:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800287a:	4b3a      	ldr	r3, [pc, #232]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a39      	ldr	r2, [pc, #228]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002884:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002886:	f7fe fdcb 	bl	8001420 <HAL_GetTick>
 800288a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800288c:	e009      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288e:	f7fe fdc7 	bl	8001420 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d902      	bls.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	74fb      	strb	r3, [r7, #19]
        break;
 80028a0:	e005      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028a2:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ef      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d159      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028b4:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01e      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d019      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028d0:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028dc:	4b20      	ldr	r3, [pc, #128]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ec:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028fc:	4a18      	ldr	r2, [pc, #96]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fd87 	bl	8001420 <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002914:	e00b      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fd83 	bl	8001420 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d902      	bls.n	800292e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	74fb      	strb	r3, [r7, #19]
            break;
 800292c:	e006      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ec      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10b      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002950:	4903      	ldr	r1, [pc, #12]	; (8002960 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002952:	4313      	orrs	r3, r2
 8002954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002958:	e008      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800295a:	7cfb      	ldrb	r3, [r7, #19]
 800295c:	74bb      	strb	r3, [r7, #18]
 800295e:	e005      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002968:	7cfb      	ldrb	r3, [r7, #19]
 800296a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800296c:	7c7b      	ldrb	r3, [r7, #17]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d105      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4baf      	ldr	r3, [pc, #700]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	4aae      	ldr	r2, [pc, #696]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298a:	4ba9      	ldr	r3, [pc, #676]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	f023 0203 	bic.w	r2, r3, #3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	49a5      	ldr	r1, [pc, #660]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029ac:	4ba0      	ldr	r3, [pc, #640]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b2:	f023 020c 	bic.w	r2, r3, #12
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	499d      	ldr	r1, [pc, #628]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029ce:	4b98      	ldr	r3, [pc, #608]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4994      	ldr	r1, [pc, #592]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029f0:	4b8f      	ldr	r3, [pc, #572]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	498c      	ldr	r1, [pc, #560]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a12:	4b87      	ldr	r3, [pc, #540]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	4983      	ldr	r1, [pc, #524]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d00a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a34:	4b7e      	ldr	r3, [pc, #504]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	497b      	ldr	r1, [pc, #492]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a56:	4b76      	ldr	r3, [pc, #472]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	4972      	ldr	r1, [pc, #456]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a78:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	496a      	ldr	r1, [pc, #424]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a9a:	4b65      	ldr	r3, [pc, #404]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	4961      	ldr	r1, [pc, #388]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002abc:	4b5c      	ldr	r3, [pc, #368]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	4959      	ldr	r1, [pc, #356]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ade:	4b54      	ldr	r3, [pc, #336]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	4950      	ldr	r1, [pc, #320]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4948      	ldr	r1, [pc, #288]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b20:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a42      	ldr	r2, [pc, #264]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	493a      	ldr	r1, [pc, #232]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a34      	ldr	r2, [pc, #208]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	492c      	ldr	r1, [pc, #176]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a26      	ldr	r2, [pc, #152]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	491e      	ldr	r1, [pc, #120]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002be0:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	4910      	ldr	r1, [pc, #64]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d018      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4902      	ldr	r1, [pc, #8]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c2e:	e001      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002c30:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3c:	d105      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c3e:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d015      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	4917      	ldr	r1, [pc, #92]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d105      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c76:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c80:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d015      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	4909      	ldr	r1, [pc, #36]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cac:	d105      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a04      	ldr	r2, [pc, #16]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cba:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e09d      	b.n	8002e16 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d108      	bne.n	8002cf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cea:	d009      	beq.n	8002d00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
 8002cf2:	e005      	b.n	8002d00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd fdec 	bl	80008f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d36:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d40:	d902      	bls.n	8002d48 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d42:	2300      	movs	r3, #0
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e002      	b.n	8002d4e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d56:	d007      	beq.n	8002d68 <HAL_SPI_Init+0xa0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002daa:	ea42 0103 	orr.w	r1, r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	f003 0204 	and.w	r2, r3, #4
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002de4:	ea42 0103 	orr.w	r1, r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <LL_EXTI_EnableIT_0_31>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4904      	ldr	r1, [pc, #16]	; (8002e40 <LL_EXTI_EnableIT_0_31+0x20>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40010400 	.word	0x40010400

08002e44 <LL_EXTI_EnableIT_32_63>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <LL_EXTI_EnableIT_32_63+0x20>)
 8002e4e:	6a1a      	ldr	r2, [r3, #32]
 8002e50:	4904      	ldr	r1, [pc, #16]	; (8002e64 <LL_EXTI_EnableIT_32_63+0x20>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	620b      	str	r3, [r1, #32]
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40010400 	.word	0x40010400

08002e68 <LL_EXTI_DisableIT_0_31>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <LL_EXTI_DisableIT_0_31+0x24>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	4904      	ldr	r1, [pc, #16]	; (8002e8c <LL_EXTI_DisableIT_0_31+0x24>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	600b      	str	r3, [r1, #0]
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	40010400 	.word	0x40010400

08002e90 <LL_EXTI_DisableIT_32_63>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	4904      	ldr	r1, [pc, #16]	; (8002eb4 <LL_EXTI_DisableIT_32_63+0x24>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	620b      	str	r3, [r1, #32]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40010400 	.word	0x40010400

08002eb8 <LL_EXTI_EnableEvent_0_31>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002ec0:	4b05      	ldr	r3, [pc, #20]	; (8002ed8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4904      	ldr	r1, [pc, #16]	; (8002ed8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40010400 	.word	0x40010400

08002edc <LL_EXTI_EnableEvent_32_63>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <LL_EXTI_EnableEvent_32_63+0x20>)
 8002ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee8:	4904      	ldr	r1, [pc, #16]	; (8002efc <LL_EXTI_EnableEvent_32_63+0x20>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40010400 	.word	0x40010400

08002f00 <LL_EXTI_DisableEvent_0_31>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002f08:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	4904      	ldr	r1, [pc, #16]	; (8002f24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40010400 	.word	0x40010400

08002f28 <LL_EXTI_DisableEvent_32_63>:
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002f30:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	43db      	mvns	r3, r3
 8002f38:	4904      	ldr	r1, [pc, #16]	; (8002f4c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40010400 	.word	0x40010400

08002f50 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4904      	ldr	r1, [pc, #16]	; (8002f70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	40010400 	.word	0x40010400

08002f74 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002f7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f80:	4904      	ldr	r1, [pc, #16]	; (8002f94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40010400 	.word	0x40010400

08002f98 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	4904      	ldr	r1, [pc, #16]	; (8002fbc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40010400 	.word	0x40010400

08002fe8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4904      	ldr	r1, [pc, #16]	; (8003008 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40010400 	.word	0x40010400

0800300c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003014:	4b05      	ldr	r3, [pc, #20]	; (800302c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003018:	4904      	ldr	r1, [pc, #16]	; (800302c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4313      	orrs	r3, r2
 800301e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40010400 	.word	0x40010400

08003030 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	43db      	mvns	r3, r3
 8003040:	4904      	ldr	r1, [pc, #16]	; (8003054 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003042:	4013      	ands	r3, r2
 8003044:	60cb      	str	r3, [r1, #12]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40010400 	.word	0x40010400

08003058 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	43db      	mvns	r3, r3
 8003068:	4904      	ldr	r1, [pc, #16]	; (800307c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800306a:	4013      	ands	r3, r2
 800306c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40010400 	.word	0x40010400

08003080 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7a1b      	ldrb	r3, [r3, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80c8 	beq.w	8003226 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d05d      	beq.n	800315a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7a5b      	ldrb	r3, [r3, #9]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d00e      	beq.n	80030c4 <LL_EXTI_Init+0x44>
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d017      	beq.n	80030da <LL_EXTI_Init+0x5a>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d120      	bne.n	80030f0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff24 	bl	8002f00 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff feaf 	bl	8002e20 <LL_EXTI_EnableIT_0_31>
          break;
 80030c2:	e018      	b.n	80030f6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff fecd 	bl	8002e68 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fef0 	bl	8002eb8 <LL_EXTI_EnableEvent_0_31>
          break;
 80030d8:	e00d      	b.n	80030f6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fe9e 	bl	8002e20 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fee5 	bl	8002eb8 <LL_EXTI_EnableEvent_0_31>
          break;
 80030ee:	e002      	b.n	80030f6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80030f0:	2301      	movs	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
          break;
 80030f4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7a9b      	ldrb	r3, [r3, #10]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d02d      	beq.n	800315a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7a9b      	ldrb	r3, [r3, #10]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d00e      	beq.n	8003124 <LL_EXTI_Init+0xa4>
 8003106:	2b03      	cmp	r3, #3
 8003108:	d017      	beq.n	800313a <LL_EXTI_Init+0xba>
 800310a:	2b01      	cmp	r3, #1
 800310c:	d120      	bne.n	8003150 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff8c 	bl	8003030 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff17 	bl	8002f50 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003122:	e01b      	b.n	800315c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff ff35 	bl	8002f98 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ff58 	bl	8002fe8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003138:	e010      	b.n	800315c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff06 	bl	8002f50 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff4d 	bl	8002fe8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800314e:	e005      	b.n	800315c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	60fb      	str	r3, [r7, #12]
            break;
 8003158:	e000      	b.n	800315c <LL_EXTI_Init+0xdc>
        }
      }
 800315a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d075      	beq.n	8003250 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7a5b      	ldrb	r3, [r3, #9]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d00e      	beq.n	800318a <LL_EXTI_Init+0x10a>
 800316c:	2b02      	cmp	r3, #2
 800316e:	d017      	beq.n	80031a0 <LL_EXTI_Init+0x120>
 8003170:	2b00      	cmp	r3, #0
 8003172:	d120      	bne.n	80031b6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff fed5 	bl	8002f28 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fe5e 	bl	8002e44 <LL_EXTI_EnableIT_32_63>
          break;
 8003188:	e01a      	b.n	80031c0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fe7e 	bl	8002e90 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff fe9f 	bl	8002edc <LL_EXTI_EnableEvent_32_63>
          break;
 800319e:	e00f      	b.n	80031c0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fe4d 	bl	8002e44 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff fe94 	bl	8002edc <LL_EXTI_EnableEvent_32_63>
          break;
 80031b4:	e004      	b.n	80031c0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	60fb      	str	r3, [r7, #12]
          break;
 80031be:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	7a9b      	ldrb	r3, [r3, #10]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d043      	beq.n	8003250 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7a9b      	ldrb	r3, [r3, #10]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d00e      	beq.n	80031ee <LL_EXTI_Init+0x16e>
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d017      	beq.n	8003204 <LL_EXTI_Init+0x184>
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d120      	bne.n	800321a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff3b 	bl	8003058 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fec4 	bl	8002f74 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80031ec:	e031      	b.n	8003252 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fee4 	bl	8002fc0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff05 	bl	800300c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003202:	e026      	b.n	8003252 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff feb3 	bl	8002f74 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fefa 	bl	800300c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003218:	e01b      	b.n	8003252 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f043 0305 	orr.w	r3, r3, #5
 8003220:	60fb      	str	r3, [r7, #12]
            break;
 8003222:	bf00      	nop
 8003224:	e015      	b.n	8003252 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fe1c 	bl	8002e68 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fe63 	bl	8002f00 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fe26 	bl	8002e90 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fe6d 	bl	8002f28 <LL_EXTI_DisableEvent_32_63>
 800324e:	e000      	b.n	8003252 <LL_EXTI_Init+0x1d2>
      }
 8003250:	bf00      	nop
  }

  return status;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <LL_GPIO_SetPinMode>:
{
 800325c:	b480      	push	{r7}
 800325e:	b08b      	sub	sp, #44	; 0x2c
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	613b      	str	r3, [r7, #16]
  return result;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e003      	b.n	800328e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	2103      	movs	r1, #3
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	401a      	ands	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	61fb      	str	r3, [r7, #28]
  return result;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80032b0:	2320      	movs	r3, #32
 80032b2:	e003      	b.n	80032bc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	fab3 f383 	clz	r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	fa01 f303 	lsl.w	r3, r1, r3
 80032c4:	431a      	orrs	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]
}
 80032ca:	bf00      	nop
 80032cc:	372c      	adds	r7, #44	; 0x2c
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_GPIO_SetPinOutputType>:
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	401a      	ands	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	431a      	orrs	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	605a      	str	r2, [r3, #4]
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <LL_GPIO_SetPinSpeed>:
{
 8003306:	b480      	push	{r7}
 8003308:	b08b      	sub	sp, #44	; 0x2c
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fa93 f3a3 	rbit	r3, r3
 8003320:	613b      	str	r3, [r7, #16]
  return result;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800332c:	2320      	movs	r3, #32
 800332e:	e003      	b.n	8003338 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2103      	movs	r1, #3
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	401a      	ands	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	fa93 f3a3 	rbit	r3, r3
 800334e:	61fb      	str	r3, [r7, #28]
  return result;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800335a:	2320      	movs	r3, #32
 800335c:	e003      	b.n	8003366 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	fa01 f303 	lsl.w	r3, r1, r3
 800336e:	431a      	orrs	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	609a      	str	r2, [r3, #8]
}
 8003374:	bf00      	nop
 8003376:	372c      	adds	r7, #44	; 0x2c
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_GPIO_SetPinPull>:
{
 8003380:	b480      	push	{r7}
 8003382:	b08b      	sub	sp, #44	; 0x2c
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	613b      	str	r3, [r7, #16]
  return result;
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e003      	b.n	80033b2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	2103      	movs	r1, #3
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	401a      	ands	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	61fb      	str	r3, [r7, #28]
  return result;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	e003      	b.n	80033e0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	431a      	orrs	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	60da      	str	r2, [r3, #12]
}
 80033ee:	bf00      	nop
 80033f0:	372c      	adds	r7, #44	; 0x2c
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_GPIO_SetAFPin_0_7>:
{
 80033fa:	b480      	push	{r7}
 80033fc:	b08b      	sub	sp, #44	; 0x2c
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1a      	ldr	r2, [r3, #32]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	613b      	str	r3, [r7, #16]
  return result;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003420:	2320      	movs	r3, #32
 8003422:	e003      	b.n	800342c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	210f      	movs	r1, #15
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	401a      	ands	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	61fb      	str	r3, [r7, #28]
  return result;
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800344e:	2320      	movs	r3, #32
 8003450:	e003      	b.n	800345a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	431a      	orrs	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	372c      	adds	r7, #44	; 0x2c
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_GPIO_SetAFPin_8_15>:
{
 8003474:	b480      	push	{r7}
 8003476:	b08b      	sub	sp, #44	; 0x2c
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	613b      	str	r3, [r7, #16]
  return result;
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	210f      	movs	r1, #15
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	fa93 f3a3 	rbit	r3, r3
 80034c0:	61fb      	str	r3, [r7, #28]
  return result;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80034cc:	2320      	movs	r3, #32
 80034ce:	e003      	b.n	80034d8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	fab3 f383 	clz	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80034e6:	bf00      	nop
 80034e8:	372c      	adds	r7, #44	; 0x2c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b088      	sub	sp, #32
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	60fb      	str	r3, [r7, #12]
  return result;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <LL_GPIO_Init+0x26>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e003      	b.n	8003520 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003522:	e048      	b.n	80035b6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	2101      	movs	r1, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03a      	beq.n	80035b0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d003      	beq.n	800354a <LL_GPIO_Init+0x58>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d10e      	bne.n	8003568 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	461a      	mov	r2, r3
 8003550:	69b9      	ldr	r1, [r7, #24]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fed7 	bl	8003306 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	461a      	mov	r2, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff feb7 	bl	80032d6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	461a      	mov	r2, r3
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ff05 	bl	8003380 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d111      	bne.n	80035a2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2bff      	cmp	r3, #255	; 0xff
 8003582:	d807      	bhi.n	8003594 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	461a      	mov	r2, r3
 800358a:	69b9      	ldr	r1, [r7, #24]
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff34 	bl	80033fa <LL_GPIO_SetAFPin_0_7>
 8003592:	e006      	b.n	80035a2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	461a      	mov	r2, r3
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff69 	bl	8003474 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	461a      	mov	r2, r3
 80035a8:	69b9      	ldr	r1, [r7, #24]
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fe56 	bl	800325c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	3301      	adds	r3, #1
 80035b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1af      	bne.n	8003524 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <LL_RCC_HSI_IsReady+0x24>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d101      	bne.n	80035e6 <LL_RCC_HSI_IsReady+0x16>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <LL_RCC_HSI_IsReady+0x18>
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000

080035f8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <LL_RCC_LSE_IsReady+0x24>)
 80035fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d101      	bne.n	800360e <LL_RCC_LSE_IsReady+0x16>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <LL_RCC_LSE_IsReady+0x18>
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000

08003620 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <LL_RCC_GetSysClkSource+0x18>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000

0800363c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <LL_RCC_GetAHBPrescaler+0x18>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000

08003658 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800365c:	4b04      	ldr	r3, [pc, #16]	; (8003670 <LL_RCC_GetAPB1Prescaler+0x18>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000

08003674 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <LL_RCC_GetAPB2Prescaler+0x18>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40021000 	.word	0x40021000

08003690 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <LL_RCC_GetUSARTClockSource+0x24>)
 800369a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	401a      	ands	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	041b      	lsls	r3, r3, #16
 80036a6:	4313      	orrs	r3, r2
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	40021000 	.word	0x40021000

080036b8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <LL_RCC_GetUARTClockSource+0x24>)
 80036c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	401a      	ands	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	4313      	orrs	r3, r2
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40021000 	.word	0x40021000

080036e0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80036e4:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <LL_RCC_PLL_GetMainSource+0x18>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0303 	and.w	r3, r3, #3
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000

080036fc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <LL_RCC_PLL_GetN+0x18>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40021000 	.word	0x40021000

08003718 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <LL_RCC_PLL_GetR+0x18>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <LL_RCC_PLL_GetDivider+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000

08003750 <LL_RCC_GetUSARTClockFreq>:
  *
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d12e      	bne.n	80037c0 <LL_RCC_GetUSARTClockFreq+0x70>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ff94 	bl	8003690 <LL_RCC_GetUSARTClockSource>
 8003768:	4603      	mov	r3, r0
 800376a:	4a50      	ldr	r2, [pc, #320]	; (80038ac <LL_RCC_GetUSARTClockFreq+0x15c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <LL_RCC_GetUSARTClockFreq+0x34>
 8003770:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003774:	d00e      	beq.n	8003794 <LL_RCC_GetUSARTClockFreq+0x44>
 8003776:	4a4e      	ldr	r2, [pc, #312]	; (80038b0 <LL_RCC_GetUSARTClockFreq+0x160>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d114      	bne.n	80037a6 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800377c:	f000 f926 	bl	80039cc <RCC_GetSystemClockFreq>
 8003780:	60f8      	str	r0, [r7, #12]
        break;
 8003782:	e08d      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003784:	f7ff ff24 	bl	80035d0 <LL_RCC_HSI_IsReady>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d07b      	beq.n	8003886 <LL_RCC_GetUSARTClockFreq+0x136>
        {
          usart_frequency = HSI_VALUE;
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <LL_RCC_GetUSARTClockFreq+0x164>)
 8003790:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003792:	e078      	b.n	8003886 <LL_RCC_GetUSARTClockFreq+0x136>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003794:	f7ff ff30 	bl	80035f8 <LL_RCC_LSE_IsReady>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d075      	beq.n	800388a <LL_RCC_GetUSARTClockFreq+0x13a>
        {
          usart_frequency = LSE_VALUE;
 800379e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80037a4:	e071      	b.n	800388a <LL_RCC_GetUSARTClockFreq+0x13a>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80037a6:	f000 f911 	bl	80039cc <RCC_GetSystemClockFreq>
 80037aa:	4603      	mov	r3, r0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f92f 	bl	8003a10 <RCC_GetHCLKClockFreq>
 80037b2:	4603      	mov	r3, r0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f959 	bl	8003a6c <RCC_GetPCLK2ClockFreq>
 80037ba:	60f8      	str	r0, [r7, #12]
        break;
 80037bc:	bf00      	nop
 80037be:	e06f      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d12e      	bne.n	8003824 <LL_RCC_GetUSARTClockFreq+0xd4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7ff ff62 	bl	8003690 <LL_RCC_GetUSARTClockSource>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4a3a      	ldr	r2, [pc, #232]	; (80038b8 <LL_RCC_GetUSARTClockFreq+0x168>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <LL_RCC_GetUSARTClockFreq+0x98>
 80037d4:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 80037d8:	d00e      	beq.n	80037f8 <LL_RCC_GetUSARTClockFreq+0xa8>
 80037da:	4a38      	ldr	r2, [pc, #224]	; (80038bc <LL_RCC_GetUSARTClockFreq+0x16c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d114      	bne.n	800380a <LL_RCC_GetUSARTClockFreq+0xba>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80037e0:	f000 f8f4 	bl	80039cc <RCC_GetSystemClockFreq>
 80037e4:	60f8      	str	r0, [r7, #12]
        break;
 80037e6:	e05b      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80037e8:	f7ff fef2 	bl	80035d0 <LL_RCC_HSI_IsReady>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d04d      	beq.n	800388e <LL_RCC_GetUSARTClockFreq+0x13e>
        {
          usart_frequency = HSI_VALUE;
 80037f2:	4b30      	ldr	r3, [pc, #192]	; (80038b4 <LL_RCC_GetUSARTClockFreq+0x164>)
 80037f4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80037f6:	e04a      	b.n	800388e <LL_RCC_GetUSARTClockFreq+0x13e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80037f8:	f7ff fefe 	bl	80035f8 <LL_RCC_LSE_IsReady>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d047      	beq.n	8003892 <LL_RCC_GetUSARTClockFreq+0x142>
        {
          usart_frequency = LSE_VALUE;
 8003802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003806:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003808:	e043      	b.n	8003892 <LL_RCC_GetUSARTClockFreq+0x142>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800380a:	f000 f8df 	bl	80039cc <RCC_GetSystemClockFreq>
 800380e:	4603      	mov	r3, r0
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f8fd 	bl	8003a10 <RCC_GetHCLKClockFreq>
 8003816:	4603      	mov	r3, r0
 8003818:	4618      	mov	r0, r3
 800381a:	f000 f911 	bl	8003a40 <RCC_GetPCLK1ClockFreq>
 800381e:	60f8      	str	r0, [r7, #12]
        break;
 8003820:	bf00      	nop
 8003822:	e03d      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b30      	cmp	r3, #48	; 0x30
 8003828:	d135      	bne.n	8003896 <LL_RCC_GetUSARTClockFreq+0x146>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ff30 	bl	8003690 <LL_RCC_GetUSARTClockSource>
 8003830:	4603      	mov	r3, r0
 8003832:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <LL_RCC_GetUSARTClockFreq+0x170>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <LL_RCC_GetUSARTClockFreq+0xfc>
 8003838:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800383c:	d00e      	beq.n	800385c <LL_RCC_GetUSARTClockFreq+0x10c>
 800383e:	4a21      	ldr	r2, [pc, #132]	; (80038c4 <LL_RCC_GetUSARTClockFreq+0x174>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d114      	bne.n	800386e <LL_RCC_GetUSARTClockFreq+0x11e>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8003844:	f000 f8c2 	bl	80039cc <RCC_GetSystemClockFreq>
 8003848:	60f8      	str	r0, [r7, #12]
          break;
 800384a:	e029      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 800384c:	f7ff fec0 	bl	80035d0 <LL_RCC_HSI_IsReady>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d021      	beq.n	800389a <LL_RCC_GetUSARTClockFreq+0x14a>
          {
            usart_frequency = HSI_VALUE;
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <LL_RCC_GetUSARTClockFreq+0x164>)
 8003858:	60fb      	str	r3, [r7, #12]
          }
          break;
 800385a:	e01e      	b.n	800389a <LL_RCC_GetUSARTClockFreq+0x14a>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 800385c:	f7ff fecc 	bl	80035f8 <LL_RCC_LSE_IsReady>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01b      	beq.n	800389e <LL_RCC_GetUSARTClockFreq+0x14e>
          {
            usart_frequency = LSE_VALUE;
 8003866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800386c:	e017      	b.n	800389e <LL_RCC_GetUSARTClockFreq+0x14e>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800386e:	f000 f8ad 	bl	80039cc <RCC_GetSystemClockFreq>
 8003872:	4603      	mov	r3, r0
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f8cb 	bl	8003a10 <RCC_GetHCLKClockFreq>
 800387a:	4603      	mov	r3, r0
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f8df 	bl	8003a40 <RCC_GetPCLK1ClockFreq>
 8003882:	60f8      	str	r0, [r7, #12]
          break;
 8003884:	e00c      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 8003886:	bf00      	nop
 8003888:	e00a      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 800388a:	bf00      	nop
 800388c:	e008      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 800388e:	bf00      	nop
 8003890:	e006      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
        break;
 8003892:	bf00      	nop
 8003894:	e004      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
      }
    }
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <LL_RCC_GetUSARTClockFreq+0x150>
          break;
 800389e:	bf00      	nop
  }
  return usart_frequency;
 80038a0:	68fb      	ldr	r3, [r7, #12]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	00030002 	.word	0x00030002
 80038b0:	00030001 	.word	0x00030001
 80038b4:	00f42400 	.word	0x00f42400
 80038b8:	000c0008 	.word	0x000c0008
 80038bc:	000c0004 	.word	0x000c0004
 80038c0:	00300020 	.word	0x00300020
 80038c4:	00300010 	.word	0x00300010

080038c8 <LL_RCC_GetUARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2bc0      	cmp	r3, #192	; 0xc0
 80038d8:	d12d      	bne.n	8003936 <LL_RCC_GetUARTClockFreq+0x6e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff feec 	bl	80036b8 <LL_RCC_GetUARTClockSource>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4a35      	ldr	r2, [pc, #212]	; (80039b8 <LL_RCC_GetUARTClockFreq+0xf0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <LL_RCC_GetUARTClockFreq+0x34>
 80038e8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80038ec:	d00e      	beq.n	800390c <LL_RCC_GetUARTClockFreq+0x44>
 80038ee:	4a33      	ldr	r2, [pc, #204]	; (80039bc <LL_RCC_GetUARTClockFreq+0xf4>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d114      	bne.n	800391e <LL_RCC_GetUARTClockFreq+0x56>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80038f4:	f000 f86a 	bl	80039cc <RCC_GetSystemClockFreq>
 80038f8:	60f8      	str	r0, [r7, #12]
        break;
 80038fa:	e021      	b.n	8003940 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80038fc:	f7ff fe68 	bl	80035d0 <LL_RCC_HSI_IsReady>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d019      	beq.n	800393a <LL_RCC_GetUARTClockFreq+0x72>
        {
          uart_frequency = HSI_VALUE;
 8003906:	4b2e      	ldr	r3, [pc, #184]	; (80039c0 <LL_RCC_GetUARTClockFreq+0xf8>)
 8003908:	60fb      	str	r3, [r7, #12]
        }
        break;
 800390a:	e016      	b.n	800393a <LL_RCC_GetUARTClockFreq+0x72>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800390c:	f7ff fe74 	bl	80035f8 <LL_RCC_LSE_IsReady>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d013      	beq.n	800393e <LL_RCC_GetUARTClockFreq+0x76>
        {
          uart_frequency = LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800391c:	e00f      	b.n	800393e <LL_RCC_GetUARTClockFreq+0x76>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800391e:	f000 f855 	bl	80039cc <RCC_GetSystemClockFreq>
 8003922:	4603      	mov	r3, r0
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f873 	bl	8003a10 <RCC_GetHCLKClockFreq>
 800392a:	4603      	mov	r3, r0
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f887 	bl	8003a40 <RCC_GetPCLK1ClockFreq>
 8003932:	60f8      	str	r0, [r7, #12]
        break;
 8003934:	e004      	b.n	8003940 <LL_RCC_GetUARTClockFreq+0x78>
    }
  }
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <LL_RCC_GetUARTClockFreq+0x78>
        break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <LL_RCC_GetUARTClockFreq+0x78>
        break;
 800393e:	bf00      	nop

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003946:	d12d      	bne.n	80039a4 <LL_RCC_GetUARTClockFreq+0xdc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff feb5 	bl	80036b8 <LL_RCC_GetUARTClockSource>
 800394e:	4603      	mov	r3, r0
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <LL_RCC_GetUARTClockFreq+0xfc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d009      	beq.n	800396a <LL_RCC_GetUARTClockFreq+0xa2>
 8003956:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800395a:	d00e      	beq.n	800397a <LL_RCC_GetUARTClockFreq+0xb2>
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <LL_RCC_GetUARTClockFreq+0x100>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d114      	bne.n	800398c <LL_RCC_GetUARTClockFreq+0xc4>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8003962:	f000 f833 	bl	80039cc <RCC_GetSystemClockFreq>
 8003966:	60f8      	str	r0, [r7, #12]
        break;
 8003968:	e021      	b.n	80039ae <LL_RCC_GetUARTClockFreq+0xe6>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800396a:	f7ff fe31 	bl	80035d0 <LL_RCC_HSI_IsReady>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <LL_RCC_GetUARTClockFreq+0xe0>
        {
          uart_frequency = HSI_VALUE;
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <LL_RCC_GetUARTClockFreq+0xf8>)
 8003976:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003978:	e016      	b.n	80039a8 <LL_RCC_GetUARTClockFreq+0xe0>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800397a:	f7ff fe3d 	bl	80035f8 <LL_RCC_LSE_IsReady>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d013      	beq.n	80039ac <LL_RCC_GetUARTClockFreq+0xe4>
        {
          uart_frequency = LSE_VALUE;
 8003984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003988:	60fb      	str	r3, [r7, #12]
        }
        break;
 800398a:	e00f      	b.n	80039ac <LL_RCC_GetUARTClockFreq+0xe4>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800398c:	f000 f81e 	bl	80039cc <RCC_GetSystemClockFreq>
 8003990:	4603      	mov	r3, r0
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f83c 	bl	8003a10 <RCC_GetHCLKClockFreq>
 8003998:	4603      	mov	r3, r0
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f850 	bl	8003a40 <RCC_GetPCLK1ClockFreq>
 80039a0:	60f8      	str	r0, [r7, #12]
        break;
 80039a2:	e004      	b.n	80039ae <LL_RCC_GetUARTClockFreq+0xe6>
    }
  }
 80039a4:	bf00      	nop
 80039a6:	e002      	b.n	80039ae <LL_RCC_GetUARTClockFreq+0xe6>
        break;
 80039a8:	bf00      	nop
 80039aa:	e000      	b.n	80039ae <LL_RCC_GetUARTClockFreq+0xe6>
        break;
 80039ac:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80039ae:	68fb      	ldr	r3, [r7, #12]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	00c00080 	.word	0x00c00080
 80039bc:	00c00040 	.word	0x00c00040
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	03000200 	.word	0x03000200
 80039c8:	03000100 	.word	0x03000100

080039cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80039d2:	f7ff fe25 	bl	8003620 <LL_RCC_GetSysClkSource>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d006      	beq.n	80039ea <RCC_GetSystemClockFreq+0x1e>
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d007      	beq.n	80039f0 <RCC_GetSystemClockFreq+0x24>
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d109      	bne.n	80039f8 <RCC_GetSystemClockFreq+0x2c>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <RCC_GetSystemClockFreq+0x3c>)
 80039e6:	607b      	str	r3, [r7, #4]
      break;
 80039e8:	e009      	b.n	80039fe <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <RCC_GetSystemClockFreq+0x40>)
 80039ec:	607b      	str	r3, [r7, #4]
      break;
 80039ee:	e006      	b.n	80039fe <RCC_GetSystemClockFreq+0x32>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80039f0:	f000 f852 	bl	8003a98 <RCC_PLL_GetFreqDomain_SYS>
 80039f4:	6078      	str	r0, [r7, #4]
      break;
 80039f6:	e002      	b.n	80039fe <RCC_GetSystemClockFreq+0x32>

    default:
      frequency = HSI_VALUE;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <RCC_GetSystemClockFreq+0x3c>)
 80039fa:	607b      	str	r3, [r7, #4]
      break;
 80039fc:	bf00      	nop
  }

  return frequency;
 80039fe:	687b      	ldr	r3, [r7, #4]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	016e3600 	.word	0x016e3600

08003a10 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003a18:	f7ff fe10 	bl	800363c <LL_RCC_GetAHBPrescaler>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	091b      	lsrs	r3, r3, #4
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <RCC_GetHCLKClockFreq+0x2c>)
 8003a26:	5cd3      	ldrb	r3, [r2, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	08004b7c 	.word	0x08004b7c

08003a40 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003a48:	f7ff fe06 	bl	8003658 <LL_RCC_GetAPB1Prescaler>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	0a1b      	lsrs	r3, r3, #8
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <RCC_GetPCLK1ClockFreq+0x28>)
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	08004b8c 	.word	0x08004b8c

08003a6c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003a74:	f7ff fdfe 	bl	8003674 <LL_RCC_GetAPB2Prescaler>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	0adb      	lsrs	r3, r3, #11
 8003a7c:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <RCC_GetPCLK2ClockFreq+0x28>)
 8003a7e:	5cd3      	ldrb	r3, [r2, r3]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	08004b8c 	.word	0x08004b8c

08003a98 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003a9e:	f7ff fe1f 	bl	80036e0 <LL_RCC_PLL_GetMainSource>
 8003aa2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d002      	beq.n	8003ab0 <RCC_PLL_GetFreqDomain_SYS+0x18>
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d003      	beq.n	8003ab6 <RCC_PLL_GetFreqDomain_SYS+0x1e>
 8003aae:	e005      	b.n	8003abc <RCC_PLL_GetFreqDomain_SYS+0x24>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003ab2:	607b      	str	r3, [r7, #4]
      break;
 8003ab4:	e005      	b.n	8003ac2 <RCC_PLL_GetFreqDomain_SYS+0x2a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003ab8:	607b      	str	r3, [r7, #4]
      break;
 8003aba:	e002      	b.n	8003ac2 <RCC_PLL_GetFreqDomain_SYS+0x2a>

    default:
      pllinputfreq = HSI_VALUE;
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003abe:	607b      	str	r3, [r7, #4]
      break;
 8003ac0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ac2:	f7ff fe1b 	bl	80036fc <LL_RCC_PLL_GetN>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	fb03 f402 	mul.w	r4, r3, r2
 8003ace:	f7ff fe31 	bl	8003734 <LL_RCC_PLL_GetDivider>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003adc:	f7ff fe1c 	bl	8003718 <LL_RCC_PLL_GetR>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	0e5b      	lsrs	r3, r3, #25
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}
 8003af4:	00f42400 	.word	0x00f42400
 8003af8:	016e3600 	.word	0x016e3600

08003afc <LL_USART_IsEnabled>:
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <LL_USART_IsEnabled+0x18>
 8003b10:	2301      	movs	r3, #1
 8003b12:	e000      	b.n	8003b16 <LL_USART_IsEnabled+0x1a>
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_USART_SetPrescaler>:
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	f023 030f 	bic.w	r3, r3, #15
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	b292      	uxth	r2, r2
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_USART_SetStopBitsLength>:
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	605a      	str	r2, [r3, #4]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_USART_SetHWFlowCtrl>:
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <LL_USART_SetBaudRate>:
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b0b      	cmp	r3, #11
 8003baa:	d83c      	bhi.n	8003c26 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d039      	beq.n	8003c26 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d122      	bne.n	8003c00 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <LL_USART_SetBaudRate+0x9c>)
 8003bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	005a      	lsls	r2, r3, #1
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	441a      	add	r2, r3
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	085b      	lsrs	r3, r3, #1
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	60da      	str	r2, [r3, #12]
}
 8003bfe:	e012      	b.n	8003c26 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <LL_USART_SetBaudRate+0x9c>)
 8003c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	085b      	lsrs	r3, r3, #1
 8003c16:	441a      	add	r2, r3
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	60da      	str	r2, [r3, #12]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	08004b9c 	.word	0x08004b9c

08003c38 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ff56 	bl	8003afc <LL_USART_IsEnabled>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d165      	bne.n	8003d22 <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <LL_USART_Init+0xf4>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	6891      	ldr	r1, [r2, #8]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	6912      	ldr	r2, [r2, #16]
 8003c66:	4311      	orrs	r1, r2
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	6952      	ldr	r2, [r2, #20]
 8003c6c:	4311      	orrs	r1, r2
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	69d2      	ldr	r2, [r2, #28]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff62 	bl	8003b4a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff6f 	bl	8003b70 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <LL_USART_Init+0xf8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d104      	bne.n	8003ca4 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003c9a:	2003      	movs	r0, #3
 8003c9c:	f7ff fd58 	bl	8003750 <LL_RCC_GetUSARTClockFreq>
 8003ca0:	60b8      	str	r0, [r7, #8]
 8003ca2:	e023      	b.n	8003cec <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <LL_USART_Init+0xfc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d104      	bne.n	8003cb6 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003cac:	200c      	movs	r0, #12
 8003cae:	f7ff fd4f 	bl	8003750 <LL_RCC_GetUSARTClockFreq>
 8003cb2:	60b8      	str	r0, [r7, #8]
 8003cb4:	e01a      	b.n	8003cec <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART3)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <LL_USART_Init+0x100>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d104      	bne.n	8003cc8 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003cbe:	2030      	movs	r0, #48	; 0x30
 8003cc0:	f7ff fd46 	bl	8003750 <LL_RCC_GetUSARTClockFreq>
 8003cc4:	60b8      	str	r0, [r7, #8]
 8003cc6:	e011      	b.n	8003cec <LL_USART_Init+0xb4>
    }
#if defined(UART4)
    else if (USARTx == UART4)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <LL_USART_Init+0x104>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d104      	bne.n	8003cda <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003cd0:	20c0      	movs	r0, #192	; 0xc0
 8003cd2:	f7ff fdf9 	bl	80038c8 <LL_RCC_GetUARTClockFreq>
 8003cd6:	60b8      	str	r0, [r7, #8]
 8003cd8:	e008      	b.n	8003cec <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <LL_USART_Init+0x108>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d104      	bne.n	8003cec <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003ce2:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003ce6:	f7ff fdef 	bl	80038c8 <LL_RCC_GetUARTClockFreq>
 8003cea:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d011      	beq.n	8003d16 <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00d      	beq.n	8003d16 <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	69d9      	ldr	r1, [r3, #28]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff41 	bl	8003b98 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff00 	bl	8003b22 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	efff69f3 	.word	0xefff69f3
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40004400 	.word	0x40004400
 8003d38:	40004800 	.word	0x40004800
 8003d3c:	40004c00 	.word	0x40004c00
 8003d40:	40005000 	.word	0x40005000

08003d44 <crc_16>:
 * string of which the beginning has been passed to the function. The number of
 * bytes to check is also a parameter. The number of the bytes in the string is
 * limited by the constant SIZE_MAX.
 */

uint16_t crc_16( const unsigned char *input_str, size_t num_bytes ) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]

	uint16_t crc;
	const unsigned char *ptr;
	size_t a;

	if ( ! crc_tab16_init ) init_crc16_tab();
 8003d4e:	4b17      	ldr	r3, [pc, #92]	; (8003dac <crc_16+0x68>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	f083 0301 	eor.w	r3, r3, #1
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <crc_16+0x1c>
 8003d5c:	f000 f82a 	bl	8003db4 <init_crc16_tab>

	crc = CRC_START_16;
 8003d60:	2300      	movs	r3, #0
 8003d62:	82fb      	strh	r3, [r7, #22]
	ptr = input_str;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	613b      	str	r3, [r7, #16]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d018      	beq.n	8003da0 <crc_16+0x5c>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e011      	b.n	8003d98 <crc_16+0x54>

		crc = (crc >> 8) ^ crc_tab16[ (crc ^ (uint16_t) *ptr++) & 0x00FF ];
 8003d74:	8afb      	ldrh	r3, [r7, #22]
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	8af9      	ldrh	r1, [r7, #22]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1c58      	adds	r0, r3, #1
 8003d80:	6138      	str	r0, [r7, #16]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	404b      	eors	r3, r1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4909      	ldr	r1, [pc, #36]	; (8003db0 <crc_16+0x6c>)
 8003d8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003d8e:	4053      	eors	r3, r2
 8003d90:	82fb      	strh	r3, [r7, #22]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3301      	adds	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d3e9      	bcc.n	8003d74 <crc_16+0x30>
	}

	return crc;
 8003da0:	8afb      	ldrh	r3, [r7, #22]

}  /* crc_16 */
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000019c 	.word	0x2000019c
 8003db0:	200001a0 	.word	0x200001a0

08003db4 <init_crc16_tab>:
 * that can be used directly in the XOR arithmetic in the algorithm. This
 * lookup table is calculated by the init_crc16_tab() routine, the first time
 * the CRC function is called.
 */

static void init_crc16_tab( void ) {
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
	uint16_t i;
	uint16_t j;
	uint16_t crc;
	uint16_t c;

	for (i=0; i<256; i++) {
 8003dba:	2300      	movs	r3, #0
 8003dbc:	80fb      	strh	r3, [r7, #6]
 8003dbe:	e029      	b.n	8003e14 <init_crc16_tab+0x60>

		crc = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	807b      	strh	r3, [r7, #2]
		c   = i;
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	803b      	strh	r3, [r7, #0]

		for (j=0; j<8; j++) {
 8003dc8:	2300      	movs	r3, #0
 8003dca:	80bb      	strh	r3, [r7, #4]
 8003dcc:	e017      	b.n	8003dfe <init_crc16_tab+0x4a>

			if ( (crc ^ c) & 0x0001 ) crc = ( crc >> 1 ) ^ CRC_POLY_16;
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	883b      	ldrh	r3, [r7, #0]
 8003dd2:	4053      	eors	r3, r2
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d006      	beq.n	8003dec <init_crc16_tab+0x38>
 8003dde:	887b      	ldrh	r3, [r7, #2]
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <init_crc16_tab+0x78>)
 8003de6:	4053      	eors	r3, r2
 8003de8:	807b      	strh	r3, [r7, #2]
 8003dea:	e002      	b.n	8003df2 <init_crc16_tab+0x3e>
			else                      crc =   crc >> 1;
 8003dec:	887b      	ldrh	r3, [r7, #2]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	807b      	strh	r3, [r7, #2]

			c = c >> 1;
 8003df2:	883b      	ldrh	r3, [r7, #0]
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	803b      	strh	r3, [r7, #0]
		for (j=0; j<8; j++) {
 8003df8:	88bb      	ldrh	r3, [r7, #4]
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	80bb      	strh	r3, [r7, #4]
 8003dfe:	88bb      	ldrh	r3, [r7, #4]
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	d9e4      	bls.n	8003dce <init_crc16_tab+0x1a>
		}

		crc_tab16[i] = crc;
 8003e04:	88fb      	ldrh	r3, [r7, #6]
 8003e06:	490a      	ldr	r1, [pc, #40]	; (8003e30 <init_crc16_tab+0x7c>)
 8003e08:	887a      	ldrh	r2, [r7, #2]
 8003e0a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (i=0; i<256; i++) {
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	3301      	adds	r3, #1
 8003e12:	80fb      	strh	r3, [r7, #6]
 8003e14:	88fb      	ldrh	r3, [r7, #6]
 8003e16:	2bff      	cmp	r3, #255	; 0xff
 8003e18:	d9d2      	bls.n	8003dc0 <init_crc16_tab+0xc>
	}

	crc_tab16_init = true;
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <init_crc16_tab+0x80>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]

}  /* init_crc16_tab */
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	ffffa001 	.word	0xffffa001
 8003e30:	200001a0 	.word	0x200001a0
 8003e34:	2000019c 	.word	0x2000019c

08003e38 <crc_8>:
 *
 * The function crc_8() calculates the 8 bit wide CRC of an input string of a
 * given length.
 */

uint8_t crc_8( const unsigned char *input_str, size_t num_bytes ) {
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]

	size_t a;
	uint8_t crc;
	const unsigned char *ptr;

	crc = CRC_START_8;
 8003e42:	2300      	movs	r3, #0
 8003e44:	74fb      	strb	r3, [r7, #19]
	ptr = input_str;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]

	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d014      	beq.n	8003e7a <crc_8+0x42>
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e00d      	b.n	8003e72 <crc_8+0x3a>

		crc = sht75_crc_table[(*ptr++) ^ crc];
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	60fa      	str	r2, [r7, #12]
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	4053      	eors	r3, r2
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <crc_8+0x50>)
 8003e68:	5c9b      	ldrb	r3, [r3, r2]
 8003e6a:	74fb      	strb	r3, [r7, #19]
	if ( ptr != NULL ) for (a=0; a<num_bytes; a++) {
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d3ed      	bcc.n	8003e56 <crc_8+0x1e>
	}

	return crc;
 8003e7a:	7cfb      	ldrb	r3, [r7, #19]

}  /* crc_8 */
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <Comm_Unpack_Fun>:
#include "main.h"


uint32_t Comm_Unpack_Fun(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
	//uint16_t unpack_cnt = 0;
	uint8_t u8_rxdata = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	71fb      	strb	r3, [r7, #7]
	//static uint8_t unpack_phase = 0;

	while (!is_DeCirqueempty(p_usartrxque)) // || (unpack_cnt ++ < CONFIG_USART_RXQUE_MAXLEN))
 8003e96:	e006      	b.n	8003ea6 <Comm_Unpack_Fun+0x1a>
	{
		if (1 == DeCirque_pop(p_usartrxque,&u8_rxdata, 1))
 8003e98:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <Comm_Unpack_Fun+0x34>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	1df9      	adds	r1, r7, #7
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fc55 	bl	8004750 <DeCirque_pop>
	while (!is_DeCirqueempty(p_usartrxque)) // || (unpack_cnt ++ < CONFIG_USART_RXQUE_MAXLEN))
 8003ea6:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <Comm_Unpack_Fun+0x34>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fc3a 	bl	8004724 <is_DeCirqueempty>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0f0      	beq.n	8003e98 <Comm_Unpack_Fun+0xc>

			}*/

		}
	}
	return 0;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200003e4 	.word	0x200003e4

08003ec4 <Comm_Recv_Process>:
#include "main.h"

T_Comm_Test_Send g_tComm_Test_Send = {0};

static void Comm_Recv_Process(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
	if (SUCCESS == Comm_Unpack_Fun())
 8003ec8:	f7ff ffe0 	bl	8003e8c <Comm_Unpack_Fun>
	{

	}
}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <Comm_Tra_Procecss>:

static void Comm_Tra_Procecss(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
	//uint8_t i = 0;
	//uint16_t tx_crc16 = 0;
	T_Comm_Test_Send *p_tComm_Test_Send = (T_Comm_Test_Send *)g_aUsartTxBuf;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <Comm_Tra_Procecss+0x7c>)
 8003ed8:	607b      	str	r3, [r7, #4]

	p_tComm_Test_Send->g_tHeadTestSend.head_start = 0xFF;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	22ff      	movs	r2, #255	; 0xff
 8003ede:	701a      	strb	r2, [r3, #0]
	p_tComm_Test_Send->g_tHeadTestSend.head_traid = 0x01;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	705a      	strb	r2, [r3, #1]
	p_tComm_Test_Send->g_tHeadTestSend.head_recid = 0x02;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	709a      	strb	r2, [r3, #2]
	p_tComm_Test_Send->g_tHeadTestSend.head_protoltype = 0xE1;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	22e1      	movs	r2, #225	; 0xe1
 8003ef0:	70da      	strb	r2, [r3, #3]
	p_tComm_Test_Send->g_tHeadTestSend.frame_cnt = 0x01;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	711a      	strb	r2, [r3, #4]
	p_tComm_Test_Send->g_tHeadTestSend.head_crc = crc_8(p_tComm_Test_Send, CONFIG_COMMUSART_HEAD_LEN-1);
 8003ef8:	2105      	movs	r1, #5
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7ff ff9c 	bl	8003e38 <crc_8>
 8003f00:	4603      	mov	r3, r0
 8003f02:	461a      	mov	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	715a      	strb	r2, [r3, #5]

	p_tComm_Test_Send->g_tFrameTestSend.frame_start = 0xFE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	22fe      	movs	r2, #254	; 0xfe
 8003f0c:	719a      	strb	r2, [r3, #6]
	p_tComm_Test_Send->g_tFrameTestSend.frame_len   = 6;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2206      	movs	r2, #6
 8003f12:	71da      	strb	r2, [r3, #7]
	p_tComm_Test_Send->g_tFrameTestSend.frame_func  = 0xd9;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	22d9      	movs	r2, #217	; 0xd9
 8003f18:	721a      	strb	r2, [r3, #8]
	p_tComm_Test_Send->g_tFrameTestSend.frame_dates[0] = 10;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	725a      	strb	r2, [r3, #9]
	p_tComm_Test_Send->g_tFrameTestSend.frame_dates[1] = 11;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	220b      	movs	r2, #11
 8003f24:	729a      	strb	r2, [r3, #10]

	//crc to do
	p_tComm_Test_Send->g_tFrameTestSend.fram_crc = crc_16(&p_tComm_Test_Send->g_tFrameTestSend, CONFIG_COMMUSART_DATA_LEN-1);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3306      	adds	r3, #6
 8003f2a:	2106      	movs	r1, #6
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff ff09 	bl	8003d44 <crc_16>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8a3 200b 	strh.w	r2, [r3, #11]

	Comm_Tx_Hal((uint8_t *)p_tComm_Test_Send, sizeof(g_tComm_Test_Send));
 8003f3c:	210d      	movs	r1, #13
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fae6 	bl	8004510 <Comm_Tx_Hal>
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200003c0 	.word	0x200003c0

08003f50 <Comm_Task>:

void Comm_Task(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
	Comm_Recv_Process();
 8003f54:	f7ff ffb6 	bl	8003ec4 <Comm_Recv_Process>
	Comm_Tra_Procecss();
 8003f58:	f7ff ffba 	bl	8003ed0 <Comm_Tra_Procecss>
}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <LL_DMA_EnableChannel>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <LL_DMA_EnableChannel+0x40>)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4908      	ldr	r1, [pc, #32]	; (8003fa0 <LL_DMA_EnableChannel+0x40>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	440a      	add	r2, r1
 8003f84:	7812      	ldrb	r2, [r2, #0]
 8003f86:	4611      	mov	r1, r2
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	440a      	add	r2, r1
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6013      	str	r3, [r2, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	08004bcc 	.word	0x08004bcc

08003fa4 <LL_DMA_DisableChannel>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <LL_DMA_DisableChannel+0x40>)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4908      	ldr	r1, [pc, #32]	; (8003fe4 <LL_DMA_DisableChannel+0x40>)
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	440a      	add	r2, r1
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	4611      	mov	r1, r2
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	08004bcc 	.word	0x08004bcc

08003fe8 <LL_DMA_IsEnabledChannel>:
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <LL_DMA_IsEnabledChannel+0x38>)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <LL_DMA_IsEnabledChannel+0x2a>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <LL_DMA_IsEnabledChannel+0x2c>
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	08004bcc 	.word	0x08004bcc

08004024 <LL_DMA_GetDataTransferDirection>:
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8004032:	4a08      	ldr	r2, [pc, #32]	; (8004054 <LL_DMA_GetDataTransferDirection+0x30>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4413      	add	r3, r2
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f244 0310 	movw	r3, #16400	; 0x4010
 8004046:	4013      	ands	r3, r2
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr
 8004054:	08004bcc 	.word	0x08004bcc

08004058 <LL_DMA_SetDataLength>:
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8004068:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <LL_DMA_SetDataLength+0x48>)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4413      	add	r3, r2
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4413      	add	r3, r2
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	4908      	ldr	r1, [pc, #32]	; (80040a0 <LL_DMA_SetDataLength+0x48>)
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	440a      	add	r2, r1
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	4611      	mov	r1, r2
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	440a      	add	r2, r1
 800408a:	4611      	mov	r1, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4313      	orrs	r3, r2
 8004090:	604b      	str	r3, [r1, #4]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	08004bcc 	.word	0x08004bcc

080040a4 <LL_DMA_GetDataLength>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80040b2:	4a07      	ldr	r2, [pc, #28]	; (80040d0 <LL_DMA_GetDataLength+0x2c>)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	4413      	add	r3, r2
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4413      	add	r3, r2
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	b29b      	uxth	r3, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	08004bcc 	.word	0x08004bcc

080040d4 <LL_DMA_ConfigAddresses>:
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d114      	bne.n	8004116 <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80040ec:	4a17      	ldr	r2, [pc, #92]	; (800414c <LL_DMA_ConfigAddresses+0x78>)
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	4413      	add	r3, r2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 8004100:	4a12      	ldr	r2, [pc, #72]	; (800414c <LL_DMA_ConfigAddresses+0x78>)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4413      	add	r3, r2
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	4413      	add	r3, r2
 800410e:	461a      	mov	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	6093      	str	r3, [r2, #8]
}
 8004114:	e013      	b.n	800413e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 8004116:	4a0d      	ldr	r2, [pc, #52]	; (800414c <LL_DMA_ConfigAddresses+0x78>)
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4413      	add	r3, r2
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	4413      	add	r3, r2
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 800412a:	4a08      	ldr	r2, [pc, #32]	; (800414c <LL_DMA_ConfigAddresses+0x78>)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4413      	add	r3, r2
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	4413      	add	r3, r2
 8004138:	461a      	mov	r2, r3
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	60d3      	str	r3, [r2, #12]
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	08004bcc 	.word	0x08004bcc

08004150 <LL_DMA_IsActiveFlag_TC2>:
  * @rmtoll ISR          TCIF2         LL_DMA_IsActiveFlag_TC2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC2(DMA_TypeDef *DMAx)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF2) == (DMA_ISR_TCIF2)) ? 1UL : 0UL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b20      	cmp	r3, #32
 8004162:	d101      	bne.n	8004168 <LL_DMA_IsActiveFlag_TC2+0x18>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <LL_DMA_IsActiveFlag_TC2+0x1a>
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_DMA_IsActiveFlag_TC3>:
  * @rmtoll ISR          TCIF3         LL_DMA_IsActiveFlag_TC3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC3(DMA_TypeDef *DMAx)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF3) == (DMA_ISR_TCIF3)) ? 1UL : 0UL);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418a:	d101      	bne.n	8004190 <LL_DMA_IsActiveFlag_TC3+0x1a>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <LL_DMA_IsActiveFlag_TC3+0x1c>
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_DMA_IsActiveFlag_TE2>:
  * @rmtoll ISR          TEIF2         LL_DMA_IsActiveFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE2(DMA_TypeDef *DMAx)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF2) == (DMA_ISR_TEIF2)) ? 1UL : 0UL);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b80      	cmp	r3, #128	; 0x80
 80041b0:	d101      	bne.n	80041b6 <LL_DMA_IsActiveFlag_TE2+0x18>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <LL_DMA_IsActiveFlag_TE2+0x1a>
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_DMA_IsActiveFlag_TE3>:
  * @rmtoll ISR          TEIF3         LL_DMA_IsActiveFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE3(DMA_TypeDef *DMAx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3)) ? 1UL : 0UL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d8:	d101      	bne.n	80041de <LL_DMA_IsActiveFlag_TE3+0x1a>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <LL_DMA_IsActiveFlag_TE3+0x1c>
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_DMA_ClearFlag_GI2>:
  * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2210      	movs	r2, #16
 80041f8:	605a      	str	r2, [r3, #4]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004214:	605a      	str	r2, [r3, #4]
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <LL_DMA_ClearFlag_TE2>:
  * @rmtoll IFCR         CTEIF2        LL_DMA_ClearFlag_TE2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE2(DMA_TypeDef *DMAx)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF2);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	605a      	str	r2, [r3, #4]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_DMA_ClearFlag_TE3>:
  * @rmtoll IFCR         CTEIF3        LL_DMA_ClearFlag_TE3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE3(DMA_TypeDef *DMAx)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800424a:	605a      	str	r2, [r3, #4]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8004266:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <LL_DMA_EnableIT_TC+0x40>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4908      	ldr	r1, [pc, #32]	; (8004298 <LL_DMA_EnableIT_TC+0x40>)
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	440a      	add	r2, r1
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	4611      	mov	r1, r2
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	440a      	add	r2, r1
 8004284:	f043 0302 	orr.w	r3, r3, #2
 8004288:	6013      	str	r3, [r2, #0]
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	08004bcc 	.word	0x08004bcc

0800429c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TEIE);
 80042aa:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <LL_DMA_EnableIT_TE+0x40>)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	4413      	add	r3, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <LL_DMA_EnableIT_TE+0x40>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	440a      	add	r2, r1
 80042c0:	7812      	ldrb	r2, [r2, #0]
 80042c2:	4611      	mov	r1, r2
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	440a      	add	r2, r1
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6013      	str	r3, [r2, #0]
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	08004bcc 	.word	0x08004bcc

080042e0 <LL_USART_IsActiveFlag_IDLE>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d101      	bne.n	80042f8 <LL_USART_IsActiveFlag_IDLE+0x18>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <LL_USART_IsActiveFlag_IDLE+0x1a>
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_USART_IsActiveFlag_TC>:
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004316:	2b40      	cmp	r3, #64	; 0x40
 8004318:	d101      	bne.n	800431e <LL_USART_IsActiveFlag_TC+0x18>
 800431a:	2301      	movs	r3, #1
 800431c:	e000      	b.n	8004320 <LL_USART_IsActiveFlag_TC+0x1a>
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2210      	movs	r2, #16
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2240      	movs	r2, #64	; 0x40
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f043 0210 	orr.w	r2, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	601a      	str	r2, [r3, #0]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <LL_USART_DisableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 0210 	bic.w	r2, r3, #16
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3328      	adds	r3, #40	; 0x28
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e002      	b.n	800443e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3324      	adds	r3, #36	; 0x24
 800443c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 800443e:	68fb      	ldr	r3, [r7, #12]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <Comm_BufInit_Hal>:

T_DeCirqueDate *p_usarttxque = NULL;
T_DeCirqueDate *p_usartrxque = NULL;

void Comm_BufInit_Hal(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
    p_usarttxque = DeCirque_init(CONFIG_USART_TXQUE_MAXLEN);
 8004450:	205a      	movs	r0, #90	; 0x5a
 8004452:	f000 fa16 	bl	8004882 <DeCirque_init>
 8004456:	4602      	mov	r2, r0
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <Comm_BufInit_Hal+0x20>)
 800445a:	601a      	str	r2, [r3, #0]
    p_usartrxque = DeCirque_init(CONFIG_USART_RXQUE_MAXLEN);
 800445c:	203c      	movs	r0, #60	; 0x3c
 800445e:	f000 fa10 	bl	8004882 <DeCirque_init>
 8004462:	4602      	mov	r2, r0
 8004464:	4b02      	ldr	r3, [pc, #8]	; (8004470 <Comm_BufInit_Hal+0x24>)
 8004466:	601a      	str	r2, [r3, #0]
}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200003e0 	.word	0x200003e0
 8004470:	200003e4 	.word	0x200003e4

08004474 <Comm_DMAUconf_Hal>:

void Comm_DMAUconf_Hal(void)
{
 8004474:	b5b0      	push	{r4, r5, r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af02      	add	r7, sp, #8
    /* (3) Configure the DMA functional parameters for transmission */
    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_2,
 800447a:	4c21      	ldr	r4, [pc, #132]	; (8004500 <Comm_DMAUconf_Hal+0x8c>)
 800447c:	2100      	movs	r1, #0
 800447e:	4821      	ldr	r0, [pc, #132]	; (8004504 <Comm_DMAUconf_Hal+0x90>)
 8004480:	f7ff ffce 	bl	8004420 <LL_USART_DMA_GetRegAddr>
 8004484:	4605      	mov	r5, r0
 8004486:	2101      	movs	r1, #1
 8004488:	481f      	ldr	r0, [pc, #124]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 800448a:	f7ff fdcb 	bl	8004024 <LL_DMA_GetDataTransferDirection>
 800448e:	4603      	mov	r3, r0
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	462b      	mov	r3, r5
 8004494:	4622      	mov	r2, r4
 8004496:	2101      	movs	r1, #1
 8004498:	481b      	ldr	r0, [pc, #108]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 800449a:	f7ff fe1b 	bl	80040d4 <LL_DMA_ConfigAddresses>
                           (uint32_t)g_aTXDMABuf,
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT),
                           LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2));
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, CONFIG_USARTDMA_TX_MAXLEN);
 800449e:	220a      	movs	r2, #10
 80044a0:	2101      	movs	r1, #1
 80044a2:	4819      	ldr	r0, [pc, #100]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 80044a4:	f7ff fdd8 	bl	8004058 <LL_DMA_SetDataLength>

    /* (4) Configure the DMA functional parameters for reception */

    LL_DMA_ConfigAddresses(DMA1, LL_DMA_CHANNEL_3,
 80044a8:	2101      	movs	r1, #1
 80044aa:	4816      	ldr	r0, [pc, #88]	; (8004504 <Comm_DMAUconf_Hal+0x90>)
 80044ac:	f7ff ffb8 	bl	8004420 <LL_USART_DMA_GetRegAddr>
 80044b0:	4605      	mov	r5, r0
 80044b2:	4c16      	ldr	r4, [pc, #88]	; (800450c <Comm_DMAUconf_Hal+0x98>)
 80044b4:	2102      	movs	r1, #2
 80044b6:	4814      	ldr	r0, [pc, #80]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 80044b8:	f7ff fdb4 	bl	8004024 <LL_DMA_GetDataTransferDirection>
 80044bc:	4603      	mov	r3, r0
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	4623      	mov	r3, r4
 80044c2:	462a      	mov	r2, r5
 80044c4:	2102      	movs	r1, #2
 80044c6:	4810      	ldr	r0, [pc, #64]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 80044c8:	f7ff fe04 	bl	80040d4 <LL_DMA_ConfigAddresses>
                           LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
                           (uint32_t)g_aRXDMABuf,
                           LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3));
    LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, CONFIG_USARTDMA_RX_MAXLEN);
 80044cc:	2214      	movs	r2, #20
 80044ce:	2102      	movs	r1, #2
 80044d0:	480d      	ldr	r0, [pc, #52]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 80044d2:	f7ff fdc1 	bl	8004058 <LL_DMA_SetDataLength>

    /* (5) Enable DMA transfer complete/error interrupts  */
    //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_2);
 80044d6:	2101      	movs	r1, #1
 80044d8:	480b      	ldr	r0, [pc, #44]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 80044da:	f7ff fedf 	bl	800429c <LL_DMA_EnableIT_TE>
    //LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
    LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_3);
 80044de:	2102      	movs	r1, #2
 80044e0:	4809      	ldr	r0, [pc, #36]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 80044e2:	f7ff fedb 	bl	800429c <LL_DMA_EnableIT_TE>

    LL_USART_EnableDMAReq_RX(USART1);
 80044e6:	4807      	ldr	r0, [pc, #28]	; (8004504 <Comm_DMAUconf_Hal+0x90>)
 80044e8:	f7ff ff7a 	bl	80043e0 <LL_USART_EnableDMAReq_RX>
    LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 80044ec:	2102      	movs	r1, #2
 80044ee:	4806      	ldr	r0, [pc, #24]	; (8004508 <Comm_DMAUconf_Hal+0x94>)
 80044f0:	f7ff fd36 	bl	8003f60 <LL_DMA_EnableChannel>

    LL_USART_EnableIT_IDLE(USART1);
 80044f4:	4803      	ldr	r0, [pc, #12]	; (8004504 <Comm_DMAUconf_Hal+0x90>)
 80044f6:	f7ff ff33 	bl	8004360 <LL_USART_EnableIT_IDLE>

}
 80044fa:	bf00      	nop
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004500:	200003a0 	.word	0x200003a0
 8004504:	40013800 	.word	0x40013800
 8004508:	40020000 	.word	0x40020000
 800450c:	200003ac 	.word	0x200003ac

08004510 <Comm_Tx_Hal>:

void Comm_Tx_Hal(uint8_t *p_txbuf, uint8_t tx_len)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	460b      	mov	r3, r1
 800451a:	70fb      	strb	r3, [r7, #3]
    uint8_t tx_dmalen = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]

    DeCirque_push(p_usarttxque, p_txbuf, tx_len);
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <Comm_Tx_Hal+0x78>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f957 	bl	80047dc <DeCirque_push>
    if (!LL_DMA_IsEnabledChannel(DMA1, LL_DMA_CHANNEL_2))
 800452e:	2101      	movs	r1, #1
 8004530:	4816      	ldr	r0, [pc, #88]	; (800458c <Comm_Tx_Hal+0x7c>)
 8004532:	f7ff fd59 	bl	8003fe8 <LL_DMA_IsEnabledChannel>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d121      	bne.n	8004580 <Comm_Tx_Hal+0x70>
    {
        tx_dmalen = (p_usarttxque->size < CONFIG_USARTDMA_TX_MAXLEN) ? p_usarttxque->size : CONFIG_USARTDMA_TX_MAXLEN;
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <Comm_Tx_Hal+0x78>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b0a      	cmp	r3, #10
 8004544:	bfa8      	it	ge
 8004546:	230a      	movge	r3, #10
 8004548:	73fb      	strb	r3, [r7, #15]
        if (1 == DeCirque_pop(p_usarttxque, g_aTXDMABuf, tx_dmalen))
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <Comm_Tx_Hal+0x78>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	490f      	ldr	r1, [pc, #60]	; (8004590 <Comm_Tx_Hal+0x80>)
 8004552:	4618      	mov	r0, r3
 8004554:	f000 f8fc 	bl	8004750 <DeCirque_pop>
 8004558:	4603      	mov	r3, r0
 800455a:	2b01      	cmp	r3, #1
 800455c:	d110      	bne.n	8004580 <Comm_Tx_Hal+0x70>
        {
        	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	461a      	mov	r2, r3
 8004562:	2101      	movs	r1, #1
 8004564:	4809      	ldr	r0, [pc, #36]	; (800458c <Comm_Tx_Hal+0x7c>)
 8004566:	f7ff fd77 	bl	8004058 <LL_DMA_SetDataLength>
        	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_2);
 800456a:	2101      	movs	r1, #1
 800456c:	4807      	ldr	r0, [pc, #28]	; (800458c <Comm_Tx_Hal+0x7c>)
 800456e:	f7ff fe73 	bl	8004258 <LL_DMA_EnableIT_TC>
            LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 8004572:	2101      	movs	r1, #1
 8004574:	4805      	ldr	r0, [pc, #20]	; (800458c <Comm_Tx_Hal+0x7c>)
 8004576:	f7ff fcf3 	bl	8003f60 <LL_DMA_EnableChannel>
            LL_USART_EnableDMAReq_TX(USART1);
 800457a:	4806      	ldr	r0, [pc, #24]	; (8004594 <Comm_Tx_Hal+0x84>)
 800457c:	f7ff ff40 	bl	8004400 <LL_USART_EnableDMAReq_TX>
        }
    }
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	200003e0 	.word	0x200003e0
 800458c:	40020000 	.word	0x40020000
 8004590:	200003a0 	.word	0x200003a0
 8004594:	40013800 	.word	0x40013800

08004598 <DMA1_ReceiveComplete_Callback>:


//******************** handler ***********************
static void DMA1_ReceiveComplete_Callback(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
	uint8_t rx_dmalen = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	71fb      	strb	r3, [r7, #7]

	//LL_DMA_DisableIT_TC(DMA1, LL_DMA_CHANNEL_3);
	//LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_3);
 80045a2:	2102      	movs	r1, #2
 80045a4:	480f      	ldr	r0, [pc, #60]	; (80045e4 <DMA1_ReceiveComplete_Callback+0x4c>)
 80045a6:	f7ff fcfd 	bl	8003fa4 <LL_DMA_DisableChannel>

	rx_dmalen = CONFIG_USARTDMA_RX_MAXLEN - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_3);
 80045aa:	2102      	movs	r1, #2
 80045ac:	480d      	ldr	r0, [pc, #52]	; (80045e4 <DMA1_ReceiveComplete_Callback+0x4c>)
 80045ae:	f7ff fd79 	bl	80040a4 <LL_DMA_GetDataLength>
 80045b2:	4603      	mov	r3, r0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f1c3 0314 	rsb	r3, r3, #20
 80045ba:	71fb      	strb	r3, [r7, #7]
	DeCirque_push(p_usartrxque, g_aRXDMABuf, rx_dmalen);
 80045bc:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <DMA1_ReceiveComplete_Callback+0x50>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	79fa      	ldrb	r2, [r7, #7]
 80045c2:	490a      	ldr	r1, [pc, #40]	; (80045ec <DMA1_ReceiveComplete_Callback+0x54>)
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f909 	bl	80047dc <DeCirque_push>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_3, CONFIG_USARTDMA_RX_MAXLEN);
 80045ca:	2214      	movs	r2, #20
 80045cc:	2102      	movs	r1, #2
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <DMA1_ReceiveComplete_Callback+0x4c>)
 80045d0:	f7ff fd42 	bl	8004058 <LL_DMA_SetDataLength>

	//LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_3);
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_3);
 80045d4:	2102      	movs	r1, #2
 80045d6:	4803      	ldr	r0, [pc, #12]	; (80045e4 <DMA1_ReceiveComplete_Callback+0x4c>)
 80045d8:	f7ff fcc2 	bl	8003f60 <LL_DMA_EnableChannel>
}
 80045dc:	bf00      	nop
 80045de:	3708      	adds	r7, #8
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40020000 	.word	0x40020000
 80045e8:	200003e4 	.word	0x200003e4
 80045ec:	200003ac 	.word	0x200003ac

080045f0 <Comm_DMA_CHAN2_Handler>:

void Comm_DMA_CHAN2_Handler(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
    if(LL_DMA_IsActiveFlag_TC2(DMA1))
 80045f4:	480b      	ldr	r0, [pc, #44]	; (8004624 <Comm_DMA_CHAN2_Handler+0x34>)
 80045f6:	f7ff fdab 	bl	8004150 <LL_DMA_IsActiveFlag_TC2>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <Comm_DMA_CHAN2_Handler+0x1e>
    {
        LL_DMA_ClearFlag_GI2(DMA1);
 8004600:	4808      	ldr	r0, [pc, #32]	; (8004624 <Comm_DMA_CHAN2_Handler+0x34>)
 8004602:	f7ff fdf3 	bl	80041ec <LL_DMA_ClearFlag_GI2>
        /* Call function Transmission complete Callback */
        //DMA1_TransmitComplete_Callback();
        LL_USART_EnableIT_TC(USART1);
 8004606:	4808      	ldr	r0, [pc, #32]	; (8004628 <Comm_DMA_CHAN2_Handler+0x38>)
 8004608:	f7ff feba 	bl	8004380 <LL_USART_EnableIT_TC>
//    {
//    	LL_DMA_ClearFlag_TE3(DMA1);
//        /* Call Error function */
//        //USART_TransferError_Callback();
//    }
}
 800460c:	e008      	b.n	8004620 <Comm_DMA_CHAN2_Handler+0x30>
    else if(LL_DMA_IsActiveFlag_TE2(DMA1))
 800460e:	4805      	ldr	r0, [pc, #20]	; (8004624 <Comm_DMA_CHAN2_Handler+0x34>)
 8004610:	f7ff fdc5 	bl	800419e <LL_DMA_IsActiveFlag_TE2>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <Comm_DMA_CHAN2_Handler+0x30>
    	LL_DMA_ClearFlag_TE2(DMA1);
 800461a:	4802      	ldr	r0, [pc, #8]	; (8004624 <Comm_DMA_CHAN2_Handler+0x34>)
 800461c:	f7ff fe01 	bl	8004222 <LL_DMA_ClearFlag_TE2>
}
 8004620:	bf00      	nop
 8004622:	bd80      	pop	{r7, pc}
 8004624:	40020000 	.word	0x40020000
 8004628:	40013800 	.word	0x40013800

0800462c <Comm_DMA_CHAN3_Handler>:

void Comm_DMA_CHAN3_Handler(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
//    {
//        /* Call Error function */
//        //USART_TransferError_Callback();
//    	LL_DMA_ClearFlag_TE2(DMA1);
//    }
    if(LL_DMA_IsActiveFlag_TC3(DMA1))
 8004630:	480a      	ldr	r0, [pc, #40]	; (800465c <Comm_DMA_CHAN3_Handler+0x30>)
 8004632:	f7ff fda0 	bl	8004176 <LL_DMA_IsActiveFlag_TC3>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <Comm_DMA_CHAN3_Handler+0x18>
    {
        LL_DMA_ClearFlag_GI3(DMA1);
 800463c:	4807      	ldr	r0, [pc, #28]	; (800465c <Comm_DMA_CHAN3_Handler+0x30>)
 800463e:	f7ff fde2 	bl	8004206 <LL_DMA_ClearFlag_GI3>
    {
    	LL_DMA_ClearFlag_TE3(DMA1);
        /* Call Error function */
        //USART_TransferError_Callback();
    }
}
 8004642:	e008      	b.n	8004656 <Comm_DMA_CHAN3_Handler+0x2a>
    else if(LL_DMA_IsActiveFlag_TE3(DMA1))
 8004644:	4805      	ldr	r0, [pc, #20]	; (800465c <Comm_DMA_CHAN3_Handler+0x30>)
 8004646:	f7ff fdbd 	bl	80041c4 <LL_DMA_IsActiveFlag_TE3>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <Comm_DMA_CHAN3_Handler+0x2a>
    	LL_DMA_ClearFlag_TE3(DMA1);
 8004650:	4802      	ldr	r0, [pc, #8]	; (800465c <Comm_DMA_CHAN3_Handler+0x30>)
 8004652:	f7ff fdf3 	bl	800423c <LL_DMA_ClearFlag_TE3>
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40020000 	.word	0x40020000

08004660 <Comm_USART1_TX_Handler>:

void Comm_USART1_TX_Handler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
	 uint8_t tx_dmalen = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	71fb      	strb	r3, [r7, #7]

	if (is_DeCirqueempty(p_usarttxque))
 800466a:	4b18      	ldr	r3, [pc, #96]	; (80046cc <Comm_USART1_TX_Handler+0x6c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f858 	bl	8004724 <is_DeCirqueempty>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <Comm_USART1_TX_Handler+0x24>
	{
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 800467a:	2101      	movs	r1, #1
 800467c:	4814      	ldr	r0, [pc, #80]	; (80046d0 <Comm_USART1_TX_Handler+0x70>)
 800467e:	f7ff fc91 	bl	8003fa4 <LL_DMA_DisableChannel>
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
			//LL_USART_EnableDMAReq_TX(USART1);
		}
	}
}
 8004682:	e01e      	b.n	80046c2 <Comm_USART1_TX_Handler+0x62>
		tx_dmalen = (p_usarttxque->size < CONFIG_USARTDMA_TX_MAXLEN) ? p_usarttxque->size : CONFIG_USARTDMA_TX_MAXLEN;
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <Comm_USART1_TX_Handler+0x6c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	2b0a      	cmp	r3, #10
 800468c:	bfa8      	it	ge
 800468e:	230a      	movge	r3, #10
 8004690:	71fb      	strb	r3, [r7, #7]
		if (1 == DeCirque_pop(p_usarttxque, g_aTXDMABuf, tx_dmalen))
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <Comm_USART1_TX_Handler+0x6c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	79fa      	ldrb	r2, [r7, #7]
 8004698:	490e      	ldr	r1, [pc, #56]	; (80046d4 <Comm_USART1_TX_Handler+0x74>)
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f858 	bl	8004750 <DeCirque_pop>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d10d      	bne.n	80046c2 <Comm_USART1_TX_Handler+0x62>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_2);
 80046a6:	2101      	movs	r1, #1
 80046a8:	4809      	ldr	r0, [pc, #36]	; (80046d0 <Comm_USART1_TX_Handler+0x70>)
 80046aa:	f7ff fc7b 	bl	8003fa4 <LL_DMA_DisableChannel>
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_2, tx_dmalen);
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	461a      	mov	r2, r3
 80046b2:	2101      	movs	r1, #1
 80046b4:	4806      	ldr	r0, [pc, #24]	; (80046d0 <Comm_USART1_TX_Handler+0x70>)
 80046b6:	f7ff fccf 	bl	8004058 <LL_DMA_SetDataLength>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_2);
 80046ba:	2101      	movs	r1, #1
 80046bc:	4804      	ldr	r0, [pc, #16]	; (80046d0 <Comm_USART1_TX_Handler+0x70>)
 80046be:	f7ff fc4f 	bl	8003f60 <LL_DMA_EnableChannel>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200003e0 	.word	0x200003e0
 80046d0:	40020000 	.word	0x40020000
 80046d4:	200003a0 	.word	0x200003a0

080046d8 <Comm_USART1_Handler>:

void Comm_USART1_Handler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
	if (LL_USART_IsActiveFlag_TC(USART1))
 80046dc:	4810      	ldr	r0, [pc, #64]	; (8004720 <Comm_USART1_Handler+0x48>)
 80046de:	f7ff fe12 	bl	8004306 <LL_USART_IsActiveFlag_TC>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <Comm_USART1_Handler+0x20>
	{
		LL_USART_ClearFlag_TC(USART1);
 80046e8:	480d      	ldr	r0, [pc, #52]	; (8004720 <Comm_USART1_Handler+0x48>)
 80046ea:	f7ff fe2c 	bl	8004346 <LL_USART_ClearFlag_TC>
		LL_USART_DisableIT_TC(USART1);
 80046ee:	480c      	ldr	r0, [pc, #48]	; (8004720 <Comm_USART1_Handler+0x48>)
 80046f0:	f7ff fe66 	bl	80043c0 <LL_USART_DisableIT_TC>
		Comm_USART1_TX_Handler();
 80046f4:	f7ff ffb4 	bl	8004660 <Comm_USART1_TX_Handler>
	}
	if (LL_USART_IsActiveFlag_IDLE(USART1))
 80046f8:	4809      	ldr	r0, [pc, #36]	; (8004720 <Comm_USART1_Handler+0x48>)
 80046fa:	f7ff fdf1 	bl	80042e0 <LL_USART_IsActiveFlag_IDLE>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <Comm_USART1_Handler+0x42>
	{
		LL_USART_ClearFlag_IDLE(USART1);
 8004704:	4806      	ldr	r0, [pc, #24]	; (8004720 <Comm_USART1_Handler+0x48>)
 8004706:	f7ff fe11 	bl	800432c <LL_USART_ClearFlag_IDLE>
		LL_USART_DisableIT_IDLE(USART1);
 800470a:	4805      	ldr	r0, [pc, #20]	; (8004720 <Comm_USART1_Handler+0x48>)
 800470c:	f7ff fe48 	bl	80043a0 <LL_USART_DisableIT_IDLE>
		DMA1_ReceiveComplete_Callback();
 8004710:	f7ff ff42 	bl	8004598 <DMA1_ReceiveComplete_Callback>
		LL_USART_EnableIT_IDLE(USART1);
 8004714:	4802      	ldr	r0, [pc, #8]	; (8004720 <Comm_USART1_Handler+0x48>)
 8004716:	f7ff fe23 	bl	8004360 <LL_USART_EnableIT_IDLE>
	}
}
 800471a:	bf00      	nop
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40013800 	.word	0x40013800

08004724 <is_DeCirqueempty>:
#include "stdio.h"
#include "my_lib.h"

//*********************** circular queue ****************//
int32_t is_DeCirqueempty(T_DeCirqueDate *p_quehead)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
    if (NULL == p_quehead)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <is_DeCirqueempty+0x12>
        return 0;
 8004732:	2300      	movs	r3, #0
 8004734:	e006      	b.n	8004744 <is_DeCirqueempty+0x20>
    
    if (p_quehead->size <= 0)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	dc01      	bgt.n	8004742 <is_DeCirqueempty+0x1e>
    {
        return 1;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <is_DeCirqueempty+0x20>
    }

    return 0;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <DeCirque_pop>:

int32_t DeCirque_pop(T_DeCirqueDate *p_quehead, uint8_t *p_buf, uint8_t buf_len)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]

    if (NULL == p_quehead)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d102      	bne.n	800476e <DeCirque_pop+0x1e>
        return -1;
 8004768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800476c:	e030      	b.n	80047d0 <DeCirque_pop+0x80>
    if ((buf_len > p_quehead->size) || (buf_len <= 0))
 800476e:	79fa      	ldrb	r2, [r7, #7]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	429a      	cmp	r2, r3
 8004776:	dc02      	bgt.n	800477e <DeCirque_pop+0x2e>
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <DeCirque_pop+0x34>
    	return -1;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004782:	e025      	b.n	80047d0 <DeCirque_pop+0x80>

    for (i = 0; i < buf_len; i ++)
 8004784:	2300      	movs	r3, #0
 8004786:	75fb      	strb	r3, [r7, #23]
 8004788:	e01d      	b.n	80047c6 <DeCirque_pop+0x76>
    {
    	p_buf[i] = p_quehead->p_queuebuf[p_quehead->front];
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	6892      	ldr	r2, [r2, #8]
 8004792:	441a      	add	r2, r3
 8004794:	7dfb      	ldrb	r3, [r7, #23]
 8004796:	68b9      	ldr	r1, [r7, #8]
 8004798:	440b      	add	r3, r1
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	701a      	strb	r2, [r3, #0]
		p_quehead->front = (p_quehead->front + 1) % (p_quehead->cap);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	3301      	adds	r3, #1
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80047ac:	fb02 f201 	mul.w	r2, r2, r1
 80047b0:	1a9a      	subs	r2, r3, r2
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	609a      	str	r2, [r3, #8]
		p_quehead->size -= 1;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	1e5a      	subs	r2, r3, #1
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	60da      	str	r2, [r3, #12]
    for (i = 0; i < buf_len; i ++)
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
 80047c2:	3301      	adds	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
 80047c6:	7dfa      	ldrb	r2, [r7, #23]
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d3dd      	bcc.n	800478a <DeCirque_pop+0x3a>
    }
    return 1;
 80047ce:	2301      	movs	r3, #1
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <DeCirque_push>:

int32_t DeCirque_push(T_DeCirqueDate *p_quehead, uint8_t *p_buf, uint8_t buf_len)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	75fb      	strb	r3, [r7, #23]

    if (NULL == p_quehead)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d102      	bne.n	80047fa <DeCirque_push+0x1e>
        return -1;
 80047f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047f8:	e03d      	b.n	8004876 <DeCirque_push+0x9a>
    if (NULL == p_quehead->p_queuebuf)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <DeCirque_push+0x2c>
        return -1;
 8004802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004806:	e036      	b.n	8004876 <DeCirque_push+0x9a>
    if (buf_len <= 0)
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <DeCirque_push+0x38>
    	return -1;
 800480e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004812:	e030      	b.n	8004876 <DeCirque_push+0x9a>

    for (i = 0; i < buf_len; i ++)
 8004814:	2300      	movs	r3, #0
 8004816:	75fb      	strb	r3, [r7, #23]
 8004818:	e028      	b.n	800486c <DeCirque_push+0x90>
    {
    	p_quehead->p_queuebuf[p_quehead->rear] = p_buf[i];
 800481a:	7dfb      	ldrb	r3, [r7, #23]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	441a      	add	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	6849      	ldr	r1, [r1, #4]
 8004828:	440b      	add	r3, r1
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	701a      	strb	r2, [r3, #0]
		p_quehead->rear = (p_quehead->rear + 1) % (p_quehead->cap);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	3301      	adds	r3, #1
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	fb93 f1f2 	sdiv	r1, r3, r2
 800483c:	fb02 f201 	mul.w	r2, r2, r1
 8004840:	1a9a      	subs	r2, r3, r2
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]
		if (p_quehead->size < p_quehead->cap)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	da05      	bge.n	800485e <DeCirque_push+0x82>
			p_quehead->size += 1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	60da      	str	r2, [r3, #12]
 800485c:	e003      	b.n	8004866 <DeCirque_push+0x8a>
		else
		{
			p_quehead->front = p_quehead->rear;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	609a      	str	r2, [r3, #8]
    for (i = 0; i < buf_len; i ++)
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	3301      	adds	r3, #1
 800486a:	75fb      	strb	r3, [r7, #23]
 800486c:	7dfa      	ldrb	r2, [r7, #23]
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	429a      	cmp	r2, r3
 8004872:	d3d2      	bcc.n	800481a <DeCirque_push+0x3e>
		}
    }
    
    return 1;
 8004874:	2301      	movs	r3, #1
};
 8004876:	4618      	mov	r0, r3
 8004878:	371c      	adds	r7, #28
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <DeCirque_init>:

T_DeCirqueDate *DeCirque_init(int32_t buf_len)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
    if (buf_len > 0)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	dd29      	ble.n	80048e4 <DeCirque_init+0x62>
    {
        T_DeCirqueDate *p_queue = (T_DeCirqueDate *)malloc(sizeof(T_DeCirqueDate));
 8004890:	2014      	movs	r0, #20
 8004892:	f000 f895 	bl	80049c0 <malloc>
 8004896:	4603      	mov	r3, r0
 8004898:	60fb      	str	r3, [r7, #12]
        uint8_t *p_buf = (uint8_t *)malloc(buf_len * sizeof(uint8_t));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f88f 	bl	80049c0 <malloc>
 80048a2:	4603      	mov	r3, r0
 80048a4:	60bb      	str	r3, [r7, #8]

        if ((NULL == p_queue) || (NULL == p_buf))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <DeCirque_init+0x30>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d107      	bne.n	80048c2 <DeCirque_init+0x40>
        {
            free(p_queue);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f88c 	bl	80049d0 <free>
            free(p_buf);
 80048b8:	68b8      	ldr	r0, [r7, #8]
 80048ba:	f000 f889 	bl	80049d0 <free>
            return NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	e011      	b.n	80048e6 <DeCirque_init+0x64>
        }
        p_queue->cap = buf_len;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	601a      	str	r2, [r3, #0]
        p_queue->rear = 0;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	605a      	str	r2, [r3, #4]
        p_queue->front = 0;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	609a      	str	r2, [r3, #8]
        p_queue->size = 0;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	60da      	str	r2, [r3, #12]
        p_queue->p_queuebuf = p_buf;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	611a      	str	r2, [r3, #16]

        return p_queue;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	e000      	b.n	80048e6 <DeCirque_init+0x64>
    }
    return NULL;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <My_Sched_Loop>:
    {Comm_Task, 100, 100},
};


void My_Sched_Loop(void)
{
 80048f0:	b590      	push	{r4, r7, lr}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
    uint8_t i;

    for (i = 0; i < SCHED_MAX_TASKS; i++)
 80048f6:	2300      	movs	r3, #0
 80048f8:	71fb      	strb	r3, [r7, #7]
 80048fa:	e02e      	b.n	800495a <My_Sched_Loop+0x6a>
    {
        if(HAL_GetTick() >= g_uMy_Task[i].remainToExec)
 80048fc:	f7fc fd90 	bl	8001420 <HAL_GetTick>
 8004900:	79fa      	ldrb	r2, [r7, #7]
 8004902:	4919      	ldr	r1, [pc, #100]	; (8004968 <My_Sched_Loop+0x78>)
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	3308      	adds	r3, #8
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4298      	cmp	r0, r3
 8004914:	d31e      	bcc.n	8004954 <My_Sched_Loop+0x64>
        {
            g_uMy_Task[i].runnable();
 8004916:	79fa      	ldrb	r2, [r7, #7]
 8004918:	4913      	ldr	r1, [pc, #76]	; (8004968 <My_Sched_Loop+0x78>)
 800491a:	4613      	mov	r3, r2
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4413      	add	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	440b      	add	r3, r1
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4798      	blx	r3
            g_uMy_Task[i].remainToExec = g_uMy_Task[i].periodicTimeMs + HAL_GetTick();
 8004928:	79fa      	ldrb	r2, [r7, #7]
 800492a:	490f      	ldr	r1, [pc, #60]	; (8004968 <My_Sched_Loop+0x78>)
 800492c:	4613      	mov	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	3304      	adds	r3, #4
 8004938:	681c      	ldr	r4, [r3, #0]
 800493a:	f7fc fd71 	bl	8001420 <HAL_GetTick>
 800493e:	4603      	mov	r3, r0
 8004940:	79fa      	ldrb	r2, [r7, #7]
 8004942:	18e1      	adds	r1, r4, r3
 8004944:	4808      	ldr	r0, [pc, #32]	; (8004968 <My_Sched_Loop+0x78>)
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4403      	add	r3, r0
 8004950:	3308      	adds	r3, #8
 8004952:	6019      	str	r1, [r3, #0]
    for (i = 0; i < SCHED_MAX_TASKS; i++)
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	3301      	adds	r3, #1
 8004958:	71fb      	strb	r3, [r7, #7]
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0cd      	beq.n	80048fc <My_Sched_Loop+0xc>

            //Iwdg_Clear();
        }
    }
    //exp deal
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bd90      	pop	{r4, r7, pc}
 8004968:	2000010c 	.word	0x2000010c

0800496c <__errno>:
 800496c:	4b01      	ldr	r3, [pc, #4]	; (8004974 <__errno+0x8>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000118 	.word	0x20000118

08004978 <__libc_init_array>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	4e0d      	ldr	r6, [pc, #52]	; (80049b0 <__libc_init_array+0x38>)
 800497c:	4c0d      	ldr	r4, [pc, #52]	; (80049b4 <__libc_init_array+0x3c>)
 800497e:	1ba4      	subs	r4, r4, r6
 8004980:	10a4      	asrs	r4, r4, #2
 8004982:	2500      	movs	r5, #0
 8004984:	42a5      	cmp	r5, r4
 8004986:	d109      	bne.n	800499c <__libc_init_array+0x24>
 8004988:	4e0b      	ldr	r6, [pc, #44]	; (80049b8 <__libc_init_array+0x40>)
 800498a:	4c0c      	ldr	r4, [pc, #48]	; (80049bc <__libc_init_array+0x44>)
 800498c:	f000 f8ea 	bl	8004b64 <_init>
 8004990:	1ba4      	subs	r4, r4, r6
 8004992:	10a4      	asrs	r4, r4, #2
 8004994:	2500      	movs	r5, #0
 8004996:	42a5      	cmp	r5, r4
 8004998:	d105      	bne.n	80049a6 <__libc_init_array+0x2e>
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049a0:	4798      	blx	r3
 80049a2:	3501      	adds	r5, #1
 80049a4:	e7ee      	b.n	8004984 <__libc_init_array+0xc>
 80049a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049aa:	4798      	blx	r3
 80049ac:	3501      	adds	r5, #1
 80049ae:	e7f2      	b.n	8004996 <__libc_init_array+0x1e>
 80049b0:	08004bd4 	.word	0x08004bd4
 80049b4:	08004bd4 	.word	0x08004bd4
 80049b8:	08004bd4 	.word	0x08004bd4
 80049bc:	08004bd8 	.word	0x08004bd8

080049c0 <malloc>:
 80049c0:	4b02      	ldr	r3, [pc, #8]	; (80049cc <malloc+0xc>)
 80049c2:	4601      	mov	r1, r0
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	f000 b861 	b.w	8004a8c <_malloc_r>
 80049ca:	bf00      	nop
 80049cc:	20000118 	.word	0x20000118

080049d0 <free>:
 80049d0:	4b02      	ldr	r3, [pc, #8]	; (80049dc <free+0xc>)
 80049d2:	4601      	mov	r1, r0
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	f000 b80b 	b.w	80049f0 <_free_r>
 80049da:	bf00      	nop
 80049dc:	20000118 	.word	0x20000118

080049e0 <memset>:
 80049e0:	4402      	add	r2, r0
 80049e2:	4603      	mov	r3, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <_free_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	2900      	cmp	r1, #0
 80049f6:	d045      	beq.n	8004a84 <_free_r+0x94>
 80049f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fc:	1f0c      	subs	r4, r1, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfb8      	it	lt
 8004a02:	18e4      	addlt	r4, r4, r3
 8004a04:	f000 f8ac 	bl	8004b60 <__malloc_lock>
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <_free_r+0x98>)
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	b933      	cbnz	r3, 8004a1e <_free_r+0x2e>
 8004a10:	6063      	str	r3, [r4, #4]
 8004a12:	6014      	str	r4, [r2, #0]
 8004a14:	4628      	mov	r0, r5
 8004a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a1a:	f000 b8a2 	b.w	8004b62 <__malloc_unlock>
 8004a1e:	42a3      	cmp	r3, r4
 8004a20:	d90c      	bls.n	8004a3c <_free_r+0x4c>
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	1862      	adds	r2, r4, r1
 8004a26:	4293      	cmp	r3, r2
 8004a28:	bf04      	itt	eq
 8004a2a:	681a      	ldreq	r2, [r3, #0]
 8004a2c:	685b      	ldreq	r3, [r3, #4]
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	bf04      	itt	eq
 8004a32:	1852      	addeq	r2, r2, r1
 8004a34:	6022      	streq	r2, [r4, #0]
 8004a36:	6004      	str	r4, [r0, #0]
 8004a38:	e7ec      	b.n	8004a14 <_free_r+0x24>
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	b10a      	cbz	r2, 8004a44 <_free_r+0x54>
 8004a40:	42a2      	cmp	r2, r4
 8004a42:	d9fa      	bls.n	8004a3a <_free_r+0x4a>
 8004a44:	6819      	ldr	r1, [r3, #0]
 8004a46:	1858      	adds	r0, r3, r1
 8004a48:	42a0      	cmp	r0, r4
 8004a4a:	d10b      	bne.n	8004a64 <_free_r+0x74>
 8004a4c:	6820      	ldr	r0, [r4, #0]
 8004a4e:	4401      	add	r1, r0
 8004a50:	1858      	adds	r0, r3, r1
 8004a52:	4282      	cmp	r2, r0
 8004a54:	6019      	str	r1, [r3, #0]
 8004a56:	d1dd      	bne.n	8004a14 <_free_r+0x24>
 8004a58:	6810      	ldr	r0, [r2, #0]
 8004a5a:	6852      	ldr	r2, [r2, #4]
 8004a5c:	605a      	str	r2, [r3, #4]
 8004a5e:	4401      	add	r1, r0
 8004a60:	6019      	str	r1, [r3, #0]
 8004a62:	e7d7      	b.n	8004a14 <_free_r+0x24>
 8004a64:	d902      	bls.n	8004a6c <_free_r+0x7c>
 8004a66:	230c      	movs	r3, #12
 8004a68:	602b      	str	r3, [r5, #0]
 8004a6a:	e7d3      	b.n	8004a14 <_free_r+0x24>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	1821      	adds	r1, r4, r0
 8004a70:	428a      	cmp	r2, r1
 8004a72:	bf04      	itt	eq
 8004a74:	6811      	ldreq	r1, [r2, #0]
 8004a76:	6852      	ldreq	r2, [r2, #4]
 8004a78:	6062      	str	r2, [r4, #4]
 8004a7a:	bf04      	itt	eq
 8004a7c:	1809      	addeq	r1, r1, r0
 8004a7e:	6021      	streq	r1, [r4, #0]
 8004a80:	605c      	str	r4, [r3, #4]
 8004a82:	e7c7      	b.n	8004a14 <_free_r+0x24>
 8004a84:	bd38      	pop	{r3, r4, r5, pc}
 8004a86:	bf00      	nop
 8004a88:	200003e8 	.word	0x200003e8

08004a8c <_malloc_r>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	1ccd      	adds	r5, r1, #3
 8004a90:	f025 0503 	bic.w	r5, r5, #3
 8004a94:	3508      	adds	r5, #8
 8004a96:	2d0c      	cmp	r5, #12
 8004a98:	bf38      	it	cc
 8004a9a:	250c      	movcc	r5, #12
 8004a9c:	2d00      	cmp	r5, #0
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	db01      	blt.n	8004aa6 <_malloc_r+0x1a>
 8004aa2:	42a9      	cmp	r1, r5
 8004aa4:	d903      	bls.n	8004aae <_malloc_r+0x22>
 8004aa6:	230c      	movs	r3, #12
 8004aa8:	6033      	str	r3, [r6, #0]
 8004aaa:	2000      	movs	r0, #0
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	f000 f857 	bl	8004b60 <__malloc_lock>
 8004ab2:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <_malloc_r+0xac>)
 8004ab4:	6814      	ldr	r4, [r2, #0]
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	b991      	cbnz	r1, 8004ae0 <_malloc_r+0x54>
 8004aba:	4c20      	ldr	r4, [pc, #128]	; (8004b3c <_malloc_r+0xb0>)
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	b91b      	cbnz	r3, 8004ac8 <_malloc_r+0x3c>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	f000 f83d 	bl	8004b40 <_sbrk_r>
 8004ac6:	6020      	str	r0, [r4, #0]
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4630      	mov	r0, r6
 8004acc:	f000 f838 	bl	8004b40 <_sbrk_r>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d124      	bne.n	8004b1e <_malloc_r+0x92>
 8004ad4:	230c      	movs	r3, #12
 8004ad6:	6033      	str	r3, [r6, #0]
 8004ad8:	4630      	mov	r0, r6
 8004ada:	f000 f842 	bl	8004b62 <__malloc_unlock>
 8004ade:	e7e4      	b.n	8004aaa <_malloc_r+0x1e>
 8004ae0:	680b      	ldr	r3, [r1, #0]
 8004ae2:	1b5b      	subs	r3, r3, r5
 8004ae4:	d418      	bmi.n	8004b18 <_malloc_r+0x8c>
 8004ae6:	2b0b      	cmp	r3, #11
 8004ae8:	d90f      	bls.n	8004b0a <_malloc_r+0x7e>
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	50cd      	str	r5, [r1, r3]
 8004aee:	18cc      	adds	r4, r1, r3
 8004af0:	4630      	mov	r0, r6
 8004af2:	f000 f836 	bl	8004b62 <__malloc_unlock>
 8004af6:	f104 000b 	add.w	r0, r4, #11
 8004afa:	1d23      	adds	r3, r4, #4
 8004afc:	f020 0007 	bic.w	r0, r0, #7
 8004b00:	1ac3      	subs	r3, r0, r3
 8004b02:	d0d3      	beq.n	8004aac <_malloc_r+0x20>
 8004b04:	425a      	negs	r2, r3
 8004b06:	50e2      	str	r2, [r4, r3]
 8004b08:	e7d0      	b.n	8004aac <_malloc_r+0x20>
 8004b0a:	428c      	cmp	r4, r1
 8004b0c:	684b      	ldr	r3, [r1, #4]
 8004b0e:	bf16      	itet	ne
 8004b10:	6063      	strne	r3, [r4, #4]
 8004b12:	6013      	streq	r3, [r2, #0]
 8004b14:	460c      	movne	r4, r1
 8004b16:	e7eb      	b.n	8004af0 <_malloc_r+0x64>
 8004b18:	460c      	mov	r4, r1
 8004b1a:	6849      	ldr	r1, [r1, #4]
 8004b1c:	e7cc      	b.n	8004ab8 <_malloc_r+0x2c>
 8004b1e:	1cc4      	adds	r4, r0, #3
 8004b20:	f024 0403 	bic.w	r4, r4, #3
 8004b24:	42a0      	cmp	r0, r4
 8004b26:	d005      	beq.n	8004b34 <_malloc_r+0xa8>
 8004b28:	1a21      	subs	r1, r4, r0
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f000 f808 	bl	8004b40 <_sbrk_r>
 8004b30:	3001      	adds	r0, #1
 8004b32:	d0cf      	beq.n	8004ad4 <_malloc_r+0x48>
 8004b34:	6025      	str	r5, [r4, #0]
 8004b36:	e7db      	b.n	8004af0 <_malloc_r+0x64>
 8004b38:	200003e8 	.word	0x200003e8
 8004b3c:	200003ec 	.word	0x200003ec

08004b40 <_sbrk_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	4c06      	ldr	r4, [pc, #24]	; (8004b5c <_sbrk_r+0x1c>)
 8004b44:	2300      	movs	r3, #0
 8004b46:	4605      	mov	r5, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	f7fc f83c 	bl	8000bc8 <_sbrk>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_sbrk_r+0x1a>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_sbrk_r+0x1a>
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000518 	.word	0x20000518

08004b60 <__malloc_lock>:
 8004b60:	4770      	bx	lr

08004b62 <__malloc_unlock>:
 8004b62:	4770      	bx	lr

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
